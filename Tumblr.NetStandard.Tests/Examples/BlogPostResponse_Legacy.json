{
  "meta": {
    "status": 200,
    "msg": "OK"
  },
  "response": {
    "blog": {
      "ask": true,
      "ask_anon": false,
      "ask_page_title": "Ask us anything!",
      "can_chat": false,
      "can_subscribe": false,
      "description": "We, y'know, build Tumblr and stuff.",
      "is_nsfw": false,
      "name": "engineering",
      "posts": 189,
      "share_likes": false,
      "subscribed": false,
      "title": "Tumblr Engineering",
      "total_posts": 189,
      "updated": 1576275335,
      "url": "https://engineering.tumblr.com/",
      "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
      "is_optout_ads": false
    },
    "posts": [
      {
        "type": "answer",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 189653038579,
        "post_url": "https://engineering.tumblr.com/post/189653038579/cont-furthermore-while-i-understand-that",
        "slug": "cont-furthermore-while-i-understand-that",
        "date": "2019-12-13 22:15:35 GMT",
        "timestamp": 1576275335,
        "state": "published",
        "format": "html",
        "reblog_key": "yqB0oh7m",
        "tags": [],
        "short_url": "https://tmblr.co/ZI3nWx2meCxNp",
        "summary": "(cont.) furthermore, while I understand that tumblr's architecture makes efficient post lookup by ID impossible without a blog...",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 29,
        "asking_name": "nightpool",
        "asking_url": "https://nightpool.tumblr.com/",
        "question": "(cont.) furthermore, while I understand that tumblr's architecture makes efficient post lookup by ID impossible without a blog name or reblog key, couldn't you run a backfill process that took a very long time but repaired those broken URLs by very slowly searching for the unique post ID and replacing the URL with a uuid-based one? This may take a very long time to finish, but it would reduce the set of posts with broken trail items to ones that have been hard-deleted from the database.",
        "answer": "<p>This is a great follow up question! First of all: this is definitely in the realm of possibility and it’s something we’ve thought of before. At Tumblr, we’ve done some absolutely wild things at scale. When it comes to Posts on Tumblr, that’s where our scale gets really mind-blowing. </p><p>In order to process something that could affect almost every Post record on Tumblr, we’d need to walk through <i>billions</i> of Post records. At our current resource capacity, this kind of operation can literally take weeks or months of real time, depending on what we need to change. When we start considering a process that would not only have to step through each individual Post record, but also reach out to <i>other</i> Post records for each record (sometimes <i>thousands</i> of other Post records if we’re talking about reblog trails), that’s when months can become a year or more of processing time. That’s how big Tumblr is.</p><p>Would it be worth doing that to fix an edge case? Maybe. That’s the tough part, and it’s something we struggle with internally. This is usually also when we start trying to come up with other, more clever ways of tackling the problem. In this case, maybe we could kick off an asynchronous task any time we encounter one of these broken trail items, so the next time it’s viewed, it might be fixed. But that won’t be perfect either, as you pointed out, because we’d need to begin tracking which records were really lost versus just changed.</p>",
        "reblog": {
          "comment": "<p>This is a great follow up question! First of all: this is definitely in the realm of possibility and it’s something we’ve thought of before. At Tumblr, we’ve done some absolutely wild things at scale. When it comes to Posts on Tumblr, that’s where our scale gets really mind-blowing. </p><p>In order to process something that could affect almost every Post record on Tumblr, we’d need to walk through <i>billions</i> of Post records. At our current resource capacity, this kind of operation can literally take weeks or months of real time, depending on what we need to change. When we start considering a process that would not only have to step through each individual Post record, but also reach out to <i>other</i> Post records for each record (sometimes <i>thousands</i> of other Post records if we’re talking about reblog trails), that’s when months can become a year or more of processing time. That’s how big Tumblr is.</p><p>Would it be worth doing that to fix an edge case? Maybe. That’s the tough part, and it’s something we struggle with internally. This is usually also when we start trying to come up with other, more clever ways of tackling the problem. In this case, maybe we could kick off an asynchronous task any time we encounter one of these broken trail items, so the next time it’s viewed, it might be fixed. But that won’t be perfect either, as you pointed out, because we’d need to begin tracking which records were really lost versus just changed.</p>",
          "tree_html": ""
        },
        "trail": [
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "189653038579" },
            "content_raw": "<p>This is a great follow up question! First of all: this is definitely in the realm of possibility and it’s something we’ve thought of before. At Tumblr, we’ve done some absolutely wild things at scale. When it comes to Posts on Tumblr, that’s where our scale gets really mind-blowing. </p><p>In order to process something that could affect almost every Post record on Tumblr, we’d need to walk through <i>billions</i> of Post records. At our current resource capacity, this kind of operation can literally take weeks or months of real time, depending on what we need to change. When we start considering a process that would not only have to step through each individual Post record, but also reach out to <i>other</i> Post records for each record (sometimes <i>thousands</i> of other Post records if we’re talking about reblog trails), that’s when months can become a year or more of processing time. That’s how big Tumblr is.</p><p>Would it be worth doing that to fix an edge case? Maybe. That’s the tough part, and it’s something we struggle with internally. This is usually also when we start trying to come up with other, more clever ways of tackling the problem. In this case, maybe we could kick off an asynchronous task any time we encounter one of these broken trail items, so the next time it’s viewed, it might be fixed. But that won’t be perfect either, as you pointed out, because we’d need to begin tracking which records were really lost versus just changed.</p>",
            "content": "<p>This is a great follow up question! First of all: this is definitely in the realm of possibility and it&rsquo;s something we&rsquo;ve thought of before. At Tumblr, we&rsquo;ve done some absolutely wild things at scale. When it comes to Posts on Tumblr, that&rsquo;s where our scale gets really mind-blowing.&nbsp;</p><p>In order to process something that could affect almost every Post record on Tumblr, we&rsquo;d need to walk through <i>billions</i> of Post records. At our current resource capacity, this kind of operation can literally take weeks or months of real time, depending on what we need to change. When we start considering a process that would not only have to step through each individual Post record, but also reach out to <i>other</i> Post records for each record (sometimes <i>thousands</i> of other Post records if we&rsquo;re talking about reblog trails), that&rsquo;s when months can become a year or more of processing time. That&rsquo;s how big Tumblr is.</p><p>Would it be worth doing that to fix an edge case? Maybe. That&rsquo;s the tough part, and it&rsquo;s something we struggle with internally. This is usually also when we start trying to come up with other, more clever ways of tackling the problem. In this case, maybe we could kick off an asynchronous task any time we encounter one of these broken trail items, so the next time it&rsquo;s viewed, it might be fixed. But that won&rsquo;t be perfect either, as you pointed out, because we&rsquo;d need to begin tracking which records were really lost versus just changed.</p>",
            "is_current_item": true,
            "is_root_item": true
          }
        ],
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1577907830,
            "blog_name": "ramsesklap",
            "blog_uuid": "t:7RkO4TU14ay9m38ACcGJXw",
            "blog_url": "https://ramsesklap.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576948608,
            "blog_name": "l4638",
            "blog_uuid": "t:lQd3W5UGQvROXmasaFWCSg",
            "blog_url": "https://l4638.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576825322,
            "blog_name": "lissig",
            "blog_uuid": "t:5tXMyOOCdMbaRfTlc2__6A",
            "blog_url": "https://lissig.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576364548,
            "blog_name": "pyte66",
            "blog_uuid": "t:rtDQa1KM8dBmgCWnJwqffQ",
            "blog_url": "https://pyte66.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1576358213,
            "blog_name": "tonyglowheart",
            "blog_uuid": "t:PkW3ya5yUzrsUm1IAmHaVg",
            "blog_url": "https://tonyglowheart.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189671360856",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1576351758,
            "blog_name": "awnerd",
            "blog_uuid": "t:ngZnSjoFC4gQtDubARuK5g",
            "blog_url": "https://awnerd.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576346213,
            "blog_name": "cesarabeid",
            "blog_uuid": "t:ZGQYE8v_usbvW2X6CTXjhg",
            "blog_url": "https://cesarabeid.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576345307,
            "blog_name": "tonyglowheart",
            "blog_uuid": "t:PkW3ya5yUzrsUm1IAmHaVg",
            "blog_url": "https://tonyglowheart.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1576341466,
            "blog_name": "unwrapping",
            "blog_uuid": "t:QnKPSIYuP9J1n27vRCDr6Q",
            "blog_url": "https://unwrapping.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189666995762",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1576327349,
            "blog_name": "blue--dragon",
            "blog_uuid": "t:dOjDkKbW40Nn1P5UVanstg",
            "blog_url": "https://blue--dragon.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576313543,
            "blog_name": "com6",
            "blog_uuid": "t:sv0qbOz8PF4uvuO9qOg13g",
            "blog_url": "https://com6.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576291044,
            "blog_name": "celestriakle",
            "blog_uuid": "t:lXzZcmEElvuWzTQ78QVShA",
            "blog_url": "https://celestriakle.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1576282272,
            "blog_name": "foldingcookie2",
            "blog_uuid": "t:9-ujiOmB_nMJSu2b5-zmOQ",
            "blog_url": "https://foldingcookie2.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189654871710",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1576282245,
            "blog_name": "foldingcookie2",
            "blog_uuid": "t:9-ujiOmB_nMJSu2b5-zmOQ",
            "blog_url": "https://foldingcookie2.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576279329,
            "blog_name": "seagirl49",
            "blog_uuid": "t:knlvXjGgkBSRBWWv1baDvw",
            "blog_url": "https://seagirl49.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576278726,
            "blog_name": "manyblinkinglights",
            "blog_uuid": "t:FpeisIIg2Ke1TRxtWOs51Q",
            "blog_url": "https://manyblinkinglights.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1576278533,
            "blog_name": "prospitianescapee",
            "blog_uuid": "t:46VPF05khEjt6ddvt4WNHw",
            "blog_url": "https://prospitianescapee.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189653895240",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1576278461,
            "blog_name": "snarp",
            "blog_uuid": "t:BTDPFffgWTT1fFWZRkBTJA",
            "blog_url": "https://snarp.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reply",
            "timestamp": 1576278001,
            "blog_name": "kevbrinx",
            "blog_uuid": "t:hWKlJa4C5GN9JDcVfiN0Fw",
            "blog_url": "https://markmycomics.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "Oh, that makes sense",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "reblog",
            "timestamp": 1576276931,
            "blog_name": "hyratel",
            "blog_uuid": "t:AomfzrTd-M-r8XFeYdCUsA",
            "blog_url": "https://hyratel.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189653471497",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1576276785,
            "blog_name": "kreuz-unlimited",
            "blog_uuid": "t:JAeT6JhEENILOn9TIN9ang",
            "blog_url": "https://kreuz-unlimited.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reply",
            "timestamp": 1576276476,
            "blog_name": "cyle",
            "blog_uuid": "t:3WVZ6W9Z8weSVXKdNHPz7Q",
            "blog_url": "https://cyle.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "reply_text": "@kevbrinx​ with the Neue Post Format change, we changed how all NEW posts are being created via the mobile apps, and we changed how posts are represented to our clients, but the underlying data about old Post records has not changed. Good question!",
            "formatting": [
              {
                "type": "mention",
                "start": 0,
                "end": 8,
                "blog": {
                  "name": "kevbrinx",
                  "url": "https://kevbrinx.tumblr.com/",
                  "uuid": "t:hWKlJa4C5GN9JDcVfiN0Fw"
                }
              }
            ],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1576276447,
            "blog_name": "alexander",
            "blog_uuid": "t:7iW8pPjD8LOzMQqceSK-bQ",
            "blog_url": "https://alexander.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576276345,
            "blog_name": "artistwhocodes",
            "blog_uuid": "t:jLI1KwQ-rEmnFEjlWtdZkQ",
            "blog_url": "https://artistwhocodes.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576276050,
            "blog_name": "simply-sithel",
            "blog_uuid": "t:gmV_vexwRAZQGlIU1dEg9w",
            "blog_url": "https://simply-sithel.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reply",
            "timestamp": 1576275685,
            "blog_name": "kevbrinx",
            "blog_uuid": "t:hWKlJa4C5GN9JDcVfiN0Fw",
            "blog_url": "https://markmycomics.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "I know nothing about this kind of things but how come Tumblr needs to process every single post on Tumblr when changing something like that?\nThe way posts are made changed in the past but I don't think it took this long, right? I might be wrong, idk",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1576275581,
            "blog_name": "kevbrinx",
            "blog_uuid": "t:hWKlJa4C5GN9JDcVfiN0Fw",
            "blog_url": "https://markmycomics.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "posted",
            "timestamp": 1576275335,
            "blog_name": "engineering",
            "blog_uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
            "blog_url": "https://engineering.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "answer",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 189652315374,
        "post_url": "https://engineering.tumblr.com/post/189652315374/so-in-your-reblog-explainer-you-talk-about-how",
        "slug": "so-in-your-reblog-explainer-you-talk-about-how",
        "date": "2019-12-13 21:30:31 GMT",
        "timestamp": 1576272631,
        "state": "published",
        "format": "html",
        "reblog_key": "42XivKLw",
        "tags": [],
        "short_url": "https://tmblr.co/ZI3nWx2meAApk",
        "summary": "so, in your reblog explainer you talk about how broken trail items are used for posts where the username no longer resolves. but...",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 37,
        "asking_name": "nightpool",
        "asking_url": "https://nightpool.tumblr.com/",
        "question": "so, in your reblog explainer you talk about how broken trail items are used for posts where the username no longer resolves. but one thing that's confusing to me is that in broken trail items you only provide the old blog name, rather then the unresolvable post. wouldn't it be useful for clients to have a globally unique reference to the old post that was originally part of the reblog chain?",
        "answer": "<p>Yeah, great question. This is a flaw (partially, because it’s also an optimization) in how reblog trail storage was originally designed. It’s what we’d call an “edge case” because it’s rare. In the “How Reblogs Work” post, the example reblog trail HTML is pretty much all of the information we have at runtime when displaying an old, non-NPF post’s reblog trail. The reblog post URL in the anchor tag above that reblog’s content is all of the information we have to uniquely reference that reblog. In an ideal world where blog names never change, this is perfect, as it contains both the name of the blog and the ID of the post on that blog. We need both of those things to efficiently look up a Post on Tumblr.</p><p>However, as you point out, it doesn’t afford us any secondary, more reliable means of looking up what blog created that part of the trail should its name change. Therefore, there is no “globally unique reference to the old post” that we can create, as the information simply isn’t available at runtime. Thankfully, we’ve added that secondary, reliable information for new NPF posts.</p>",
        "reblog": {
          "comment": "<p>Yeah, great question. This is a flaw (partially, because it’s also an optimization) in how reblog trail storage was originally designed. It’s what we’d call an “edge case” because it’s rare. In the “How Reblogs Work” post, the example reblog trail HTML is pretty much all of the information we have at runtime when displaying an old, non-NPF post’s reblog trail. The reblog post URL in the anchor tag above that reblog’s content is all of the information we have to uniquely reference that reblog. In an ideal world where blog names never change, this is perfect, as it contains both the name of the blog and the ID of the post on that blog. We need both of those things to efficiently look up a Post on Tumblr.</p><p>However, as you point out, it doesn’t afford us any secondary, more reliable means of looking up what blog created that part of the trail should its name change. Therefore, there is no “globally unique reference to the old post” that we can create, as the information simply isn’t available at runtime. Thankfully, we’ve added that secondary, reliable information for new NPF posts.</p>",
          "tree_html": ""
        },
        "trail": [
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "189652315374" },
            "content_raw": "<p>Yeah, great question. This is a flaw (partially, because it’s also an optimization) in how reblog trail storage was originally designed. It’s what we’d call an “edge case” because it’s rare. In the “How Reblogs Work” post, the example reblog trail HTML is pretty much all of the information we have at runtime when displaying an old, non-NPF post’s reblog trail. The reblog post URL in the anchor tag above that reblog’s content is all of the information we have to uniquely reference that reblog. In an ideal world where blog names never change, this is perfect, as it contains both the name of the blog and the ID of the post on that blog. We need both of those things to efficiently look up a Post on Tumblr.</p><p>However, as you point out, it doesn’t afford us any secondary, more reliable means of looking up what blog created that part of the trail should its name change. Therefore, there is no “globally unique reference to the old post” that we can create, as the information simply isn’t available at runtime. Thankfully, we’ve added that secondary, reliable information for new NPF posts.</p>",
            "content": "<p>Yeah, great question. This is a flaw (partially, because it&rsquo;s also an optimization) in how reblog trail storage was originally designed. It&rsquo;s what we&rsquo;d call an&nbsp;&ldquo;edge case&rdquo; because it&rsquo;s rare. In the&nbsp;&ldquo;How Reblogs Work&rdquo; post, the example reblog trail HTML is pretty much all of the information we have at runtime when displaying an old, non-NPF post&rsquo;s reblog trail. The reblog post URL in the anchor tag above that reblog&rsquo;s content is all of the information we have to uniquely reference that reblog. In an ideal world where blog names never change, this is perfect, as it contains both the name of the blog and the ID of the post on that blog. We need both of those things to efficiently look up a Post on Tumblr.</p><p>However, as you point out, it doesn&rsquo;t afford us any secondary, more reliable means of looking up what blog created that part of the trail should its name change. Therefore, there is no&nbsp;&ldquo;globally unique reference to the old post&rdquo; that we can create, as the information simply isn&rsquo;t available at runtime. Thankfully, we&rsquo;ve added that secondary, reliable information for new NPF posts.</p>",
            "is_current_item": true,
            "is_root_item": true
          }
        ],
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1577077022,
            "blog_name": "cyle",
            "blog_uuid": "t:3WVZ6W9Z8weSVXKdNHPz7Q",
            "blog_url": "https://cyle.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576400911,
            "blog_name": "snarp",
            "blog_uuid": "t:BTDPFffgWTT1fFWZRkBTJA",
            "blog_url": "https://snarp.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576346440,
            "blog_name": "devastationwagon",
            "blog_uuid": "t:gIvQgc-LzdCx9v1ksYeCwg",
            "blog_url": "https://devastationwagon.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576320937,
            "blog_name": "pyte66",
            "blog_uuid": "t:rtDQa1KM8dBmgCWnJwqffQ",
            "blog_url": "https://pyte66.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576313197,
            "blog_name": "luanmrabelo-blog",
            "blog_uuid": "t:KTzDvYYvPlb6kg-YxrYIMg",
            "blog_url": "https://luanmrabelo-blog.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576296154,
            "blog_name": "unopenablebox",
            "blog_uuid": "t:hAzFUgL_fCbLCCAjROqQxg",
            "blog_url": "https://unopenablebox.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1576292457,
            "blog_name": "soupwater",
            "blog_uuid": "t:EemhmKX4NQh38cga3pTxaA",
            "blog_url": "https://soupwater.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189657397738",
            "reblog_parent_blog_name": "justnewyorkshit"
          },
          {
            "type": "like",
            "timestamp": 1576289518,
            "blog_name": "afromiscreant",
            "blog_uuid": "t:5wiFUOEkZBE4SdKqkzZgUw",
            "blog_url": "https://afromiscreant.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576285600,
            "blog_name": "celestriakle",
            "blog_uuid": "t:lXzZcmEElvuWzTQ78QVShA",
            "blog_url": "https://celestriakle.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576285377,
            "blog_name": "tangentburd",
            "blog_uuid": "t:q1GRweR9Ll099Q_fJYC2Og",
            "blog_url": "https://tangentburd.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576285070,
            "blog_name": "violettherainwing",
            "blog_uuid": "t:DmDuCvfzMaaqJCTAzqaKfA",
            "blog_url": "https://violettherainwing.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1576283376,
            "blog_name": "nightpool",
            "blog_uuid": "t:CVEqXVtH4qit2A7hVNy5DA",
            "blog_url": "https://nightpool.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "added_text": "so my question here wasn't really \"why isn't this information on the reblog chain\", it was \"why not provide the (less useful, sure) broken post ID to API clients, along with the broken blog name?\". For example, an API client could look up the old post in archive.org, or cross-reference it with a list of posts it has seen before, or a list of posts it has stored for some operation somewhere (for example, to make something like Post Blocker work). The post URL is still useful even if it can't be...",
            "post_id": "189655153150",
            "reblog_parent_blog_name": "prospitianescapee",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1576283286,
            "blog_name": "the-chanels",
            "blog_uuid": "t:DzPmp_PmrV8vPMBJB0lDWQ",
            "blog_url": "https://thechanels.co.vu/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1576282995,
            "blog_name": "thegreatdot",
            "blog_uuid": "t:1J923sTsqXZyR0lIMgCu8w",
            "blog_url": "https://thegreatdot.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189655060076",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1576282984,
            "blog_name": "thegreatdot",
            "blog_uuid": "t:1J923sTsqXZyR0lIMgCu8w",
            "blog_url": "https://thegreatdot.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576282335,
            "blog_name": "foldingcookie2",
            "blog_uuid": "t:9-ujiOmB_nMJSu2b5-zmOQ",
            "blog_url": "https://foldingcookie2.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576282142,
            "blog_name": "andrewcore",
            "blog_uuid": "t:LXtngItCDLq3dr9kvcrAqA",
            "blog_url": "https://andrewcore.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1576281593,
            "blog_name": "unwrapping",
            "blog_uuid": "t:QnKPSIYuP9J1n27vRCDr6Q",
            "blog_url": "https://unwrapping.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189654697102",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1576279045,
            "blog_name": "xxtanyagrayxx",
            "blog_uuid": "t:prJfCwThNfuUEjDO8xFaMg",
            "blog_url": "https://xxtanyagrayxx.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576278692,
            "blog_name": "manyblinkinglights",
            "blog_uuid": "t:FpeisIIg2Ke1TRxtWOs51Q",
            "blog_url": "https://manyblinkinglights.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1576278649,
            "blog_name": "prospitianescapee",
            "blog_uuid": "t:46VPF05khEjt6ddvt4WNHw",
            "blog_url": "https://prospitianescapee.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189653926170",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1576277601,
            "blog_name": "nirdoshkumar544",
            "blog_uuid": "t:yiWyVXMqLxHwuxDMUyGUvg",
            "blog_url": "https://nirdoshkumar544.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1576277064,
            "blog_name": "hyratel",
            "blog_uuid": "t:AomfzrTd-M-r8XFeYdCUsA",
            "blog_url": "https://hyratel.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189653505637",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "reply",
            "timestamp": 1576276519,
            "blog_name": "cyle",
            "blog_uuid": "t:3WVZ6W9Z8weSVXKdNHPz7Q",
            "blog_url": "https://cyle.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "reply_text": "@nightpool​ nope -- it's answered now in another post!",
            "formatting": [
              {
                "type": "mention",
                "start": 0,
                "end": 9,
                "blog": {
                  "name": "nightpool",
                  "url": "https://nightpool.tumblr.com/",
                  "uuid": "t:CVEqXVtH4qit2A7hVNy5DA"
                }
              }
            ],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1576276501,
            "blog_name": "simply-sithel",
            "blog_uuid": "t:gmV_vexwRAZQGlIU1dEg9w",
            "blog_url": "https://simply-sithel.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576276426,
            "blog_name": "artistwhocodes",
            "blog_uuid": "t:jLI1KwQ-rEmnFEjlWtdZkQ",
            "blog_url": "https://artistwhocodes.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576274888,
            "blog_name": "atomscrow",
            "blog_uuid": "t:0-EEPcLq7wfgExipO3HvDQ",
            "blog_url": "https://atomscrow.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reply",
            "timestamp": 1576273849,
            "blog_name": "nightpool",
            "blog_uuid": "t:CVEqXVtH4qit2A7hVNy5DA",
            "blog_url": "https://nightpool.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "did the second half of my ask get lost?",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1576273785,
            "blog_name": "m-b-a-1368",
            "blog_uuid": "t:oZEvCVaOjNLLulB49sisyg",
            "blog_url": "https://m-b-a-1368.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1576273572,
            "blog_name": "itsmejop",
            "blog_uuid": "t:C3Ajf_OwmbTC2FoaxHlSHw",
            "blog_url": "https://itsmejop.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "189652560879",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1576273570,
            "blog_name": "itsmejop",
            "blog_uuid": "t:C3Ajf_OwmbTC2FoaxHlSHw",
            "blog_url": "https://itsmejop.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576273206,
            "blog_name": "kreuz-unlimited",
            "blog_uuid": "t:JAeT6JhEENILOn9TIN9ang",
            "blog_url": "https://kreuz-unlimited.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576272826,
            "blog_name": "suspiciousserpents",
            "blog_uuid": "t:c-zqtH9RrSxmJxEGHtnRyA",
            "blog_url": "https://suspiciousserpents.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576272795,
            "blog_name": "kevbrinx",
            "blog_uuid": "t:hWKlJa4C5GN9JDcVfiN0Fw",
            "blog_url": "https://markmycomics.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576272675,
            "blog_name": "detourist",
            "blog_uuid": "t:aRN2z7Uu2StbJMTVJdhElA",
            "blog_url": "https://detourist.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "posted",
            "timestamp": 1576272631,
            "blog_name": "engineering",
            "blog_uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
            "blog_url": "https://engineering.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "answer",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 189457776594,
        "post_url": "https://engineering.tumblr.com/post/189457776594/about-the-how-reblogs-work-post-i-apologize",
        "slug": "about-the-how-reblogs-work-post-i-apologize",
        "date": "2019-12-03 20:57:49 GMT",
        "timestamp": 1575406669,
        "state": "published",
        "format": "html",
        "reblog_key": "FIbKRtk3",
        "tags": [],
        "short_url": "https://tmblr.co/ZI3nWx2mSa3-I",
        "summary": "About the \"how reblogs work\" post: (I apologize for my weird english)  What happens when a post is edited?  When I reblog a post...",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 25,
        "asking_name": "kevbrinx",
        "asking_url": "https://markmycomics.com/",
        "question": "About the \"how reblogs work\" post: (I apologize for my weird english)  What happens when a post is edited?  When I reblog a post and it gets edited by its original user it won't change on my blog.  Does that mean that Tumblr creates a copy of the entire post every time it is edited and stores it?",
        "answer": "<p>This is more or less correct. Tumblr grabs the original post’s content for your reblog, and then any changes to the original post will only affect the original post and any <i>new</i> reblogs of it after the edit is saved. The act of reblogging is kind of like if you froze the reblogged post’s content at that specific point in time, which applies to the original post’s content and any reblog trail content if you’re reblogging a reblog.</p><p>To play the scenario out more completely: you make an original post, and I reblog it. There are now two independent posts saved to Tumblr: one is your original post on your blog, and one is my reblog of it on my blog. My reblog has your original post content in it (not a reference, but a more-or-less full copy of it). If you edit your original post after I’ve reblogged it, my reblog won’t be changed because it’s an independent post from yours, but if someone else comes along now and reblogs your original post, their reblog will have the new changes since that’s the point in time it uses the original post content.</p><p>Hopefully that makes sense! It took me awhile to wrap my head around it. Sometimes I try to use <i>Back to the Future Part 2</i> references about divergent timelines to help it make more sense but that usually confuses what’s going on in other ways. Thanks for the question!</p>",
        "reblog": {
          "comment": "<p>This is more or less correct. Tumblr grabs the original post’s content for your reblog, and then any changes to the original post will only affect the original post and any <i>new</i> reblogs of it after the edit is saved. The act of reblogging is kind of like if you froze the reblogged post’s content at that specific point in time, which applies to the original post’s content and any reblog trail content if you’re reblogging a reblog.</p><p>To play the scenario out more completely: you make an original post, and I reblog it. There are now two independent posts saved to Tumblr: one is your original post on your blog, and one is my reblog of it on my blog. My reblog has your original post content in it (not a reference, but a more-or-less full copy of it). If you edit your original post after I’ve reblogged it, my reblog won’t be changed because it’s an independent post from yours, but if someone else comes along now and reblogs your original post, their reblog will have the new changes since that’s the point in time it uses the original post content.</p><p>Hopefully that makes sense! It took me awhile to wrap my head around it. Sometimes I try to use <i>Back to the Future Part 2</i> references about divergent timelines to help it make more sense but that usually confuses what’s going on in other ways. Thanks for the question!</p>",
          "tree_html": ""
        },
        "trail": [
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "189457776594" },
            "content_raw": "<p>This is more or less correct. Tumblr grabs the original post’s content for your reblog, and then any changes to the original post will only affect the original post and any <i>new</i> reblogs of it after the edit is saved. The act of reblogging is kind of like if you froze the reblogged post’s content at that specific point in time, which applies to the original post’s content and any reblog trail content if you’re reblogging a reblog.</p><p>To play the scenario out more completely: you make an original post, and I reblog it. There are now two independent posts saved to Tumblr: one is your original post on your blog, and one is my reblog of it on my blog. My reblog has your original post content in it (not a reference, but a more-or-less full copy of it). If you edit your original post after I’ve reblogged it, my reblog won’t be changed because it’s an independent post from yours, but if someone else comes along now and reblogs your original post, their reblog will have the new changes since that’s the point in time it uses the original post content.</p><p>Hopefully that makes sense! It took me awhile to wrap my head around it. Sometimes I try to use <i>Back to the Future Part 2</i> references about divergent timelines to help it make more sense but that usually confuses what’s going on in other ways. Thanks for the question!</p>",
            "content": "<p>This is more or less correct. Tumblr grabs the original post&rsquo;s content for your reblog, and then any changes to the original post will only affect the original post and any <i>new</i> reblogs of it after the edit is saved. The act of reblogging is kind of like if you froze the reblogged post&rsquo;s content at that specific point in time, which applies to the original post&rsquo;s content and any reblog trail content if you&rsquo;re reblogging a reblog.</p><p>To play the scenario out more completely: you make an original post, and I reblog it. There are now two independent posts saved to Tumblr: one is your original post on your blog, and one is my reblog of it on my blog. My reblog has your original post content in it (not a reference, but a more-or-less full copy of it). If you edit your original post after I&rsquo;ve reblogged it, my reblog won&rsquo;t be changed because it&rsquo;s an independent post from yours, but if someone else comes along now and reblogs your original post, their reblog will have the new changes since that&rsquo;s the point in time it uses the original post content.</p><p>Hopefully that makes sense! It took me awhile to wrap my head around it. Sometimes I try to use <i>Back to the Future Part 2</i> references about divergent timelines to help it make more sense but that usually confuses what&rsquo;s going on in other ways. Thanks for the question!</p>",
            "is_current_item": true,
            "is_root_item": true
          }
        ],
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1576099820,
            "blog_name": "nerdalert-andi",
            "blog_uuid": "t:q2YhLPDnJKVWiISEqreFmQ",
            "blog_url": "https://nerdalert-andi.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575946092,
            "blog_name": "built4her77",
            "blog_uuid": "t:2fISm81XU3kGqMQWu7Ga6A",
            "blog_url": "https://built4her77.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575852697,
            "blog_name": "onboarding03",
            "blog_uuid": "t:OVyCOgOlyxG0_g-Tz-g8Mw",
            "blog_url": "https://onboarding03.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575612116,
            "blog_name": "thevortexofourminds",
            "blog_uuid": "t:N467cOpdBLk12MosNe50AA",
            "blog_url": "https://thevortexofourminds.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1575611147,
            "blog_name": "firerulezz116",
            "blog_uuid": "t:lPgS4w7ZsC2T0mCaDn3tpg",
            "blog_url": "https://firerulezz116.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189505053395",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1575611141,
            "blog_name": "firerulezz116",
            "blog_uuid": "t:lPgS4w7ZsC2T0mCaDn3tpg",
            "blog_url": "https://firerulezz116.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1575609054,
            "blog_name": "pyte66",
            "blog_uuid": "t:rtDQa1KM8dBmgCWnJwqffQ",
            "blog_url": "https://pyte66.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575605469,
            "blog_name": "afromiscreant",
            "blog_uuid": "t:5wiFUOEkZBE4SdKqkzZgUw",
            "blog_url": "https://afromiscreant.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575604336,
            "blog_name": "the-realm-of-nora",
            "blog_uuid": "t:CHOXSPHG_y2f8iBx1IorIg",
            "blog_url": "https://the-realm-of-nora.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575602292,
            "blog_name": "kirarahu",
            "blog_uuid": "t:nBeeBF_K4QFEzrFCf0gQ-A",
            "blog_url": "https://kirarahu.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1575601298,
            "blog_name": "just-book-talk",
            "blog_uuid": "t:gCluxZjPSBTGimC0fXpvDA",
            "blog_url": "https://just-book-talk.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1575599406,
            "blog_name": "misoka58",
            "blog_uuid": "t:fBbippS2x0W2RN33_IRTpA",
            "blog_url": "https://misoka58.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1575598281,
            "blog_name": "nautiscarader",
            "blog_uuid": "t:QSs3R9TxG3WHegsU3M-0LQ",
            "blog_url": "https://nautiscarader.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "189501859655",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1575598101,
            "blog_name": "queerdo-mcjewface",
            "blog_uuid": "t:NqmTJ6i1BLq5hKUYanzUJQ",
            "blog_url": "https://queerdo-mcjewface.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1575597798,
            "blog_name": "unwrapping",
            "blog_uuid": "t:QnKPSIYuP9J1n27vRCDr6Q",
            "blog_url": "https://unwrapping.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189501736367",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1575450694,
            "blog_name": "jorgelgodoy",
            "blog_uuid": "t:UxS-lqeHfuyRG86qLXOpLg",
            "blog_url": "https://jorgelgodoy.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1575416660,
            "blog_name": "inthedarktrees",
            "blog_uuid": "t:F6BHE-otGepwFWDpahR97A",
            "blog_url": "https://inthedarktrees.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1575410843,
            "blog_name": "neilmakesgames",
            "blog_uuid": "t:7E02rHkhqdLriopnvy383w",
            "blog_url": "https://neilmakesgames.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1575409510,
            "blog_name": "othello3255",
            "blog_uuid": "t:JKSOcmGmjquF5ojIIXMjXQ",
            "blog_url": "https://othello3255.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1575408391,
            "blog_name": "fancy--trash",
            "blog_uuid": "t:Qkj8Ht2msKyG5Ws150o22w",
            "blog_url": "https://fancy--trash.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575408184,
            "blog_name": "laughterkey",
            "blog_uuid": "t:wHra-zbSTzOTGHndmM3yfw",
            "blog_url": "https://laughterkey.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reply",
            "timestamp": 1575407988,
            "blog_name": "kevbrinx",
            "blog_uuid": "t:hWKlJa4C5GN9JDcVfiN0Fw",
            "blog_url": "https://markmycomics.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "Thank YOU for your explanation :)",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1575407947,
            "blog_name": "kevbrinx",
            "blog_uuid": "t:hWKlJa4C5GN9JDcVfiN0Fw",
            "blog_url": "https://markmycomics.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1575407258,
            "blog_name": "alexander",
            "blog_uuid": "t:7iW8pPjD8LOzMQqceSK-bQ",
            "blog_url": "https://alexander.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "posted",
            "timestamp": 1575406669,
            "blog_name": "engineering",
            "blog_uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
            "blog_url": "https://engineering.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 189455858864,
        "post_url": "https://engineering.tumblr.com/post/189455858864/how-reblogs-work",
        "slug": "how-reblogs-work",
        "date": "2019-12-03 18:53:54 GMT",
        "timestamp": 1575399234,
        "state": "published",
        "format": "html",
        "reblog_key": "xdnUFb0J",
        "tags": [ "engineering", "how tumblr works", "reblogs", "npf" ],
        "short_url": "https://tmblr.co/ZI3nWx2mSSlom",
        "summary": "How Reblogs Work",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 197,
        "title": "How Reblogs Work",
        "body": "<p>The reblog is a beautiful thing unique to Tumblr &ndash; <a href=\"https://help.twitter.com/en/using-twitter/how-to-retweet\">often</a> <a href=\"https://www.instagram.com/p/BcFVH3Mhkcd/\">imitated</a>, but never successfully reproduced elsewhere. The reblog puts someone else&rsquo;s post on your own Tumblr blog, acting as a kind of signal boost, and also giving you the ability to add your own comment to it, which your followers and anyone looking at the post&rsquo;s notes will see. Reblogs can also be reblogged themselves, creating <a href=\"https://best-of-reblogs.tumblr.com/\">awesome evolving reblog trails</a> that are the source of so many memes we love. But what is a reblog <i>trail</i> versus a reblog <i>tree</i>, and how does it all work under the hood?</p><p>A &ldquo;reblog tree&rdquo; starts at the original post (we call it the &ldquo;root post&rdquo; internally at Tumblr) and extends outwards to each of its reblogs, and then each reblog of those reblogs, forming a tree-like structure with branches of &ldquo;reblog trails&rdquo;. As an example, you can imagine <a href=\"https://tmblr.co/mr_BTLFg8QzTPUMVSbe3vbg\">@staff</a>​ making a post, and then someone reblogging it, and then others reblogging those reblogs. I can even come through and reblog one of the reblogs:</p><figure class=\"tmblr-full\" data-orig-height=\"469\" data-orig-width=\"600\"><img src=\"https://66.media.tumblr.com/846d4be2242c786914d21a9d5eb4f598/d0852d3a38029fc7-58/s540x810/42bb3f73bb5fee11e2b51a335d77036568d804f5.png\" data-orig-height=\"469\" data-orig-width=\"600\"/></figure><p>A &ldquo;reblog trail&rdquo; is one of those branches, starting at the original post and extending one at a time down to another post. In the reblog trail, there may actually be some reblogs that added their own content and some that didn&rsquo;t &ndash; reblogs that added content are visible in the trail, while the intermediate ones that didn&rsquo;t may not be visible.<br/></p><figure class=\"tmblr-full\" data-orig-height=\"479\" data-orig-width=\"600\"><img src=\"https://66.media.tumblr.com/2a9a2bd2609cdecef17399767b780590/d0852d3a38029fc7-6e/s540x810/fa14195e0f6df91d74b84028876479299c41023c.png\" data-orig-height=\"479\" data-orig-width=\"600\"/></figure><p>You&rsquo;ll notice that the reblog trail you&rsquo;re viewing somewhere (like on your dashboard) doesn&rsquo;t show all of this reblog tree &ndash; only part of it. If you open up the notes on any wildly popular post, you&rsquo;ll probably see lots of reblogs in there that you aren&rsquo;t seeing in your current view of the post&rsquo;s reblog trail. The above diagram shows the whole reblog tree (which you don&rsquo;t see) and the current reblog trail you&rsquo;re actually viewing (in orange). If you want to visualize a post&rsquo;s entire reblog tree, the reblog graphs <a href=\"https://www.tumblr.com/settings/labs\">Tumblr Labs</a> experiment shows off these reblog trees and trails as kind of big floppy organisms. They&rsquo;re a useful visualization of how content percolates around Tumblr via reblogs. You can turn on the experiment and <a href=\"https://www.tumblr.com/settings/labs\">see it on web only right now</a>, but here&rsquo;s an example:<br/></p><figure data-orig-width=\"786\" data-orig-height=\"780\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/c0d97c3dd79f61144fabd6a0dc6b4313/d0852d3a38029fc7-d1/s540x810/0281e87072896c56cc385c84073d5079a95157ec.png\" alt=\"image\" data-orig-width=\"786\" data-orig-height=\"780\"/></figure><p>The tiny orange dot is the post we&rsquo;re viewing, and the green line is a reblog trail showing how the post got reblogged along many blogs. And there are tons of other branches/trails from the original post, making dozens of different reblog trails. This is a much larger, more realistic example than my simplified diagrams above. You can imagine that my diagram above is just the start of one of these huge reblog trees, after more and more people have reblogged parts of the existing tree.<br/></p><h2>Storing Reblog Trail Information</h2><p>The way we actually store the information about a reblog and its trail has changed significantly over the last year. For all posts made before this year, all of a post&rsquo;s content was stored as a combination of HTML and properties specific on our Post data model. A specific reblog also stored all of the contents of <i>its entire reblog trail</i> (but not the whole reblog tree). If you have ever built a theme on Tumblr or otherwise dug around the code on a reblog, you&rsquo;ll be familiar with this classic blockquote structure:</p><pre><code>&lt;p&gt;&lt;a class=\"tumblr_blog\" href=\"http://maria.tumblr.com/post/5678\"&gt;maria&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n    &lt;p&gt;&lt;a class=\"tumblr_blog\" href=\"http://cyle.tumblr.com/post/1234\"&gt;cyle&lt;/a&gt;:&lt;/p&gt;\n    &lt;blockquote&gt;\n        &lt;!-- original post content --&gt;\n        &lt;p&gt;look at my awesome original content&lt;/p&gt;\n    &lt;/blockquote&gt;\n    &lt;!-- the reblog of the original post's content --&gt;\n    &lt;p&gt;well, it's just okay original content&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;!-- this is the new content, added in our reblog of the reblog --&gt;\n&lt;p&gt;jeez. thanks a lot.&lt;/p&gt;\n</code></pre><p>This HTML represents a (fake) old text post. The original post is the blockquote most deeply nested in the HTML: &ldquo;look at my awesome original content&rdquo; and it was created by <code>cyle</code>. There&rsquo;s a reference to the original post&rsquo;s URL in the anchor tag above its blockquote tag. Moving out one level to the next blockquote is a reblog of that original post, made by <code>maria</code>, which itself adds some of its own commentary to the reblog trail. Moving out furthest, to the bottom of the HTML, is the latest reblog content being added in the post we&rsquo;re viewing. With this structure, we have everything we need to show the post and its reblog trail without having to load those posts in between the original and this reblog.</p><p>If this looks and sounds confusing, that&rsquo;s because it is quite complex. We&rsquo;re right there with you, but the reasons behind using this structure were sound at the time. In a normal, traditional relational database, you&rsquo;d expect something like the reblog trail to be represented as a series of references: a reblog post references its parent post, root post, and any intermediate posts, and we&rsquo;d load those posts&rsquo; contents at runtime with a <code>JOIN</code> query or something very normalized and relational like that, making sure we don&rsquo;t <i>copy</i> any data around, only <i>reference</i> it.</p><p>However, the major drawback of that traditional approach, especially at Tumblr&rsquo;s scale, is that loading a reblog could go from just one query to several queries, depending on how many posts are in the reblog trail. Some of the reblog trails on Tumblr are <i>thousands of posts long</i>. Having to load a thousand other posts to load one reblog would be devastating. Instead, by actually copying the reblog trail content every time a reblog is made, we keep the number of queries needed constant: just one per post! A dashboard of 20 reblogs loads those 20 posts, not a variable amount based on how many reblogs are in each post&rsquo;s trail. This is still an oversimplification of what Tumblr is really doing under the hood, but this core strategy is real.</p><h2>Broken Reblog Trails</h2><p>There is another obvious problem with the above blockquote/HTML strategy, one that you may have not realized you were seeing but you&rsquo;ve probably experienced it before. If the only reference we have in the reblog trail above is a trail post&rsquo;s permalink URL, what happens if that blog changes its name? Tumblr does not go through all posts and update that name in every copy of every reblog that blog has ever been involved in. Instead, it gracefully fails, and you may see a default avatar there as a placeholder. We literally don&rsquo;t have any other choice, since no other useful information is stored with the old post content.</p><p>At worst, someone else takes the name of a blog used in the trail. Imagine if, in the above example, <code>oli</code> changed his blog name to <code>british-oli</code> and someone else snagged the name <code>oli</code> afterwards. Thankfully in that case, the post URL still does not work, as the post ID is tied to the old <code>oli</code> blog. The end result is that it looks like there&rsquo;s a &ldquo;broken&rdquo; item in the reblog trail, usually manifesting as the blog looking deactivated or otherwise not accessible. This isn&rsquo;t great.</p><p>As a part of <a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\">the rollout of the Neue Post Format</a> (NPF), we changed how we store the reblog trail on each post. For fully NPF reblog trails, we actually do store an immutable reference to each blog and post in the trail, instead of just the unreliable post URL. This allows us to have a much lower failure rate when someone changes their blog name or otherwise becomes unavailable. We keep the same beneficial strategy of usually having all the information we need so we don&rsquo;t need to load any of those posts along the trail, but the option to load the individual post or blog is there if we absolutely need it, especially in cases like if one of those blogs is somebody you&rsquo;re blocking.</p><p>If you&rsquo;ve <a href=\"https://github.com/tumblr/docs/blob/master/npf-spec.md#reblog-trail\">played around with reblog trails in NPF</a>, you&rsquo;ll see the result of this change. The reblog trail is no longer a messy nested blockquote chain, but instead a friendly and easy to parse JSON array, always starting with the original post and working down the trail. This includes a special case when an item in the trail is broken in a way we can&rsquo;t recover from, which happens sometimes with very old posts.</p><p>The same reblog trail and new content as seen above, but in the Neue Post Format:</p><pre><code>{\n    \"trail\": [\n        {\n            \"post\": {\n                \"id\": \"1234\",\n            },\n            \"blog\": {\n                \"name\": \"cyle\"\n            },\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"look at my awesome original content\"\n                }\n            ],\n            \"layout\": []\n        },\n        {\n            \"post\": {\n                \"id\": \"3456\",\n            },\n            \"blog\": {\n                \"name\": \"maria\"\n            },\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"well, it's just okay original content\"\n                }\n            ],\n            \"layout\": []\n        }\n    ],\n    \"content\": [\n        {\n            \"type\": \"text\",\n            \"text\": \"jeez. thanks a lot.\"\n        }\n    ]\n}\n</code></pre><h2>Got questions?</h2><p>If you&rsquo;ve ever wondered how something works on Tumblr behind the scenes, feel free to <a href=\"https://engineering.tumblr.com/ask\">send us an ask</a>!</p><p>- @cyle </p>",
        "reblog": {
          "comment": "<p>The reblog is a beautiful thing unique to Tumblr – <a href=\"https://help.twitter.com/en/using-twitter/how-to-retweet\">often</a> <a href=\"https://www.instagram.com/p/BcFVH3Mhkcd/\">imitated</a>, but never successfully reproduced elsewhere. The reblog puts someone else’s post on your own Tumblr blog, acting as a kind of signal boost, and also giving you the ability to add your own comment to it, which your followers and anyone looking at the post’s notes will see. Reblogs can also be reblogged themselves, creating <a href=\"https://best-of-reblogs.tumblr.com/\">awesome evolving reblog trails</a> that are the source of so many memes we love. But what is a reblog <i>trail</i> versus a reblog <i>tree</i>, and how does it all work under the hood?</p><p>A “reblog tree” starts at the original post (we call it the “root post” internally at Tumblr) and extends outwards to each of its reblogs, and then each reblog of those reblogs, forming a tree-like structure with branches of “reblog trails”. As an example, you can imagine <a href=\"https://tmblr.co/mr_BTLFg8QzTPUMVSbe3vbg\">@staff</a>​ making a post, and then someone reblogging it, and then others reblogging those reblogs. I can even come through and reblog one of the reblogs:</p><figure class=\"tmblr-full\" data-orig-height=\"469\" data-orig-width=\"600\"><img src=\"https://66.media.tumblr.com/846d4be2242c786914d21a9d5eb4f598/d0852d3a38029fc7-58/s540x810/42bb3f73bb5fee11e2b51a335d77036568d804f5.png\" data-orig-height=\"469\" data-orig-width=\"600\"></figure><p>A “reblog trail” is one of those branches, starting at the original post and extending one at a time down to another post. In the reblog trail, there may actually be some reblogs that added their own content and some that didn’t – reblogs that added content are visible in the trail, while the intermediate ones that didn’t may not be visible.<br></p><figure class=\"tmblr-full\" data-orig-height=\"479\" data-orig-width=\"600\"><img src=\"https://66.media.tumblr.com/2a9a2bd2609cdecef17399767b780590/d0852d3a38029fc7-6e/s540x810/fa14195e0f6df91d74b84028876479299c41023c.png\" data-orig-height=\"479\" data-orig-width=\"600\"></figure><p>You’ll notice that the reblog trail you’re viewing somewhere (like on your dashboard) doesn’t show all of this reblog tree – only part of it. If you open up the notes on any wildly popular post, you’ll probably see lots of reblogs in there that you aren’t seeing in your current view of the post’s reblog trail. The above diagram shows the whole reblog tree (which you don’t see) and the current reblog trail you’re actually viewing (in orange). If you want to visualize a post’s entire reblog tree, the reblog graphs <a href=\"https://www.tumblr.com/settings/labs\">Tumblr Labs</a> experiment shows off these reblog trees and trails as kind of big floppy organisms. They’re a useful visualization of how content percolates around Tumblr via reblogs. You can turn on the experiment and <a href=\"https://www.tumblr.com/settings/labs\">see it on web only right now</a>, but here’s an example:<br></p><figure data-orig-width=\"786\" data-orig-height=\"780\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/c0d97c3dd79f61144fabd6a0dc6b4313/d0852d3a38029fc7-d1/s540x810/0281e87072896c56cc385c84073d5079a95157ec.png\" alt=\"image\" data-orig-width=\"786\" data-orig-height=\"780\"></figure><p>The tiny orange dot is the post we’re viewing, and the green line is a reblog trail showing how the post got reblogged along many blogs. And there are tons of other branches/trails from the original post, making dozens of different reblog trails. This is a much larger, more realistic example than my simplified diagrams above. You can imagine that my diagram above is just the start of one of these huge reblog trees, after more and more people have reblogged parts of the existing tree.<br></p><h2>Storing Reblog Trail Information</h2><p>The way we actually store the information about a reblog and its trail has changed significantly over the last year. For all posts made before this year, all of a post’s content was stored as a combination of HTML and properties specific on our Post data model. A specific reblog also stored all of the contents of <i>its entire reblog trail</i> (but not the whole reblog tree). If you have ever built a theme on Tumblr or otherwise dug around the code on a reblog, you’ll be familiar with this classic blockquote structure:</p><pre><code>&lt;p&gt;&lt;a class=\"tumblr_blog\" href=\"http://maria.tumblr.com/post/5678\"&gt;maria&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n    &lt;p&gt;&lt;a class=\"tumblr_blog\" href=\"http://cyle.tumblr.com/post/1234\"&gt;cyle&lt;/a&gt;:&lt;/p&gt;\n    &lt;blockquote&gt;\n        &lt;!-- original post content --&gt;\n        &lt;p&gt;look at my awesome original content&lt;/p&gt;\n    &lt;/blockquote&gt;\n    &lt;!-- the reblog of the original post's content --&gt;\n    &lt;p&gt;well, it's just okay original content&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;!-- this is the new content, added in our reblog of the reblog --&gt;\n&lt;p&gt;jeez. thanks a lot.&lt;/p&gt;\n</code></pre><p>This HTML represents a (fake) old text post. The original post is the blockquote most deeply nested in the HTML: “look at my awesome original content” and it was created by <code>cyle</code>. There’s a reference to the original post’s URL in the anchor tag above its blockquote tag. Moving out one level to the next blockquote is a reblog of that original post, made by <code>maria</code>, which itself adds some of its own commentary to the reblog trail. Moving out furthest, to the bottom of the HTML, is the latest reblog content being added in the post we’re viewing. With this structure, we have everything we need to show the post and its reblog trail without having to load those posts in between the original and this reblog.</p><p>If this looks and sounds confusing, that’s because it is quite complex. We’re right there with you, but the reasons behind using this structure were sound at the time. In a normal, traditional relational database, you’d expect something like the reblog trail to be represented as a series of references: a reblog post references its parent post, root post, and any intermediate posts, and we’d load those posts’ contents at runtime with a <code>JOIN</code> query or something very normalized and relational like that, making sure we don’t <i>copy</i> any data around, only <i>reference</i> it.</p><p>However, the major drawback of that traditional approach, especially at Tumblr’s scale, is that loading a reblog could go from just one query to several queries, depending on how many posts are in the reblog trail. Some of the reblog trails on Tumblr are <i>thousands of posts long</i>. Having to load a thousand other posts to load one reblog would be devastating. Instead, by actually copying the reblog trail content every time a reblog is made, we keep the number of queries needed constant: just one per post! A dashboard of 20 reblogs loads those 20 posts, not a variable amount based on how many reblogs are in each post’s trail. This is still an oversimplification of what Tumblr is really doing under the hood, but this core strategy is real.</p><h2>Broken Reblog Trails</h2><p>There is another obvious problem with the above blockquote/HTML strategy, one that you may have not realized you were seeing but you’ve probably experienced it before. If the only reference we have in the reblog trail above is a trail post’s permalink URL, what happens if that blog changes its name? Tumblr does not go through all posts and update that name in every copy of every reblog that blog has ever been involved in. Instead, it gracefully fails, and you may see a default avatar there as a placeholder. We literally don’t have any other choice, since no other useful information is stored with the old post content.</p><p>At worst, someone else takes the name of a blog used in the trail. Imagine if, in the above example, <code>oli</code> changed his blog name to <code>british-oli</code> and someone else snagged the name <code>oli</code> afterwards. Thankfully in that case, the post URL still does not work, as the post ID is tied to the old <code>oli</code> blog. The end result is that it looks like there’s a “broken” item in the reblog trail, usually manifesting as the blog looking deactivated or otherwise not accessible. This isn’t great.</p><p>As a part of <a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\">the rollout of the Neue Post Format</a> (NPF), we changed how we store the reblog trail on each post. For fully NPF reblog trails, we actually do store an immutable reference to each blog and post in the trail, instead of just the unreliable post URL. This allows us to have a much lower failure rate when someone changes their blog name or otherwise becomes unavailable. We keep the same beneficial strategy of usually having all the information we need so we don’t need to load any of those posts along the trail, but the option to load the individual post or blog is there if we absolutely need it, especially in cases like if one of those blogs is somebody you’re blocking.</p><p>If you’ve <a href=\"https://github.com/tumblr/docs/blob/master/npf-spec.md#reblog-trail\">played around with reblog trails in NPF</a>, you’ll see the result of this change. The reblog trail is no longer a messy nested blockquote chain, but instead a friendly and easy to parse JSON array, always starting with the original post and working down the trail. This includes a special case when an item in the trail is broken in a way we can’t recover from, which happens sometimes with very old posts.</p><p>The same reblog trail and new content as seen above, but in the Neue Post Format:</p><pre><code>{\n    \"trail\": [\n        {\n            \"post\": {\n                \"id\": \"1234\",\n            },\n            \"blog\": {\n                \"name\": \"cyle\"\n            },\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"look at my awesome original content\"\n                }\n            ],\n            \"layout\": []\n        },\n        {\n            \"post\": {\n                \"id\": \"3456\",\n            },\n            \"blog\": {\n                \"name\": \"maria\"\n            },\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"well, it's just okay original content\"\n                }\n            ],\n            \"layout\": []\n        }\n    ],\n    \"content\": [\n        {\n            \"type\": \"text\",\n            \"text\": \"jeez. thanks a lot.\"\n        }\n    ]\n}\n</code></pre><h2>Got questions?</h2><p>If you’ve ever wondered how something works on Tumblr behind the scenes, feel free to <a href=\"https://engineering.tumblr.com/ask\">send us an ask</a>!</p><p>- @cyle </p>",
          "tree_html": ""
        },
        "trail": [
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "189455858864" },
            "content_raw": "<p>The reblog is a beautiful thing unique to Tumblr – <a href=\"https://help.twitter.com/en/using-twitter/how-to-retweet\">often</a> <a href=\"https://www.instagram.com/p/BcFVH3Mhkcd/\">imitated</a>, but never successfully reproduced elsewhere. The reblog puts someone else’s post on your own Tumblr blog, acting as a kind of signal boost, and also giving you the ability to add your own comment to it, which your followers and anyone looking at the post’s notes will see. Reblogs can also be reblogged themselves, creating <a href=\"https://best-of-reblogs.tumblr.com/\">awesome evolving reblog trails</a> that are the source of so many memes we love. But what is a reblog <i>trail</i> versus a reblog <i>tree</i>, and how does it all work under the hood?</p><p>A “reblog tree” starts at the original post (we call it the “root post” internally at Tumblr) and extends outwards to each of its reblogs, and then each reblog of those reblogs, forming a tree-like structure with branches of “reblog trails”. As an example, you can imagine <a href=\"https://tmblr.co/mr_BTLFg8QzTPUMVSbe3vbg\">@staff</a>​ making a post, and then someone reblogging it, and then others reblogging those reblogs. I can even come through and reblog one of the reblogs:</p><figure class=\"tmblr-full\" data-orig-height=\"469\" data-orig-width=\"600\"><img src=\"https://66.media.tumblr.com/846d4be2242c786914d21a9d5eb4f598/d0852d3a38029fc7-58/s540x810/42bb3f73bb5fee11e2b51a335d77036568d804f5.png\" data-orig-height=\"469\" data-orig-width=\"600\"></figure><p>A “reblog trail” is one of those branches, starting at the original post and extending one at a time down to another post. In the reblog trail, there may actually be some reblogs that added their own content and some that didn’t – reblogs that added content are visible in the trail, while the intermediate ones that didn’t may not be visible.<br></p><figure class=\"tmblr-full\" data-orig-height=\"479\" data-orig-width=\"600\"><img src=\"https://66.media.tumblr.com/2a9a2bd2609cdecef17399767b780590/d0852d3a38029fc7-6e/s540x810/fa14195e0f6df91d74b84028876479299c41023c.png\" data-orig-height=\"479\" data-orig-width=\"600\"></figure><p>You’ll notice that the reblog trail you’re viewing somewhere (like on your dashboard) doesn’t show all of this reblog tree – only part of it. If you open up the notes on any wildly popular post, you’ll probably see lots of reblogs in there that you aren’t seeing in your current view of the post’s reblog trail. The above diagram shows the whole reblog tree (which you don’t see) and the current reblog trail you’re actually viewing (in orange). If you want to visualize a post’s entire reblog tree, the reblog graphs <a href=\"https://www.tumblr.com/settings/labs\">Tumblr Labs</a> experiment shows off these reblog trees and trails as kind of big floppy organisms. They’re a useful visualization of how content percolates around Tumblr via reblogs. You can turn on the experiment and <a href=\"https://www.tumblr.com/settings/labs\">see it on web only right now</a>, but here’s an example:<br></p><figure data-orig-width=\"786\" data-orig-height=\"780\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/c0d97c3dd79f61144fabd6a0dc6b4313/d0852d3a38029fc7-d1/s540x810/0281e87072896c56cc385c84073d5079a95157ec.png\" alt=\"image\" data-orig-width=\"786\" data-orig-height=\"780\"></figure><p>The tiny orange dot is the post we’re viewing, and the green line is a reblog trail showing how the post got reblogged along many blogs. And there are tons of other branches/trails from the original post, making dozens of different reblog trails. This is a much larger, more realistic example than my simplified diagrams above. You can imagine that my diagram above is just the start of one of these huge reblog trees, after more and more people have reblogged parts of the existing tree.<br></p><h2>Storing Reblog Trail Information</h2><p>The way we actually store the information about a reblog and its trail has changed significantly over the last year. For all posts made before this year, all of a post’s content was stored as a combination of HTML and properties specific on our Post data model. A specific reblog also stored all of the contents of <i>its entire reblog trail</i> (but not the whole reblog tree). If you have ever built a theme on Tumblr or otherwise dug around the code on a reblog, you’ll be familiar with this classic blockquote structure:</p><pre><code>&lt;p&gt;&lt;a class=\"tumblr_blog\" href=\"http://maria.tumblr.com/post/5678\"&gt;maria&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n    &lt;p&gt;&lt;a class=\"tumblr_blog\" href=\"http://cyle.tumblr.com/post/1234\"&gt;cyle&lt;/a&gt;:&lt;/p&gt;\n    &lt;blockquote&gt;\n        &lt;!-- original post content --&gt;\n        &lt;p&gt;look at my awesome original content&lt;/p&gt;\n    &lt;/blockquote&gt;\n    &lt;!-- the reblog of the original post's content --&gt;\n    &lt;p&gt;well, it's just okay original content&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;!-- this is the new content, added in our reblog of the reblog --&gt;\n&lt;p&gt;jeez. thanks a lot.&lt;/p&gt;\n</code></pre><p>This HTML represents a (fake) old text post. The original post is the blockquote most deeply nested in the HTML: “look at my awesome original content” and it was created by <code>cyle</code>. There’s a reference to the original post’s URL in the anchor tag above its blockquote tag. Moving out one level to the next blockquote is a reblog of that original post, made by <code>maria</code>, which itself adds some of its own commentary to the reblog trail. Moving out furthest, to the bottom of the HTML, is the latest reblog content being added in the post we’re viewing. With this structure, we have everything we need to show the post and its reblog trail without having to load those posts in between the original and this reblog.</p><p>If this looks and sounds confusing, that’s because it is quite complex. We’re right there with you, but the reasons behind using this structure were sound at the time. In a normal, traditional relational database, you’d expect something like the reblog trail to be represented as a series of references: a reblog post references its parent post, root post, and any intermediate posts, and we’d load those posts’ contents at runtime with a <code>JOIN</code> query or something very normalized and relational like that, making sure we don’t <i>copy</i> any data around, only <i>reference</i> it.</p><p>However, the major drawback of that traditional approach, especially at Tumblr’s scale, is that loading a reblog could go from just one query to several queries, depending on how many posts are in the reblog trail. Some of the reblog trails on Tumblr are <i>thousands of posts long</i>. Having to load a thousand other posts to load one reblog would be devastating. Instead, by actually copying the reblog trail content every time a reblog is made, we keep the number of queries needed constant: just one per post! A dashboard of 20 reblogs loads those 20 posts, not a variable amount based on how many reblogs are in each post’s trail. This is still an oversimplification of what Tumblr is really doing under the hood, but this core strategy is real.</p><h2>Broken Reblog Trails</h2><p>There is another obvious problem with the above blockquote/HTML strategy, one that you may have not realized you were seeing but you’ve probably experienced it before. If the only reference we have in the reblog trail above is a trail post’s permalink URL, what happens if that blog changes its name? Tumblr does not go through all posts and update that name in every copy of every reblog that blog has ever been involved in. Instead, it gracefully fails, and you may see a default avatar there as a placeholder. We literally don’t have any other choice, since no other useful information is stored with the old post content.</p><p>At worst, someone else takes the name of a blog used in the trail. Imagine if, in the above example, <code>oli</code> changed his blog name to <code>british-oli</code> and someone else snagged the name <code>oli</code> afterwards. Thankfully in that case, the post URL still does not work, as the post ID is tied to the old <code>oli</code> blog. The end result is that it looks like there’s a “broken” item in the reblog trail, usually manifesting as the blog looking deactivated or otherwise not accessible. This isn’t great.</p><p>As a part of <a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\">the rollout of the Neue Post Format</a> (NPF), we changed how we store the reblog trail on each post. For fully NPF reblog trails, we actually do store an immutable reference to each blog and post in the trail, instead of just the unreliable post URL. This allows us to have a much lower failure rate when someone changes their blog name or otherwise becomes unavailable. We keep the same beneficial strategy of usually having all the information we need so we don’t need to load any of those posts along the trail, but the option to load the individual post or blog is there if we absolutely need it, especially in cases like if one of those blogs is somebody you’re blocking.</p><p>If you’ve <a href=\"https://github.com/tumblr/docs/blob/master/npf-spec.md#reblog-trail\">played around with reblog trails in NPF</a>, you’ll see the result of this change. The reblog trail is no longer a messy nested blockquote chain, but instead a friendly and easy to parse JSON array, always starting with the original post and working down the trail. This includes a special case when an item in the trail is broken in a way we can’t recover from, which happens sometimes with very old posts.</p><p>The same reblog trail and new content as seen above, but in the Neue Post Format:</p><pre><code>{\n    \"trail\": [\n        {\n            \"post\": {\n                \"id\": \"1234\",\n            },\n            \"blog\": {\n                \"name\": \"cyle\"\n            },\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"look at my awesome original content\"\n                }\n            ],\n            \"layout\": []\n        },\n        {\n            \"post\": {\n                \"id\": \"3456\",\n            },\n            \"blog\": {\n                \"name\": \"maria\"\n            },\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"well, it's just okay original content\"\n                }\n            ],\n            \"layout\": []\n        }\n    ],\n    \"content\": [\n        {\n            \"type\": \"text\",\n            \"text\": \"jeez. thanks a lot.\"\n        }\n    ]\n}\n</code></pre><h2>Got questions?</h2><p>If you’ve ever wondered how something works on Tumblr behind the scenes, feel free to <a href=\"https://engineering.tumblr.com/ask\">send us an ask</a>!</p><p>- @cyle </p>",
            "content": "<p>The reblog is a beautiful thing unique to Tumblr &ndash; <a href=\"https://help.twitter.com/en/using-twitter/how-to-retweet\">often</a> <a href=\"https://www.instagram.com/p/BcFVH3Mhkcd/\">imitated</a>, but never successfully reproduced elsewhere. The reblog puts someone else&rsquo;s post on your own Tumblr blog, acting as a kind of signal boost, and also giving you the ability to add your own comment to it, which your followers and anyone looking at the post&rsquo;s notes will see. Reblogs can also be reblogged themselves, creating <a href=\"https://best-of-reblogs.tumblr.com/\">awesome evolving reblog trails</a> that are the source of so many memes we love. But what is a reblog <i>trail</i> versus a reblog <i>tree</i>, and how does it all work under the hood?</p><p>A &ldquo;reblog tree&rdquo; starts at the original post (we call it the &ldquo;root post&rdquo; internally at Tumblr) and extends outwards to each of its reblogs, and then each reblog of those reblogs, forming a tree-like structure with branches of &ldquo;reblog trails&rdquo;. As an example, you can imagine <a href=\"https://tmblr.co/mr_BTLFg8QzTPUMVSbe3vbg\">@staff</a>&#8203; making a post, and then someone reblogging it, and then others reblogging those reblogs. I can even come through and reblog one of the reblogs:</p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/846d4be2242c786914d21a9d5eb4f598/d0852d3a38029fc7-58/s540x810/42bb3f73bb5fee11e2b51a335d77036568d804f5.png\" alt=\"image\" class=\"\"/></figure><p>A &ldquo;reblog trail&rdquo; is one of those branches, starting at the original post and extending one at a time down to another post. In the reblog trail, there may actually be some reblogs that added their own content and some that didn&rsquo;t &ndash; reblogs that added content are visible in the trail, while the intermediate ones that didn&rsquo;t may not be visible.<br /></p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/2a9a2bd2609cdecef17399767b780590/d0852d3a38029fc7-6e/s540x810/fa14195e0f6df91d74b84028876479299c41023c.png\" alt=\"image\" class=\"\"/></figure><p>You&rsquo;ll notice that the reblog trail you&rsquo;re viewing somewhere (like on your dashboard) doesn&rsquo;t show all of this reblog tree &ndash; only part of it. If you open up the notes on any wildly popular post, you&rsquo;ll probably see lots of reblogs in there that you aren&rsquo;t seeing in your current view of the post&rsquo;s reblog trail. The above diagram shows the whole reblog tree (which you don&rsquo;t see) and the current reblog trail you&rsquo;re actually viewing (in orange). If you want to visualize a post&rsquo;s entire reblog tree, the reblog graphs <a href=\"https://www.tumblr.com/settings/labs\">Tumblr Labs</a> experiment shows off these reblog trees and trails as kind of big floppy organisms. They&rsquo;re a useful visualization of how content percolates around Tumblr via reblogs. You can turn on the experiment and <a href=\"https://www.tumblr.com/settings/labs\">see it on web only right now</a>, but here&rsquo;s an example:<br /></p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/c0d97c3dd79f61144fabd6a0dc6b4313/d0852d3a38029fc7-d1/s540x810/0281e87072896c56cc385c84073d5079a95157ec.png\" alt=\"image\" class=\"\"/></figure><p>The tiny orange dot is the post we&rsquo;re viewing, and the green line is a reblog trail showing how the post got reblogged along many blogs. And there are tons of other branches/trails from the original post, making dozens of different reblog trails. This is a much larger, more realistic example than my simplified diagrams above. You can imagine that my diagram above is just the start of one of these huge reblog trees, after more and more people have reblogged parts of the existing tree.<br /></p><h2>Storing Reblog Trail Information</h2><p>The way we actually store the information about a reblog and its trail has changed significantly over the last year. For all posts made before this year, all of a post&rsquo;s content was stored as a combination of HTML and properties specific on our Post data model. A specific reblog also stored all of the contents of <i>its entire reblog trail</i> (but not the whole reblog tree). If you have ever built a theme on Tumblr or otherwise dug around the code on a reblog, you&rsquo;ll be familiar with this classic blockquote structure:</p><pre><code>&lt;p&gt;&lt;a class=\"tumblr_blog\" href=\"http://maria.tumblr.com/post/5678\"&gt;maria&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n    &lt;p&gt;&lt;a class=\"tumblr_blog\" href=\"http://cyle.tumblr.com/post/1234\"&gt;cyle&lt;/a&gt;:&lt;/p&gt;\n    &lt;blockquote&gt;\n        &lt;!-- original post content --&gt;\n        &lt;p&gt;look at my awesome original content&lt;/p&gt;\n    &lt;/blockquote&gt;\n    &lt;!-- the reblog of the original post's content --&gt;\n    &lt;p&gt;well, it's just okay original content&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;!-- this is the new content, added in our reblog of the reblog --&gt;\n&lt;p&gt;jeez. thanks a lot.&lt;/p&gt;\n</code></pre><p>This HTML represents a (fake) old text post. The original post is the blockquote most deeply nested in the HTML: &ldquo;look at my awesome original content&rdquo; and it was created by <code>cyle</code>. There&rsquo;s a reference to the original post&rsquo;s URL in the anchor tag above its blockquote tag. Moving out one level to the next blockquote is a reblog of that original post, made by <code>maria</code>, which itself adds some of its own commentary to the reblog trail. Moving out furthest, to the bottom of the HTML, is the latest reblog content being added in the post we&rsquo;re viewing. With this structure, we have everything we need to show the post and its reblog trail without having to load those posts in between the original and this reblog.</p><p>If this looks and sounds confusing, that&rsquo;s because it is quite complex. We&rsquo;re right there with you, but the reasons behind using this structure were sound at the time. In a normal, traditional relational database, you&rsquo;d expect something like the reblog trail to be represented as a series of references: a reblog post references its parent post, root post, and any intermediate posts, and we&rsquo;d load those posts&rsquo; contents at runtime with a <code>JOIN</code> query or something very normalized and relational like that, making sure we don&rsquo;t <i>copy</i> any data around, only <i>reference</i> it.</p><p>However, the major drawback of that traditional approach, especially at Tumblr&rsquo;s scale, is that loading a reblog could go from just one query to several queries, depending on how many posts are in the reblog trail. Some of the reblog trails on Tumblr are <i>thousands of posts long</i>. Having to load a thousand other posts to load one reblog would be devastating. Instead, by actually copying the reblog trail content every time a reblog is made, we keep the number of queries needed constant: just one per post! A dashboard of 20 reblogs loads those 20 posts, not a variable amount based on how many reblogs are in each post&rsquo;s trail. This is still an oversimplification of what Tumblr is really doing under the hood, but this core strategy is real.</p><h2>Broken Reblog Trails</h2><p>There is another obvious problem with the above blockquote/HTML strategy, one that you may have not realized you were seeing but you&rsquo;ve probably experienced it before. If the only reference we have in the reblog trail above is a trail post&rsquo;s permalink URL, what happens if that blog changes its name? Tumblr does not go through all posts and update that name in every copy of every reblog that blog has ever been involved in. Instead, it gracefully fails, and you may see a default avatar there as a placeholder. We literally don&rsquo;t have any other choice, since no other useful information is stored with the old post content.</p><p>At worst, someone else takes the name of a blog used in the trail. Imagine if, in the above example, <code>oli</code> changed his blog name to <code>british-oli</code> and someone else snagged the name <code>oli</code> afterwards. Thankfully in that case, the post URL still does not work, as the post ID is tied to the old <code>oli</code> blog. The end result is that it looks like there&rsquo;s a &ldquo;broken&rdquo; item in the reblog trail, usually manifesting as the blog looking deactivated or otherwise not accessible. This isn&rsquo;t great.</p><p>As a part of <a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\">the rollout of the Neue Post Format</a> (NPF), we changed how we store the reblog trail on each post. For fully NPF reblog trails, we actually do store an immutable reference to each blog and post in the trail, instead of just the unreliable post URL. This allows us to have a much lower failure rate when someone changes their blog name or otherwise becomes unavailable. We keep the same beneficial strategy of usually having all the information we need so we don&rsquo;t need to load any of those posts along the trail, but the option to load the individual post or blog is there if we absolutely need it, especially in cases like if one of those blogs is somebody you&rsquo;re blocking.</p><p>If you&rsquo;ve <a href=\"https://github.com/tumblr/docs/blob/master/npf-spec.md#reblog-trail\">played around with reblog trails in NPF</a>, you&rsquo;ll see the result of this change. The reblog trail is no longer a messy nested blockquote chain, but instead a friendly and easy to parse JSON array, always starting with the original post and working down the trail. This includes a special case when an item in the trail is broken in a way we can&rsquo;t recover from, which happens sometimes with very old posts.</p><p>The same reblog trail and new content as seen above, but in the Neue Post Format:</p><pre><code>{\n    \"trail\": [\n        {\n            \"post\": {\n                \"id\": \"1234\",\n            },\n            \"blog\": {\n                \"name\": \"cyle\"\n            },\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"look at my awesome original content\"\n                }\n            ],\n            \"layout\": []\n        },\n        {\n            \"post\": {\n                \"id\": \"3456\",\n            },\n            \"blog\": {\n                \"name\": \"maria\"\n            },\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": \"well, it's just okay original content\"\n                }\n            ],\n            \"layout\": []\n        }\n    ],\n    \"content\": [\n        {\n            \"type\": \"text\",\n            \"text\": \"jeez. thanks a lot.\"\n        }\n    ]\n}\n</code></pre><h2>Got questions?</h2><p>If you&rsquo;ve ever wondered how something works on Tumblr behind the scenes, feel free to <a href=\"https://engineering.tumblr.com/ask\">send us an ask</a>!</p><p>- @cyle&nbsp;</p>",
            "is_current_item": true,
            "is_root_item": true
          }
        ],
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1577987740,
            "blog_name": "popeax",
            "blog_uuid": "t:7MUCO-sFB3BIR2_Z-6N_pA",
            "blog_url": "https://popeax.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1577956066,
            "blog_name": "serphon",
            "blog_uuid": "t:Oq-dcUHVt2_OUYky5gv-eA",
            "blog_url": "https://serphon.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1577934560,
            "blog_name": "lowercase-morass",
            "blog_uuid": "t:3qzzcK_3IPsyrzKsZcIvEg",
            "blog_url": "https://lowercase-morass.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190007879907",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1577702872,
            "blog_name": "honkchoobeepwoosh",
            "blog_uuid": "t:owkBNJbV7cgh8pw2EDopQg",
            "blog_url": "https://honkchoobeepwoosh.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1577591444,
            "blog_name": "artificialblue21",
            "blog_uuid": "t:CVxHj8_r9Vy7MjNuYKUAaw",
            "blog_url": "https://artificialblue21.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1577488197,
            "blog_name": "dunderklumpen",
            "blog_uuid": "t:nKCeZK92O_dofUH-0CWHtw",
            "blog_url": "https://dunderklumpen.net/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1577283142,
            "blog_name": "coldbloodedentity",
            "blog_uuid": "t:FSNobFc3Qdcn2cnjWFZ8mA",
            "blog_url": "https://coldbloodedentity.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1577220904,
            "blog_name": "rosdiablatiff01",
            "blog_uuid": "t:j_ax4EG-NgFUArqZVfvU_Q",
            "blog_url": "https://rosdiablatiff01.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1577061488,
            "blog_name": "antifeel",
            "blog_uuid": "t:0xmNe6L2FsgmrEB3VPdG6Q",
            "blog_url": "https://antifeel.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576896916,
            "blog_name": "poooweeer",
            "blog_uuid": "t:kColGJWFvuRDR97rktk1pQ",
            "blog_url": "https://poooweeer.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1576765200,
            "blog_name": "severe-cybernetics-museums-spy",
            "blog_uuid": "t:kzdGXo0A7RpZjUb50zL3ng",
            "blog_url": "https://severe-cybernetics-museums-spy.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "189756728878",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1576765196,
            "blog_name": "severe-cybernetics-museums-spy",
            "blog_uuid": "t:kzdGXo0A7RpZjUb50zL3ng",
            "blog_url": "https://severe-cybernetics-museums-spy.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576683903,
            "blog_name": "lostelectric",
            "blog_uuid": "t:f_4Vxod_k_aiLwYu8kAe4g",
            "blog_url": "https://lostelectric.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1576651518,
            "blog_name": "kichisaburo3",
            "blog_uuid": "t:Gd6pDNLouF90t10BGgw28A",
            "blog_url": "https://kichisaburo3.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "189734564407",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1576651277,
            "blog_name": "damianklimek",
            "blog_uuid": "t:XsrytLbGZfoHtBmQCju4VA",
            "blog_url": "https://damianklimek.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576647442,
            "blog_name": "matthewmalters",
            "blog_uuid": "t:cHxFLuY-5jGP2FN8gRtz0A",
            "blog_url": "https://matthewmalters.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576631654,
            "blog_name": "diegogiannini",
            "blog_uuid": "t:zzgta-R8PzFQv3T7CM9h4g",
            "blog_url": "https://diegogiannini.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1576616874,
            "blog_name": "quarantino15",
            "blog_uuid": "t:WFG13t5ZaQv7gsgFOojRtA",
            "blog_url": "https://quarantino15.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "added_text": "Credit to - engineering",
            "post_id": "189726500729",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "reblog",
            "timestamp": 1576607715,
            "blog_name": "mikeo56",
            "blog_uuid": "t:mHJf7wWFvvLvldzHdrw08Q",
            "blog_url": "https://mikeo56.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189724210857",
            "reblog_parent_blog_name": "intelligentliving"
          },
          {
            "type": "like",
            "timestamp": 1576604070,
            "blog_name": "pitupitu06",
            "blog_uuid": "t:S16vfxxEQSihSqFl1iKQ1A",
            "blog_url": "https://pitupitu06.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576443476,
            "blog_name": "una-colegiala-poetica-mas-posts",
            "blog_uuid": "t:XIj4uV1K5QwIT0FKJGlTAA",
            "blog_url": "https://una-colegiala-poetica-mas-posts.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1576408717,
            "blog_name": "dvnthn",
            "blog_uuid": "t:jhd0NVz_LC5-bqhhpC-_ZA",
            "blog_url": "https://dvnthn.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "added_text": "Always geek the shit out of everything ;)",
            "post_id": "189681729861",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "reblog",
            "timestamp": 1576391773,
            "blog_name": "tortillatortia",
            "blog_uuid": "t:52gRcNVpkCKPxBDtT-S0YA",
            "blog_url": "https://tortillatortia.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "189679090257",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1576391768,
            "blog_name": "tortillatortia",
            "blog_uuid": "t:52gRcNVpkCKPxBDtT-S0YA",
            "blog_url": "https://tortillatortia.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1576323688,
            "blog_name": "iemanresui",
            "blog_uuid": "t:-D2I-zB9kAV8uF8RuuJkYA",
            "blog_url": "https://iemanresui.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1576282140,
            "blog_name": "gtokio",
            "blog_uuid": "t:Q4hwzW6KczRneletSoDVqQ",
            "blog_url": "https://gtokio.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189654841622",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1576154398,
            "blog_name": "bunnyrocksstuff",
            "blog_uuid": "t:8UXw1Gy8b4k77B4nvpcHLg",
            "blog_url": "https://bunnyrocksstuff.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1576137674,
            "blog_name": "itszero2hero",
            "blog_uuid": "t:zkzjNxc5o8J8eLvxhPG6OA",
            "blog_url": "https://itszero2hero.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189623898730",
            "reblog_parent_blog_name": "thesaltofcarthage"
          },
          {
            "type": "like",
            "timestamp": 1576099834,
            "blog_name": "nerdalert-andi",
            "blog_uuid": "t:q2YhLPDnJKVWiISEqreFmQ",
            "blog_url": "https://nerdalert-andi.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1576073962,
            "blog_name": "l33thacker",
            "blog_uuid": "t:qgW9_f5B1rGFikI8upi29Q",
            "blog_url": "https://l33thacker.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "189609666827",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "reblog",
            "timestamp": 1575977245,
            "blog_name": "holmes-md",
            "blog_uuid": "t:OAmc4G1TuKwHghHic8iAhw",
            "blog_url": "https://holmes-md.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "189589510174",
            "reblog_parent_blog_name": "thesaltofcarthage"
          },
          {
            "type": "like",
            "timestamp": 1575944212,
            "blog_name": "fubusin",
            "blog_uuid": "t:y-eYjirKf-KVwJlL6vfu6w",
            "blog_url": "https://fubusin.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575935276,
            "blog_name": "theangeloftris",
            "blog_uuid": "t:62PN75jHjPjz5AW3S5QapA",
            "blog_url": "https://theangeloftris.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575880117,
            "blog_name": "deadmoonkingdom",
            "blog_uuid": "t:Y4TgQgRPVtPx31XvbSD8cw",
            "blog_url": "https://deadmoonkingdom.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575797412,
            "blog_name": "justamereoctahedron",
            "blog_uuid": "t:DoSlLlU4kw2Tb5OouPYMSw",
            "blog_url": "https://justamereoctahedron.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575744980,
            "blog_name": "rachelaquastar",
            "blog_uuid": "t:Olg494PKKCPZxkPO4RKs2Q",
            "blog_url": "https://rachelaquastar.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1575680418,
            "blog_name": "dragonengine",
            "blog_uuid": "t:b57Zx7JlUXJREJADmbRXBQ",
            "blog_url": "https://dragonengine.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189520366050",
            "reblog_parent_blog_name": "intelligentliving"
          },
          {
            "type": "like",
            "timestamp": 1575630237,
            "blog_name": "ronichoudhary",
            "blog_uuid": "t:7-NgAs6alf6c4ZTA-fGNgw",
            "blog_url": "https://ronichoudhary.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1575624046,
            "blog_name": "comebacklab",
            "blog_uuid": "t:RLuja8Ptd1iDeQZ-WjfkqA",
            "blog_url": "https://comebacklab.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575601762,
            "blog_name": "dunnoob",
            "blog_uuid": "t:Li2ARfvwN99nKYSGXMZ0EQ",
            "blog_url": "https://dunnoob.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1575595807,
            "blog_name": "acatwatchingonthetree",
            "blog_uuid": "t:mp-Nfl1qOOk0d3_88KF6YA",
            "blog_url": "https://acatwatchingonthetree.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189501193555",
            "reblog_parent_blog_name": "do-nothing"
          },
          {
            "type": "like",
            "timestamp": 1575594457,
            "blog_name": "bnobuhara",
            "blog_uuid": "t:DqJ-Iuo6JJL7WxpNusN-Cg",
            "blog_url": "https://bnobuhara.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575567514,
            "blog_name": "ouestmachat",
            "blog_uuid": "t:TfX6dtg1SP2hJg1oxH-k9A",
            "blog_url": "https://ouestmachat.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1575552926,
            "blog_name": "low-key-loki",
            "blog_uuid": "t:RF83jFaMNuAPRFt7aD5tiQ",
            "blog_url": "https://low-key-loki.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575537338,
            "blog_name": "pomfpomfpurin",
            "blog_uuid": "t:0qV7AI82-5iqiuQS4sJ5SA",
            "blog_url": "https://pomfpomfpurin.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 188086320876,
        "post_url": "https://engineering.tumblr.com/post/188086320876/tumblr-bug-bounty-revamp",
        "slug": "tumblr-bug-bounty-revamp",
        "date": "2019-10-02 15:00:26 GMT",
        "timestamp": 1570028426,
        "state": "published",
        "format": "html",
        "reblog_key": "5LWGetTV",
        "tags": [ "engineering", "security", "bug bounty" ],
        "short_url": "https://tmblr.co/ZI3nWx2lAqNxi",
        "summary": "Tumblr Bug Bounty Revamp",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 118,
        "title": "Tumblr Bug Bounty Revamp",
        "body": "<p><a href=\"https://security.tumblr.com/post/188067502615/tumblr-bug-bounty-revamp\" class=\"tumblr_blog\">security</a>:</p><blockquote>\n<figure class=\"tmblr-full\" data-orig-height=\"1000\" data-orig-width=\"1000\"><img src=\"https://66.media.tumblr.com/2f13c79d486cc94dc4179b7264508060/f912a04d6cdcee00-0c/s540x810/5518cb4f62279b1e991466536fa05f8c200969a0.gif\" data-orig-height=\"1000\" data-orig-width=\"1000\"/></figure><p>Exciting news! It’s been almost six years since we launched our Bug Bounty program and it has been amazingly successful. We’ve realized how instrumental you—the security community—is to keeping Tumblr a safe place for millions of people. </p>\n<p>Over the years we’ve gone from a self-hosted submission form to a program under Verizon Media. Today, we’re announcing with great gratitude that <a href=\"https://hackerone.com/tumblr\">our Bug Bounty program</a> is available directly on HackerOne.</p>\n<p>Again, a huge, huge thank you to everyone who has participated in our program so far and we look forward to working with all future reporters as well. We highly appreciate your honest submissions and hope that you will continue to send us any future discoveries you find =]</p>\n<p><a href=\"https://hackerone.com/tumblr\">Submit a bug</a></p>\n</blockquote>",
        "reblog": {
          "comment": "",
          "tree_html": "<p><a href=\"https://security.tumblr.com/post/188067502615/tumblr-bug-bounty-revamp\" class=\"tumblr_blog\">security</a>:</p>\n<blockquote>\n<figure class=\"tmblr-full\" data-orig-height=\"1000\" data-orig-width=\"1000\"><img src=\"https://66.media.tumblr.com/2f13c79d486cc94dc4179b7264508060/f912a04d6cdcee00-0c/s540x810/5518cb4f62279b1e991466536fa05f8c200969a0.gif\" data-orig-height=\"1000\" data-orig-width=\"1000\"></figure><p>Exciting news! It’s been almost six years since we launched our Bug Bounty program and it has been amazingly successful. We’ve realized how instrumental you—the security community—is to keeping Tumblr a safe place for millions of people. </p>\n<p>Over the years we’ve gone from a self-hosted submission form to a program under Verizon Media. Today, we’re announcing with great gratitude that <a href=\"https://hackerone.com/tumblr\">our Bug Bounty program</a> is available directly on HackerOne.</p>\n<p>Again, a huge, huge thank you to everyone who has participated in our program so far and we look forward to working with all future reporters as well. We highly appreciate your honest submissions and hope that you will continue to send us any future discoveries you find =]</p>\n<p><a href=\"https://hackerone.com/tumblr\">Submit a bug</a></p>\n</blockquote>"
        },
        "trail": [
          {
            "blog": {
              "name": "security",
              "active": true,
              "theme": {
                "header_full_width": 5904,
                "header_full_height": 3321,
                "header_focus_width": 2048,
                "header_focus_height": 1152,
                "avatar_shape": "square",
                "background_color": "#fafafa",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/3f5cae3b0e6deecaa2499bd36cc440f5/1eb4f135c79bb46b-9c/s5904x3321/0cef9dc610f7953046ea24bf212bbd43c5651780.png",
                "header_image_focused": "https://66.media.tumblr.com/3f5cae3b0e6deecaa2499bd36cc440f5/1eb4f135c79bb46b-9c/s2048x3072/cdbc75b3bb1212877d217f14560cb971f0293343.png",
                "header_image_scaled": "https://66.media.tumblr.com/3f5cae3b0e6deecaa2499bd36cc440f5/1eb4f135c79bb46b-9c/s2048x3072/cdbc75b3bb1212877d217f14560cb971f0293343.png",
                "header_stretch": true,
                "link_color": "#00cc00",
                "show_avatar": true,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#666666",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "188067502615" },
            "content_raw": "<p><figure class=\"tmblr-full\" data-orig-height=\"1000\" data-orig-width=\"1000\"><img src=\"https://66.media.tumblr.com/2f13c79d486cc94dc4179b7264508060/f912a04d6cdcee00-0c/s540x810/5518cb4f62279b1e991466536fa05f8c200969a0.gif\" data-orig-height=\"1000\" data-orig-width=\"1000\"></figure><p>Exciting news! It’s been almost six years since we launched our Bug Bounty program and it has been amazingly successful. We’ve realized how instrumental you—the security community—is to keeping Tumblr a safe place for millions of people. </p>\n<p>Over the years we’ve gone from a self-hosted submission form to a program under Verizon Media. Today, we’re announcing with great gratitude that <a href=\"https://hackerone.com/tumblr\">our Bug Bounty program</a> is available directly on HackerOne.</p>\n<p>Again, a huge, huge thank you to everyone who has participated in our program so far and we look forward to working with all future reporters as well. We highly appreciate your honest submissions and hope that you will continue to send us any future discoveries you find =]</p>\n<p><a href=\"https://hackerone.com/tumblr\">Submit a bug</a></p></p>",
            "content": "<p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/2f13c79d486cc94dc4179b7264508060/f912a04d6cdcee00-0c/s540x810/5518cb4f62279b1e991466536fa05f8c200969a0.gif\" alt=\"image\" class=\"\"/></figure><p>Exciting news! It&rsquo;s been almost six years since we launched our Bug Bounty program and it has been amazingly successful. We&rsquo;ve realized how instrumental you&mdash;the security community&mdash;is to keeping Tumblr a safe place for millions of people.&nbsp;</p>\n<p>Over the years we&rsquo;ve gone from a self-hosted submission form to a program under Verizon Media. Today, we&rsquo;re announcing with great gratitude that <a href=\"https://hackerone.com/tumblr\">our Bug Bounty program</a> is available directly on HackerOne.</p>\n<p>Again, a huge, huge thank you to everyone who has participated in our program so far and we look forward to working with all future reporters as well. We highly appreciate your honest submissions and hope that you will continue to send us any future discoveries you find =]</p>\n<p><a href=\"https://hackerone.com/tumblr\">Submit a bug</a></p></p>",
            "is_root_item": true
          }
        ],
        "reblogged_from_id": "188067502615",
        "reblogged_from_url": "https://security.tumblr.com/post/188067502615/tumblr-bug-bounty-revamp",
        "reblogged_from_name": "security",
        "reblogged_from_title": "Tumblr Security",
        "reblogged_from_uuid": "t:w0gakFqfHHiqEEwpj0NdlQ",
        "reblogged_from_can_message": true,
        "reblogged_root_id": "188067502615",
        "reblogged_root_url": "https://security.tumblr.com/post/188067502615/tumblr-bug-bounty-revamp",
        "reblogged_root_name": "security",
        "reblogged_root_title": "Tumblr Security",
        "reblogged_root_uuid": "t:w0gakFqfHHiqEEwpj0NdlQ",
        "reblogged_root_can_message": true,
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1577065769,
            "blog_name": "antifeel",
            "blog_uuid": "t:0xmNe6L2FsgmrEB3VPdG6Q",
            "blog_url": "https://antifeel.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1576933754,
            "blog_name": "yourdark",
            "blog_uuid": "t:73npIWXO_-XzqkQAmnzNTg",
            "blog_url": "https://yourdark.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1575261595,
            "blog_name": "funsize5858-blog",
            "blog_uuid": "t:2zH3FCfmDH09dHAR1_QiqA",
            "blog_url": "https://funsize5858-blog.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1575046219,
            "blog_name": "essentwolf",
            "blog_uuid": "t:PrFxwZ3ivsQHlA148_TEhA",
            "blog_url": "https://essentwolf.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1574807498,
            "blog_name": "princessmullen",
            "blog_uuid": "t:DL8eVxGOAudVRF43IKoiHg",
            "blog_url": "https://princessmullen.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1574645443,
            "blog_name": "supergnarlydave",
            "blog_uuid": "t:Pq-iIolf_wggCjb0GW4HuQ",
            "blog_url": "https://supergnarlydave.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1574574437,
            "blog_name": "chief-cochise",
            "blog_uuid": "t:mRw5CRFUNt0eq-l647Qyaw",
            "blog_url": "https://chief-cochise.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "I’ve been on this site a whole five minutes and I see this! Great to see my choice of site to host my infosec blog cares about bugs and security.",
            "post_id": "189262890732",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1574293949,
            "blog_name": "elpablogp",
            "blog_uuid": "t:gSDag5EHSH_8xq5kSZ2VdA",
            "blog_url": "https://elpablogp.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1574134910,
            "blog_name": "im-low",
            "blog_uuid": "t:EGrbaFbS4lyJ4IKAMFFLAQ",
            "blog_url": "https://im-low.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1573994683,
            "blog_name": "itscyberworld",
            "blog_uuid": "t:5dxMueXTxumUZoS3I54CLA",
            "blog_url": "https://itscyberworld.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1573953082,
            "blog_name": "nanahayashi",
            "blog_uuid": "t:krTb6HLrUCsXIcUWyRwCZg",
            "blog_url": "https://nanahayashi.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189114414227",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1573935006,
            "blog_name": "a-dead-experience",
            "blog_uuid": "t:aaSkPOpPGx7NIAOtMYsOTA",
            "blog_url": "https://a-dead-experience.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1573807847,
            "blog_name": "dev-linux-man",
            "blog_uuid": "t:8awE9nQH2-bvekqCP_3p3w",
            "blog_url": "https://dev-linux-man.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1573761535,
            "blog_name": "fandrewdavid",
            "blog_uuid": "t:hrZ9l5RtX92z_XbnBMnRuw",
            "blog_url": "https://fandrewdavid.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1573573186,
            "blog_name": "infromationtechnology",
            "blog_uuid": "t:EHoYTk32sUiPCJrsJzPnpg",
            "blog_url": "https://infromationtechnology.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "189015631680",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1573510775,
            "blog_name": "szymongorczyca",
            "blog_uuid": "t:1DtPwNgeQBoMFnwws5XEuQ",
            "blog_url": "https://szymongorczyca.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1573473686,
            "blog_name": "whitesstrom",
            "blog_uuid": "t:q5XRCm0sgx72Siz867Yb_g",
            "blog_url": "https://whitesstrom.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1573438045,
            "blog_name": "farahmcfadden59",
            "blog_uuid": "t:dyohZCGBzT6TKngTNiARMA",
            "blog_url": "https://farahmcfadden59.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1573244726,
            "blog_name": "fameway",
            "blog_uuid": "t:5YOT9zERbx8M0oJP9P85uw",
            "blog_url": "https://fameway.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1573168898,
            "blog_name": "ilisher-55",
            "blog_uuid": "t:O1iGQFUoviMK_KRQ6jFaqA",
            "blog_url": "https://ilisher-55.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1572626743,
            "blog_name": "iapricity",
            "blog_uuid": "t:0NmwKjx-9YnBFEARrlUWJA",
            "blog_url": "https://iapricity.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1572526328,
            "blog_name": "tomxaa",
            "blog_uuid": "t:aoUGE5Chkrr-0nWhUn-w0g",
            "blog_url": "https://tomxaa.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1572409703,
            "blog_name": "desktop-gold-software",
            "blog_uuid": "t:uMCq58yVjv0FudhH7pAj7w",
            "blog_url": "https://desktop-gold-software.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1572368668,
            "blog_name": "vuonglandtravel",
            "blog_uuid": "t:lOjCjgQRS8JEa5rsuuPsGw",
            "blog_url": "https://vuonglandtravel.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1572335926,
            "blog_name": "msbahsocialblog",
            "blog_uuid": "t:94qHHiJeey1adKkXCldGFg",
            "blog_url": "https://msbahsocialblog.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "188672376807",
            "reblog_parent_blog_name": "security"
          },
          {
            "type": "like",
            "timestamp": 1572326062,
            "blog_name": "dunnoob",
            "blog_uuid": "t:Li2ARfvwN99nKYSGXMZ0EQ",
            "blog_url": "https://dunnoob.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1572086923,
            "blog_name": "rainbowlight100",
            "blog_uuid": "t:q7Ienh9NLpUb4SJx18bj5w",
            "blog_url": "https://rainbowlight100.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1571905867,
            "blog_name": "nanciecurtis9",
            "blog_uuid": "t:iT9ePmOGOqLzWJ5xggJZEQ",
            "blog_url": "https://nanciecurtis9.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1571883051,
            "blog_name": "ikevin7blr",
            "blog_uuid": "t:uuxKnSN-8TbMIfC1zdyg3Q",
            "blog_url": "https://ikevin7blr.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1571815350,
            "blog_name": "grupoalfazema",
            "blog_uuid": "t:iNCHhu9O_Gc_t6_KXWajjw",
            "blog_url": "https://grupoalfazema.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1571766738,
            "blog_name": "thelcky",
            "blog_uuid": "t:DDAdVyvY6KPk7YKcBGGEpQ",
            "blog_url": "https://thelcky.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1571705381,
            "blog_name": "maria",
            "blog_uuid": "t:AMC47mm0mJSbY0LAB1xpOg",
            "blog_url": "https://maria.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1571496670,
            "blog_name": "testar960",
            "blog_uuid": "t:XO_O9VmaQ_cp4zC-nrUIbw",
            "blog_url": "https://testar960.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reply",
            "timestamp": 1571292499,
            "blog_name": "kingdom-healing-store",
            "blog_uuid": "t:E63pyYF_-Dlj2tLG3Z7bAw",
            "blog_url": "https://kingdom-healing-store.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "reply_text": "Or send the code to its accountAlshabahLunar@Gmail.Com",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "reply",
            "timestamp": 1571292418,
            "blog_name": "kingdom-healing-store",
            "blog_uuid": "t:E63pyYF_-Dlj2tLG3Z7bAw",
            "blog_url": "https://kingdom-healing-store.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "reply_text": "Welcome staff\n.\nPlease help I have sent more than one message asking for help\n.\nPlease disable two-factor authentication is absolutely necessary to access my account\n.\nthank you",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1571242309,
            "blog_name": "lolocos1881",
            "blog_uuid": "t:3M9RryuOhf8TGWLkXpU8gQ",
            "blog_url": "https://lolocos1881.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1571225105,
            "blog_name": "toeflplus",
            "blog_uuid": "t:dlk7GYs5R8c-zzGJGbDY1A",
            "blog_url": "https://toeflplus.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1571181813,
            "blog_name": "haaeeu",
            "blog_uuid": "t:qlEYkT-RdC0gkQBrto6DCg",
            "blog_url": "https://haaeeu.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "188374062377",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1571174182,
            "blog_name": "boogamcg",
            "blog_uuid": "t:aV_dyBUApuLRQbsgBXOutw",
            "blog_url": "https://boogamcg.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1571150900,
            "blog_name": "retrowarestudio",
            "blog_uuid": "t:gEzuIdC8c_oxzAFiP1Hleg",
            "blog_url": "https://retrowarestudio.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570797572,
            "blog_name": "anishacardenas",
            "blog_uuid": "t:DWnLRFr_uZN14uBa4MpwQw",
            "blog_url": "https://anishacardenas.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570659674,
            "blog_name": "alex0two",
            "blog_uuid": "t:7VQwPTcur8RLCwixu9q8dw",
            "blog_url": "https://alex0two.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570646150,
            "blog_name": "smelina12",
            "blog_uuid": "t:ySwYF8q5o4_7G3VwAoI8TA",
            "blog_url": "https://smelina12.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570630001,
            "blog_name": "enchantinglandhairdogiant",
            "blog_uuid": "t:UchsqyofVsoWzUYqZBDzsQ",
            "blog_url": "https://enchantinglandhairdogiant.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 186792717134,
        "post_url": "https://engineering.tumblr.com/post/186792717134/advances-in-spam-detection-on-tumblr",
        "slug": "advances-in-spam-detection-on-tumblr",
        "date": "2019-08-05 15:00:20 GMT",
        "timestamp": 1565017220,
        "state": "published",
        "format": "html",
        "reblog_key": "jygPCLoH",
        "tags": [ "engineering", "spam" ],
        "short_url": "https://tmblr.co/ZI3nWx2jzjgjE",
        "summary": "Advances in Spam Detection on Tumblr",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 183,
        "title": "Advances in Spam Detection on Tumblr",
        "body": "<figure data-orig-width=\"480\" data-orig-height=\"270\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/dba590bc1feada4b417a9a8d01879ed6/306e9d23ad058177-8f/s540x810/96b11b168eff97ff91b80e252fff38b5fa9f4263.gif\" alt=\"image\" data-orig-width=\"480\" data-orig-height=\"270\"/></figure><p>As with all open platforms for user-generated content, Tumblr has been hit with a fair bit of spam. People who create spambots or abuse our platform in the interest of non-genuine social gestures are really good at finding new ways to develop and implement their spam. It’s what they do. Over the years, we have been experimenting with various tools and techniques to combat issues like spambots and non-genuine social gestures. To understand more about our work, let’s dig into the details.</p><h2>Challenge: precise identification of spam</h2><p>Spammers often try to disguise themselves by attempting to use a platform in the same way a real person would. As spammers learn how to develop newer, better ways of mimicking the behavior(s) of real people, the boundary between spammers and real people becomes more and more blurred, which unfortunately means non-spammers may get flagged as spam. This is what is known as a false positive. </p><p>Tumblr’s goal has always been to find the delicate balance needed in making sure we are addressing spam as aggressively as possible without dramatically increasing the number of false positives.<br/></p><h2>Challenge: evolving spam behavior</h2><p>Spam evolves. Spammers learn how to dodge new spam detection as soon as a platform starts using it. Therefore, relying on fixed logic is not sufficient. We instead approach the issue with a broad set of dynamic predictors, because the best way to combat spam is to utilize an adaptable detection methodology.<br/></p><h2>Our work</h2><p>At the heart of all good spam detection efforts are machine learning algorithms. These algorithms are fed data from how real people use Tumblr and use this data to enhance our classification accuracy. Thanks to this historical data, when new spam or malicious patterns start occurring, we can react faster and identify spam with higher accuracy. Our newly launched model demonstrates 98% accuracy in determining if a user is a spammer.</p><p>The diagram below describes our spam classification pipeline:</p><p><br/></p><figure data-orig-width=\"1043\" data-orig-height=\"1042\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/abfa4da6cedff4614c7acd3421b93ca6/306e9d23ad058177-76/s540x810/50ac6480fef80f9076a971de2d486d346e4a30e2.png\" alt=\"image\" data-orig-width=\"1043\" data-orig-height=\"1042\"/></figure><p><br/></p><p>Because every machine learning algorithm starts with data, we begin with a data management system that manages and controls data streams flowing around Tumblr. Every microsecond, the data management system records this data into log files. The system then periodically transfers these logs into our database, or Hadoop File System (HDFS). We then write numerous scalding jobs that focus on identifying what parts of this mountain of data are helpful when learning who’s a spammer. To start this process, we come up with specific hypotheses on some data sources and then collect the data to test these hypotheses in the next step.<br/></p><p>How do we test if a data source is useful? After the scalding jobs finish, we analyze and visualize the data source to determine if the collected information can be turned into a signal. If the raw data itself is not enough, we might need to combine several signals to produce better results. The whole thing may sound a little hard to grasp for some. Maybe a pseudo example could help?<br/></p><p>What if we found that many spammers really enjoy, say, insects and they were creating posts with a massive number of insect images? Based on this observation, we would hypothesize that the more pictures of insects someone’s blog has, the more likely it is spam. If we validated this hypothesis, we would then build a feature called InsectImageNums to track how many times a blog has posted an insect. But wait! What if we realized that the majority of our users post zero insect images? This becomes problematic because most of the data in InsectImageNums are zeroes, and those that are not zero have a very diverse range. Besides, some insects specialists or nature lovers do post images of insects, and we don’t want to classify these people as spam incorrectly. We would need to dig deeper and find a more detailed differentiator. Perhaps we see that it is rare for even the most bug-loving person to post more than five pictures of insects. We’d use that finding and create a new predictor called InsectsImageNumsGreaterThanFive. After this transformed feature is verified as accurate and useful, it is included in our predictor set.<br/></p><p>When we have a verified and helpful set of working features, we then pass them to the machine learning models in Spark through Hive. Sometimes the aggregated size of the data is way too big for a single machine to process, so we use Spark and Spark ML interface to train our larger data-sets. <br/></p><h2>What kinds of machine learning algorithms are we using? </h2><p>Supervised machine learning requires training labels, but these labels are only partially defined. With imperfect labels, we use iterative semi-supervised machine learning techniques to label instances closest to the classification decision boundary by checking our predictions with human agents. When human agents stop seeing false positives, we assume the model is crafted strong enough to be placed into HDFS. Through this semi-supervised approach, we achieve a 98% accuracy rate. We then upload the trained machine learning model to our database and periodically update it.</p><p>We save the spam probability score of new groups of users daily on Redis, an in-memory data structure store. This user spam probability score becomes a useful data validation point for our internal team that leads our spam moderation effort. In a way, the machine learning spam detection pipeline’s job is not to automatically suspend suspicious blogs, but to find blogs that have suspicious behaviors—like spreading viruses or malicious content across the internet. We want our community to enjoy a friendly environment on Tumblr, and we want to avoid as many false positives as possible. That’s why our overall pipeline involves both machine and human efforts.</p><h2>What’s next </h2><p>Spam detection work is never done. What works above may not work six months from now. Our goal is to evolve one step ahead of the spammers. Keep your eyes peeled here on <a href=\"https://tmblr.co/mLNLu9JDs4vF6ZeXLb15pqA\">@engineering</a> to stay up-to-date!</p><p>— Vincent Guo (<a href=\"https://tmblr.co/mIStrqle9ilsJGxr-B7KZtA\">@dat-coder</a>)</p>",
        "reblog": {
          "comment": "<p><figure data-orig-width=\"480\" data-orig-height=\"270\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/dba590bc1feada4b417a9a8d01879ed6/306e9d23ad058177-8f/s540x810/96b11b168eff97ff91b80e252fff38b5fa9f4263.gif\" alt=\"image\" data-orig-width=\"480\" data-orig-height=\"270\"></figure><p>As with all open platforms for user-generated content, Tumblr has been hit with a fair bit of spam. People who create spambots or abuse our platform in the interest of non-genuine social gestures are really good at finding new ways to develop and implement their spam. It’s what they do. Over the years, we have been experimenting with various tools and techniques to combat issues like spambots and non-genuine social gestures. To understand more about our work, let’s dig into the details.</p><h2>Challenge: precise identification of spam</h2><p>Spammers often try to disguise themselves by attempting to use a platform in the same way a real person would. As spammers learn how to develop newer, better ways of mimicking the behavior(s) of real people, the boundary between spammers and real people becomes more and more blurred, which unfortunately means non-spammers may get flagged as spam. This is what is known as a false positive. </p><p>Tumblr’s goal has always been to find the delicate balance needed in making sure we are addressing spam as aggressively as possible without dramatically increasing the number of false positives.<br></p><h2>Challenge: evolving spam behavior</h2><p>Spam evolves. Spammers learn how to dodge new spam detection as soon as a platform starts using it. Therefore, relying on fixed logic is not sufficient. We instead approach the issue with a broad set of dynamic predictors, because the best way to combat spam is to utilize an adaptable detection methodology.<br></p><h2>Our work</h2><p>At the heart of all good spam detection efforts are machine learning algorithms. These algorithms are fed data from how real people use Tumblr and use this data to enhance our classification accuracy. Thanks to this historical data, when new spam or malicious patterns start occurring, we can react faster and identify spam with higher accuracy. Our newly launched model demonstrates 98% accuracy in determining if a user is a spammer.</p><p>The diagram below describes our spam classification pipeline:</p><p><br></p><figure data-orig-width=\"1043\" data-orig-height=\"1042\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/abfa4da6cedff4614c7acd3421b93ca6/306e9d23ad058177-76/s540x810/50ac6480fef80f9076a971de2d486d346e4a30e2.png\" alt=\"image\" data-orig-width=\"1043\" data-orig-height=\"1042\"></figure><p><br></p><p>Because every machine learning algorithm starts with data, we begin with a data management system that manages and controls data streams flowing around Tumblr. Every microsecond, the data management system records this data into log files. The system then periodically transfers these logs into our database, or Hadoop File System (HDFS). We then write numerous scalding jobs that focus on identifying what parts of this mountain of data are helpful when learning who’s a spammer. To start this process, we come up with specific hypotheses on some data sources and then collect the data to test these hypotheses in the next step.<br></p><p>How do we test if a data source is useful? After the scalding jobs finish, we analyze and visualize the data source to determine if the collected information can be turned into a signal. If the raw data itself is not enough, we might need to combine several signals to produce better results. The whole thing may sound a little hard to grasp for some. Maybe a pseudo example could help?<br></p><p>What if we found that many spammers really enjoy, say, insects and they were creating posts with a massive number of insect images? Based on this observation, we would hypothesize that the more pictures of insects someone’s blog has, the more likely it is spam. If we validated this hypothesis, we would then build a feature called InsectImageNums to track how many times a blog has posted an insect. But wait! What if we realized that the majority of our users post zero insect images? This becomes problematic because most of the data in InsectImageNums are zeroes, and those that are not zero have a very diverse range. Besides, some insects specialists or nature lovers do post images of insects, and we don’t want to classify these people as spam incorrectly. We would need to dig deeper and find a more detailed differentiator. Perhaps we see that it is rare for even the most bug-loving person to post more than five pictures of insects. We’d use that finding and create a new predictor called InsectsImageNumsGreaterThanFive. After this transformed feature is verified as accurate and useful, it is included in our predictor set.<br></p><p>When we have a verified and helpful set of working features, we then pass them to the machine learning models in Spark through Hive. Sometimes the aggregated size of the data is way too big for a single machine to process, so we use Spark and Spark ML interface to train our larger data-sets. <br></p><h2>What kinds of machine learning algorithms are we using? </h2><p>Supervised machine learning requires training labels, but these labels are only partially defined. With imperfect labels, we use iterative semi-supervised machine learning techniques to label instances closest to the classification decision boundary by checking our predictions with human agents. When human agents stop seeing false positives, we assume the model is crafted strong enough to be placed into HDFS. Through this semi-supervised approach, we achieve a 98% accuracy rate. We then upload the trained machine learning model to our database and periodically update it.</p><p>We save the spam probability score of new groups of users daily on Redis, an in-memory data structure store. This user spam probability score becomes a useful data validation point for our internal team that leads our spam moderation effort. In a way, the machine learning spam detection pipeline’s job is not to automatically suspend suspicious blogs, but to find blogs that have suspicious behaviors—like spreading viruses or malicious content across the internet. We want our community to enjoy a friendly environment on Tumblr, and we want to avoid as many false positives as possible. That’s why our overall pipeline involves both machine and human efforts.</p><h2>What’s next </h2><p>Spam detection work is never done. What works above may not work six months from now. Our goal is to evolve one step ahead of the spammers. Keep your eyes peeled here on <a href=\"https://tmblr.co/mLNLu9JDs4vF6ZeXLb15pqA\">@engineering</a> to stay up-to-date!</p><p>— Vincent Guo (<a href=\"https://tmblr.co/mIStrqle9ilsJGxr-B7KZtA\">@dat-coder</a>)</p></p>",
          "tree_html": ""
        },
        "trail": [
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "186792717134" },
            "content_raw": "<p><figure data-orig-width=\"480\" data-orig-height=\"270\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/dba590bc1feada4b417a9a8d01879ed6/306e9d23ad058177-8f/s540x810/96b11b168eff97ff91b80e252fff38b5fa9f4263.gif\" alt=\"image\" data-orig-width=\"480\" data-orig-height=\"270\"></figure><p>As with all open platforms for user-generated content, Tumblr has been hit with a fair bit of spam. People who create spambots or abuse our platform in the interest of non-genuine social gestures are really good at finding new ways to develop and implement their spam. It’s what they do. Over the years, we have been experimenting with various tools and techniques to combat issues like spambots and non-genuine social gestures. To understand more about our work, let’s dig into the details.</p><h2>Challenge: precise identification of spam</h2><p>Spammers often try to disguise themselves by attempting to use a platform in the same way a real person would. As spammers learn how to develop newer, better ways of mimicking the behavior(s) of real people, the boundary between spammers and real people becomes more and more blurred, which unfortunately means non-spammers may get flagged as spam. This is what is known as a false positive. </p><p>Tumblr’s goal has always been to find the delicate balance needed in making sure we are addressing spam as aggressively as possible without dramatically increasing the number of false positives.<br></p><h2>Challenge: evolving spam behavior</h2><p>Spam evolves. Spammers learn how to dodge new spam detection as soon as a platform starts using it. Therefore, relying on fixed logic is not sufficient. We instead approach the issue with a broad set of dynamic predictors, because the best way to combat spam is to utilize an adaptable detection methodology.<br></p><h2>Our work</h2><p>At the heart of all good spam detection efforts are machine learning algorithms. These algorithms are fed data from how real people use Tumblr and use this data to enhance our classification accuracy. Thanks to this historical data, when new spam or malicious patterns start occurring, we can react faster and identify spam with higher accuracy. Our newly launched model demonstrates 98% accuracy in determining if a user is a spammer.</p><p>The diagram below describes our spam classification pipeline:</p><p><br></p><figure data-orig-width=\"1043\" data-orig-height=\"1042\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/abfa4da6cedff4614c7acd3421b93ca6/306e9d23ad058177-76/s540x810/50ac6480fef80f9076a971de2d486d346e4a30e2.png\" alt=\"image\" data-orig-width=\"1043\" data-orig-height=\"1042\"></figure><p><br></p><p>Because every machine learning algorithm starts with data, we begin with a data management system that manages and controls data streams flowing around Tumblr. Every microsecond, the data management system records this data into log files. The system then periodically transfers these logs into our database, or Hadoop File System (HDFS). We then write numerous scalding jobs that focus on identifying what parts of this mountain of data are helpful when learning who’s a spammer. To start this process, we come up with specific hypotheses on some data sources and then collect the data to test these hypotheses in the next step.<br></p><p>How do we test if a data source is useful? After the scalding jobs finish, we analyze and visualize the data source to determine if the collected information can be turned into a signal. If the raw data itself is not enough, we might need to combine several signals to produce better results. The whole thing may sound a little hard to grasp for some. Maybe a pseudo example could help?<br></p><p>What if we found that many spammers really enjoy, say, insects and they were creating posts with a massive number of insect images? Based on this observation, we would hypothesize that the more pictures of insects someone’s blog has, the more likely it is spam. If we validated this hypothesis, we would then build a feature called InsectImageNums to track how many times a blog has posted an insect. But wait! What if we realized that the majority of our users post zero insect images? This becomes problematic because most of the data in InsectImageNums are zeroes, and those that are not zero have a very diverse range. Besides, some insects specialists or nature lovers do post images of insects, and we don’t want to classify these people as spam incorrectly. We would need to dig deeper and find a more detailed differentiator. Perhaps we see that it is rare for even the most bug-loving person to post more than five pictures of insects. We’d use that finding and create a new predictor called InsectsImageNumsGreaterThanFive. After this transformed feature is verified as accurate and useful, it is included in our predictor set.<br></p><p>When we have a verified and helpful set of working features, we then pass them to the machine learning models in Spark through Hive. Sometimes the aggregated size of the data is way too big for a single machine to process, so we use Spark and Spark ML interface to train our larger data-sets. <br></p><h2>What kinds of machine learning algorithms are we using? </h2><p>Supervised machine learning requires training labels, but these labels are only partially defined. With imperfect labels, we use iterative semi-supervised machine learning techniques to label instances closest to the classification decision boundary by checking our predictions with human agents. When human agents stop seeing false positives, we assume the model is crafted strong enough to be placed into HDFS. Through this semi-supervised approach, we achieve a 98% accuracy rate. We then upload the trained machine learning model to our database and periodically update it.</p><p>We save the spam probability score of new groups of users daily on Redis, an in-memory data structure store. This user spam probability score becomes a useful data validation point for our internal team that leads our spam moderation effort. In a way, the machine learning spam detection pipeline’s job is not to automatically suspend suspicious blogs, but to find blogs that have suspicious behaviors—like spreading viruses or malicious content across the internet. We want our community to enjoy a friendly environment on Tumblr, and we want to avoid as many false positives as possible. That’s why our overall pipeline involves both machine and human efforts.</p><h2>What’s next </h2><p>Spam detection work is never done. What works above may not work six months from now. Our goal is to evolve one step ahead of the spammers. Keep your eyes peeled here on <a href=\"https://tmblr.co/mLNLu9JDs4vF6ZeXLb15pqA\">@engineering</a> to stay up-to-date!</p><p>— Vincent Guo (<a href=\"https://tmblr.co/mIStrqle9ilsJGxr-B7KZtA\">@dat-coder</a>)</p></p>",
            "content": "<p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/dba590bc1feada4b417a9a8d01879ed6/306e9d23ad058177-8f/s540x810/96b11b168eff97ff91b80e252fff38b5fa9f4263.gif\" alt=\"image\" class=\"\"/></figure><p>As with all open platforms for user-generated content, Tumblr has been hit with a fair bit of spam. People who create spambots or abuse our platform in the interest of non-genuine social gestures are really good at finding new ways to develop and implement their spam. It&rsquo;s what they do. Over the years, we have been experimenting with various tools and techniques to combat issues like spambots and non-genuine social gestures. To understand more about our work, let&rsquo;s dig into the details.</p><h2>Challenge: precise identification of spam</h2><p>Spammers often try to disguise themselves by attempting to use a platform in the same way a real person would. As spammers learn how to develop newer, better ways of mimicking the behavior(s) of real people, the boundary between spammers and real people becomes more and more blurred, which unfortunately means non-spammers may get flagged as spam. This is what is known as a false positive.&nbsp;</p><p>Tumblr&rsquo;s goal has always been to find the delicate balance needed in making sure we are addressing spam as aggressively as possible without dramatically increasing the number of false positives.<br /></p><h2>Challenge: evolving spam behavior</h2><p>Spam evolves. Spammers learn how to dodge new spam detection as soon as a platform starts using it. Therefore, relying on fixed logic is not sufficient. We instead approach the issue with a broad set of dynamic predictors, because the best way to combat spam is to utilize an adaptable detection methodology.<br /></p><h2>Our work</h2><p>At the heart of all good spam detection efforts are machine learning algorithms. These algorithms are fed data from how real people use Tumblr and use this data to enhance our classification accuracy. Thanks to this historical data, when new spam or malicious patterns start occurring, we can react faster and identify spam with higher accuracy. Our newly launched model demonstrates 98% accuracy in determining if a user is a spammer.</p><p>The diagram below describes our spam classification pipeline:</p><p><br /></p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/abfa4da6cedff4614c7acd3421b93ca6/306e9d23ad058177-76/s540x810/50ac6480fef80f9076a971de2d486d346e4a30e2.png\" alt=\"image\" class=\"\"/></figure><p><br /></p><p>Because every machine learning algorithm starts with data, we begin with a data management system that manages and controls data streams flowing around Tumblr. Every microsecond, the data management system records this data into log files. The system then periodically transfers these logs into our database, or Hadoop File System (HDFS). We then write numerous scalding jobs that focus on identifying what parts of this mountain of data are helpful when learning who&rsquo;s a spammer. To start this process, we come up with specific hypotheses on some data sources and then collect the data to test these hypotheses in the next step.<br /></p><p>How do we test if a data source is useful? After the scalding jobs finish, we analyze and visualize the data source to determine if the collected information can be turned into a signal. If the raw data itself is not enough, we might need to combine several signals to produce better results. The whole thing may sound a little hard to grasp for some. Maybe a pseudo example could help?<br /></p><p>What if we found that many spammers really enjoy, say, insects and they were creating posts with a massive number of insect images? Based on this observation, we would hypothesize that the more pictures of insects someone&rsquo;s blog has, the more likely it is spam. If we validated this hypothesis, we would then build a feature called InsectImageNums to track how many times a blog has posted an insect. But wait! What if we realized that the majority of our users post zero insect images? This becomes problematic because most of the data in InsectImageNums are zeroes, and those that are not zero have a very diverse range. Besides, some insects specialists or nature lovers do post images of insects, and we don&rsquo;t want to classify these people as spam incorrectly. We would need to dig deeper and find a more detailed differentiator. Perhaps we see that it is rare for even the most bug-loving person to post more than five pictures of insects. We&rsquo;d use that finding and create a new predictor called InsectsImageNumsGreaterThanFive. After this transformed feature is verified as accurate and useful, it is included in our predictor set.<br /></p><p>When we have a verified and helpful set of working features, we then pass them to the machine learning models in Spark through Hive. Sometimes the aggregated size of the data is way too big for a single machine to process, so we use Spark and Spark ML interface to train our larger data-sets.&nbsp;<br /></p><h2>What kinds of machine learning algorithms are we using?&nbsp;</h2><p>Supervised machine learning requires training labels, but these labels are only partially defined. With imperfect labels, we use iterative semi-supervised machine learning techniques to label instances closest to the classification decision boundary by checking our predictions with human agents. When human agents stop seeing false positives, we assume the model is crafted strong enough to be placed into HDFS. Through this semi-supervised approach, we achieve a 98% accuracy rate. We then upload the trained machine learning model to our database and periodically update it.</p><p>We save the spam probability score of new groups of users daily on Redis, an in-memory data structure store. This user spam probability score becomes a useful data validation point for our internal team that leads our spam moderation effort. In a way, the machine learning spam detection pipeline&rsquo;s job is not to automatically suspend suspicious blogs, but to find blogs that have suspicious behaviors&mdash;like spreading viruses or malicious content across the internet. We want our community to enjoy a friendly environment on Tumblr, and we want to avoid as many false positives as possible. That&rsquo;s why our overall pipeline involves both machine and human efforts.</p><h2>What&rsquo;s next&nbsp;</h2><p>Spam detection work is never done. What works above may not work six months from now. Our goal is to evolve one step ahead of the spammers. Keep your eyes peeled here on <a href=\"https://tmblr.co/mLNLu9JDs4vF6ZeXLb15pqA\">@engineering</a> to stay up-to-date!</p><p>&mdash; Vincent Guo (<a href=\"https://tmblr.co/mIStrqle9ilsJGxr-B7KZtA\">@dat-coder</a>)</p></p>",
            "is_current_item": true,
            "is_root_item": true
          }
        ],
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1577065774,
            "blog_name": "antifeel",
            "blog_uuid": "t:0xmNe6L2FsgmrEB3VPdG6Q",
            "blog_url": "https://antifeel.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1576933538,
            "blog_name": "yourdark",
            "blog_uuid": "t:73npIWXO_-XzqkQAmnzNTg",
            "blog_url": "https://yourdark.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "Awesome !! For Reading and Understanding :)",
            "post_id": "189791024083",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1575391540,
            "blog_name": "teenagesaladpeachnickel",
            "blog_uuid": "t:xRXQvJxKOZFhw3OzfFayQg",
            "blog_url": "https://teenagesaladpeachnickel.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reply",
            "timestamp": 1575312825,
            "blog_name": "oneiridescent",
            "blog_uuid": "t:hs25dKWH22kal39AIm8P8A",
            "blog_url": "https://oneiridescent.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "Thank you for such sharing with technical details like HDFS etc.",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1575312556,
            "blog_name": "oneiridescent",
            "blog_uuid": "t:hs25dKWH22kal39AIm8P8A",
            "blog_url": "https://oneiridescent.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1575116312,
            "blog_name": "anasr7070",
            "blog_uuid": "t:dkUGQnayIBI_uXhkIYoS_g",
            "blog_url": "https://anasr7070.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "189388641505",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1574831101,
            "blog_name": "triglyceridee",
            "blog_uuid": "t:CBAsGmYhPze6S10U-py_4A",
            "blog_url": "https://triglyceridee.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1574804277,
            "blog_name": "bat-djan",
            "blog_uuid": "t:xAgISTcLJT5ggb1iQyf32g",
            "blog_url": "https://bat-djan.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1574803753,
            "blog_name": "ashbless",
            "blog_uuid": "t:FTioX3ExqBWyACMOcVyYaA",
            "blog_url": "https://ashbless.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reply",
            "timestamp": 1573544750,
            "blog_name": "theresonanceofsouls",
            "blog_uuid": "t:YCVFRxYmx6mESei1IPSL1g",
            "blog_url": "https://theresonanceofsouls.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "reply_text": "What about when people manually report it? Does that actually get reviewed, or just to make it look like it does?",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "reblog",
            "timestamp": 1572935249,
            "blog_name": "spillingthefarm",
            "blog_uuid": "t:H0ua01ItLslBz09MpNbzXA",
            "blog_url": "https://spillingthefarm.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "188828515770",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1572312943,
            "blog_name": "spillingthefarm",
            "blog_uuid": "t:H0ua01ItLslBz09MpNbzXA",
            "blog_url": "https://spillingthefarm.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1572086933,
            "blog_name": "rainbowlight100",
            "blog_uuid": "t:q7Ienh9NLpUb4SJx18bj5w",
            "blog_url": "https://rainbowlight100.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1571316965,
            "blog_name": "rodatravel",
            "blog_uuid": "t:zWcAhJfoDM06maUfoDiwjQ",
            "blog_url": "https://rodatravel.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1571181831,
            "blog_name": "haaeeu",
            "blog_uuid": "t:qlEYkT-RdC0gkQBrto6DCg",
            "blog_url": "https://haaeeu.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1570891493,
            "blog_name": "mocubes",
            "blog_uuid": "t:IChboICh7s-GmaW8uogUzg",
            "blog_url": "https://mocubes.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570135953,
            "blog_name": "freyajo3177",
            "blog_uuid": "t:9LCrPL_dZZAVzpsVRKYgmw",
            "blog_url": "https://freyajo3177.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570055669,
            "blog_name": "hux-tops-sorry",
            "blog_uuid": "t:WsgP8AwzLsswDG7xPN_pXA",
            "blog_url": "https://hux-tops-sorry.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570020385,
            "blog_name": "frankieduberry",
            "blog_uuid": "t:gIKxhlwSsFVuMyvyt7bpXQ",
            "blog_url": "https://frankieduberry.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1569800849,
            "blog_name": "thatdumbasswench",
            "blog_uuid": "t:UU_brb7mEbcnr1t4RGUcyg",
            "blog_url": "https://thatdumbasswench.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1569385745,
            "blog_name": "coralapricotllamaoperator",
            "blog_uuid": "t:rsNVGf0yK4BG5Fql0x_yBA",
            "blog_url": "https://coralapricotllamaoperator.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1569362167,
            "blog_name": "withgaby",
            "blog_uuid": "t:P_RrgXciGCrATtZAm7B0bg",
            "blog_url": "https://withgaby.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1569318144,
            "blog_name": "daniel-b-ela-11-blog",
            "blog_uuid": "t:Gbb9MU4HNRX7Y12NtJAMMA",
            "blog_url": "https://daniel-b-ela-11-blog.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1569305371,
            "blog_name": "harpersandoval092",
            "blog_uuid": "t:042IL6EAOoGcWZwcRTgZJQ",
            "blog_url": "https://harpersandoval092.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1569276461,
            "blog_name": "alex0two",
            "blog_uuid": "t:7VQwPTcur8RLCwixu9q8dw",
            "blog_url": "https://alex0two.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1569256047,
            "blog_name": "lostdog594",
            "blog_uuid": "t:aDyOah5jj45wJTZeMX5yTw",
            "blog_url": "https://lostdog594.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1569076469,
            "blog_name": "hyperbola-worldl",
            "blog_uuid": "t:nCaqst9UDidcCPvfd9epSw",
            "blog_url": "https://hyperbola-worldl.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1568821095,
            "blog_name": "worldiary",
            "blog_uuid": "t:VYtpXa-A_-IVkG7Crx0lsQ",
            "blog_url": "https://worldiary.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "187799969972",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1568694538,
            "blog_name": "omgblackvolta",
            "blog_uuid": "t:58V5PUfTa_3cs3XbF8RsFA",
            "blog_url": "https://omgblackvolta.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reply",
            "timestamp": 1568687546,
            "blog_name": "casperford92",
            "blog_uuid": "t:bfjM6h5uGZzxzuFhqQcVMA",
            "blog_url": "https://casperford92.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "reply_text": "The can image made me gag.",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1568611768,
            "blog_name": "codinget",
            "blog_uuid": "t:ClCFmZZlX7ptsEtDfav9rw",
            "blog_url": "https://codinget.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1568429378,
            "blog_name": "wtaby",
            "blog_uuid": "t:TEbVCBR9PTLv29AS_SxwBQ",
            "blog_url": "https://wtaby.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1568239048,
            "blog_name": "shadowywagonbearghost",
            "blog_uuid": "t:3m1XuSJ3luTkXl0So10rzQ",
            "blog_url": "https://shadowywagonbearghost.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1568176016,
            "blog_name": "cosmicchemicals",
            "blog_uuid": "t:-UkMouh2wMhwMsSDVOig8g",
            "blog_url": "https://cosmicchemicals.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1568149802,
            "blog_name": "lesbodisaster",
            "blog_uuid": "t:4bf22mUcKwDZQgHOaYfwIQ",
            "blog_url": "https://lesbodisaster.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1567892751,
            "blog_name": "am0r-rejeitado",
            "blog_uuid": "t:pg-SneXBZrcMyf-fY3UeJg",
            "blog_url": "https://am0r-rejeitado.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1567884545,
            "blog_name": "red--thedragon",
            "blog_uuid": "t:oc5lj8JJlxMlj6D4ofXsMQ",
            "blog_url": "https://red--thedragon.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1567577932,
            "blog_name": "daniellesteenbrink",
            "blog_uuid": "t:IeZ0UrdZTaHfTvc4D5XCFA",
            "blog_url": "https://daniellesteenbrink.nl/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "187482957282",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1567577930,
            "blog_name": "princessgeekdaantje",
            "blog_uuid": "t:K1B2kDTlStOJtWvaWexBdA",
            "blog_url": "https://princessgeekdaantje.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1567444941,
            "blog_name": "jerrismith",
            "blog_uuid": "t:kCwfEcPoduHtu8wpwjCOhw",
            "blog_url": "https://jerrismith.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1566563106,
            "blog_name": "brodoe61",
            "blog_uuid": "t:HjRMc1rA_GcSOpa0mC-rcw",
            "blog_url": "https://brodoe61.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1566527259,
            "blog_name": "alittlebitgoesalongway",
            "blog_uuid": "t:xenhaEKbJbOufnID1PlKsQ",
            "blog_url": "https://alittlebitgoesalongway.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 186469641253,
        "post_url": "https://engineering.tumblr.com/post/186469641253/docker-registry-pruner-release",
        "slug": "docker-registry-pruner-release",
        "date": "2019-07-22 15:00:31 GMT",
        "timestamp": 1563807631,
        "state": "published",
        "format": "html",
        "reblog_key": "UHFEZDJv",
        "tags": [ "engineering", "kubernetes", "docker" ],
        "short_url": "https://tmblr.co/ZI3nWx2jgTEmb",
        "summary": "Docker Registry Pruner release!",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 24,
        "title": "Docker Registry Pruner release!",
        "body": "<p><i>tl;dr</i>: We are open-sourcing a new tool to apply retention policies to Docker images stored in a Docker Registry: ✨<a href=\"https://github.com/tumblr/docker-registry-pruner\">tumblr/docker-registry-pruner</a>✨.</p><p>At Tumblr, we have been leaning into containerization of workloads for a number of years. One of the most critical components for a Docker-based build and deployment pipeline is the <a href=\"https://docs.docker.com/registry/\">Registry</a>. Over the past 5+ years, we have built a huge amount of Docker containers. We are constantly shipping new updates and building new systems that deprecate others. Some of our repos can have 100s of commits a day, each creating a new image via our CI/CD pipeline. Because of this rapid churn, we create a ton of Docker images; some of them are in production, others have been deprecated and are no longer in use. These images accumulate in our Registry, eating up storage space and slowing down Registry metadata operations.</p><p>Images can range from a few hundred MB to a few GB; over time, this can really add up to serious storage utilization. In order to reclaim space and keep the working set of images in our registry bounded, we created, and are now open-sourcing, the ✨<a href=\"https://github.com/tumblr/docker-registry-pruner\">tumblr/docker-registry-pruner</a>✨! This tool allows you to specify retention policies for images in an <a href=\"https://docs.docker.com/registry/spec/api/\">API v2 compatible registry</a>. Through a declarative configuration, the tool will match images and tags via regex, and then retain images by applying retention policies. Example policies could be something like keeping the last N days of images, keeping the latest N images, or keeping the last N versions (semantically sorted via <a href=\"https://semver.org/\">semantic versioning</a>).</p><h2>Configuration Format</h2><p>A more precise definition of how the tool allows you to select images, tags, and retention policies is below. A config is made up of registry connection details and a list of rules. Each rule is a combination of at least 1 selector and an action.</p><p><b>Selectors</b></p><p>A selector is a predicate that images must satisfy to be considered by the <code>Action</code> for deletion.</p><ul><li><code>repos</code>: a list of repositories to apply this rule to. This is literal string matching, not regex. (i.e. <code>tumblr/someservice</code>)</li>\n<li><code>labels</code> is a map of Docker labels that must be present on the Manifest. You can set these in your Dockerfiles with <code>LABEL foo=bar</code>. This is useful to create blanket rules for image retention that allow image owners to opt in to cleanups on their own.</li>\n<li><code>match_tags</code>: a list of regular expressions. Any matching image will have the rule action evaluated against it (i.e. <code>^v\\d+</code>)</li>\n<li><code>ignore_tags</code>: a list of regular expressions. Any matching image will explicitly not be evaluated, even if it would have matched <code>match_tags</code></li>\n</ul><p>NOTE: the <code>^latest$</code> tag is always implicitly inherited into <code>ignore_tags</code>.</p><p><b>Actions</b></p><p>You must provide one action, either <code>keep_versions</code>, <code>keep_recent</code>, or <code>keep_days</code>. Images that match the selector and fail the action predicate will be marked for deletion.</p><ul><li><code>keep_versions</code>: Retain the latest N versions of this image, as defined by semantic version ordering. This requires that your tags use <a href=\"https://semver.org/\">semantic versioning</a>.</li>\n<li><code>keep_days</code>: Retain the only images that have been created in the last N days, ordered by image modified date.</li>\n<li><code>keep_recent</code>: Retain the latest N images, ordered by the image&rsquo;s last modified date.</li>\n</ul><p>You can see the <a href=\"https://github.com/tumblr/docker-registry-pruner/blob/master/docs/config.md\">documentation</a> for more details, or check out the <a href=\"https://github.com/tumblr/docker-registry-pruner/blob/master/config/examples/example.yaml\">example.yaml</a> configuration!</p><p>Tumblr uses this tool to (via Kubernetes CronJob) periodically scan and prune unneeded images from a variety of Docker repos. Hopefully this tool will help other organizations manage the sprawl of Docker images caused by rapid development and CI/CD, as well!</p>",
        "reblog": {
          "comment": "<p><i>tl;dr</i>: We are open-sourcing a new tool to apply retention policies to Docker images stored in a Docker Registry: ✨<a href=\"https://github.com/tumblr/docker-registry-pruner\">tumblr/docker-registry-pruner</a>✨.</p><p>At Tumblr, we have been leaning into containerization of workloads for a number of years. One of the most critical components for a Docker-based build and deployment pipeline is the <a href=\"https://docs.docker.com/registry/\">Registry</a>. Over the past 5+ years, we have built a huge amount of Docker containers. We are constantly shipping new updates and building new systems that deprecate others. Some of our repos can have 100s of commits a day, each creating a new image via our CI/CD pipeline. Because of this rapid churn, we create a ton of Docker images; some of them are in production, others have been deprecated and are no longer in use. These images accumulate in our Registry, eating up storage space and slowing down Registry metadata operations.</p><p>Images can range from a few hundred MB to a few GB; over time, this can really add up to serious storage utilization. In order to reclaim space and keep the working set of images in our registry bounded, we created, and are now open-sourcing, the ✨<a href=\"https://github.com/tumblr/docker-registry-pruner\">tumblr/docker-registry-pruner</a>✨! This tool allows you to specify retention policies for images in an <a href=\"https://docs.docker.com/registry/spec/api/\">API v2 compatible registry</a>. Through a declarative configuration, the tool will match images and tags via regex, and then retain images by applying retention policies. Example policies could be something like keeping the last N days of images, keeping the latest N images, or keeping the last N versions (semantically sorted via <a href=\"https://semver.org/\">semantic versioning</a>).</p><h2>Configuration Format</h2><p>A more precise definition of how the tool allows you to select images, tags, and retention policies is below. A config is made up of registry connection details and a list of rules. Each rule is a combination of at least 1 selector and an action.</p><p><b>Selectors</b></p><p>A selector is a predicate that images must satisfy to be considered by the <code>Action</code> for deletion.</p><ul><li><code>repos</code>: a list of repositories to apply this rule to. This is literal string matching, not regex. (i.e. <code>tumblr/someservice</code>)</li>\n<li><code>labels</code> is a map of Docker labels that must be present on the Manifest. You can set these in your Dockerfiles with <code>LABEL foo=bar</code>. This is useful to create blanket rules for image retention that allow image owners to opt in to cleanups on their own.</li>\n<li><code>match_tags</code>: a list of regular expressions. Any matching image will have the rule action evaluated against it (i.e. <code>^v\\d+</code>)</li>\n<li><code>ignore_tags</code>: a list of regular expressions. Any matching image will explicitly not be evaluated, even if it would have matched <code>match_tags</code></li>\n</ul><p>NOTE: the <code>^latest$</code> tag is always implicitly inherited into <code>ignore_tags</code>.</p><p><b>Actions</b></p><p>You must provide one action, either <code>keep_versions</code>, <code>keep_recent</code>, or <code>keep_days</code>. Images that match the selector and fail the action predicate will be marked for deletion.</p><ul><li><code>keep_versions</code>: Retain the latest N versions of this image, as defined by semantic version ordering. This requires that your tags use <a href=\"https://semver.org/\">semantic versioning</a>.</li>\n<li><code>keep_days</code>: Retain the only images that have been created in the last N days, ordered by image modified date.</li>\n<li><code>keep_recent</code>: Retain the latest N images, ordered by the image’s last modified date.</li>\n</ul><p>You can see the <a href=\"https://github.com/tumblr/docker-registry-pruner/blob/master/docs/config.md\">documentation</a> for more details, or check out the <a href=\"https://github.com/tumblr/docker-registry-pruner/blob/master/config/examples/example.yaml\">example.yaml</a> configuration!</p><p>Tumblr uses this tool to (via Kubernetes CronJob) periodically scan and prune unneeded images from a variety of Docker repos. Hopefully this tool will help other organizations manage the sprawl of Docker images caused by rapid development and CI/CD, as well!</p>",
          "tree_html": ""
        },
        "trail": [
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "186469641253" },
            "content_raw": "<p><i>tl;dr</i>: We are open-sourcing a new tool to apply retention policies to Docker images stored in a Docker Registry: ✨<a href=\"https://github.com/tumblr/docker-registry-pruner\">tumblr/docker-registry-pruner</a>✨.</p><p>At Tumblr, we have been leaning into containerization of workloads for a number of years. One of the most critical components for a Docker-based build and deployment pipeline is the <a href=\"https://docs.docker.com/registry/\">Registry</a>. Over the past 5+ years, we have built a huge amount of Docker containers. We are constantly shipping new updates and building new systems that deprecate others. Some of our repos can have 100s of commits a day, each creating a new image via our CI/CD pipeline. Because of this rapid churn, we create a ton of Docker images; some of them are in production, others have been deprecated and are no longer in use. These images accumulate in our Registry, eating up storage space and slowing down Registry metadata operations.</p><p>Images can range from a few hundred MB to a few GB; over time, this can really add up to serious storage utilization. In order to reclaim space and keep the working set of images in our registry bounded, we created, and are now open-sourcing, the ✨<a href=\"https://github.com/tumblr/docker-registry-pruner\">tumblr/docker-registry-pruner</a>✨! This tool allows you to specify retention policies for images in an <a href=\"https://docs.docker.com/registry/spec/api/\">API v2 compatible registry</a>. Through a declarative configuration, the tool will match images and tags via regex, and then retain images by applying retention policies. Example policies could be something like keeping the last N days of images, keeping the latest N images, or keeping the last N versions (semantically sorted via <a href=\"https://semver.org/\">semantic versioning</a>).</p><h2>Configuration Format</h2><p>A more precise definition of how the tool allows you to select images, tags, and retention policies is below. A config is made up of registry connection details and a list of rules. Each rule is a combination of at least 1 selector and an action.</p><p><b>Selectors</b></p><p>A selector is a predicate that images must satisfy to be considered by the <code>Action</code> for deletion.</p><ul><li><code>repos</code>: a list of repositories to apply this rule to. This is literal string matching, not regex. (i.e. <code>tumblr/someservice</code>)</li>\n<li><code>labels</code> is a map of Docker labels that must be present on the Manifest. You can set these in your Dockerfiles with <code>LABEL foo=bar</code>. This is useful to create blanket rules for image retention that allow image owners to opt in to cleanups on their own.</li>\n<li><code>match_tags</code>: a list of regular expressions. Any matching image will have the rule action evaluated against it (i.e. <code>^v\\d+</code>)</li>\n<li><code>ignore_tags</code>: a list of regular expressions. Any matching image will explicitly not be evaluated, even if it would have matched <code>match_tags</code></li>\n</ul><p>NOTE: the <code>^latest$</code> tag is always implicitly inherited into <code>ignore_tags</code>.</p><p><b>Actions</b></p><p>You must provide one action, either <code>keep_versions</code>, <code>keep_recent</code>, or <code>keep_days</code>. Images that match the selector and fail the action predicate will be marked for deletion.</p><ul><li><code>keep_versions</code>: Retain the latest N versions of this image, as defined by semantic version ordering. This requires that your tags use <a href=\"https://semver.org/\">semantic versioning</a>.</li>\n<li><code>keep_days</code>: Retain the only images that have been created in the last N days, ordered by image modified date.</li>\n<li><code>keep_recent</code>: Retain the latest N images, ordered by the image’s last modified date.</li>\n</ul><p>You can see the <a href=\"https://github.com/tumblr/docker-registry-pruner/blob/master/docs/config.md\">documentation</a> for more details, or check out the <a href=\"https://github.com/tumblr/docker-registry-pruner/blob/master/config/examples/example.yaml\">example.yaml</a> configuration!</p><p>Tumblr uses this tool to (via Kubernetes CronJob) periodically scan and prune unneeded images from a variety of Docker repos. Hopefully this tool will help other organizations manage the sprawl of Docker images caused by rapid development and CI/CD, as well!</p>",
            "content": "<p><i>tl;dr</i>: We are open-sourcing a new tool to apply retention policies to Docker images stored in a Docker Registry: &#10024;<a href=\"https://github.com/tumblr/docker-registry-pruner\">tumblr/docker-registry-pruner</a>&#10024;.</p><p>At Tumblr, we have been leaning into containerization of workloads for a number of years. One of the most critical components for a Docker-based build and deployment pipeline is the <a href=\"https://docs.docker.com/registry/\">Registry</a>. Over the past 5+ years, we have built a huge amount of Docker containers. We are constantly shipping new updates and building new systems that deprecate others. Some of our repos can have 100s of commits a day, each creating a new image via our CI/CD pipeline. Because of this rapid churn, we create a ton of Docker images; some of them are in production, others have been deprecated and are no longer in use. These images accumulate in our Registry, eating up storage space and slowing down Registry metadata operations.</p><p>Images can range from a few hundred MB to a few GB; over time, this can really add up to serious storage utilization. In order to reclaim space and keep the working set of images in our registry bounded, we created, and are now open-sourcing, the &#10024;<a href=\"https://github.com/tumblr/docker-registry-pruner\">tumblr/docker-registry-pruner</a>&#10024;! This tool allows you to specify retention policies for images in an <a href=\"https://docs.docker.com/registry/spec/api/\">API v2 compatible registry</a>. Through a declarative configuration, the tool will match images and tags via regex, and then retain images by applying retention policies. Example policies could be something like keeping the last N days of images, keeping the latest N images, or keeping the last N versions (semantically sorted via <a href=\"https://semver.org/\">semantic versioning</a>).</p><h2>Configuration Format</h2><p>A more precise definition of how the tool allows you to select images, tags, and retention policies is below. A config is made up of registry connection details and a list of rules. Each rule is a combination of at least 1 selector and an action.</p><p><b>Selectors</b></p><p>A selector is a predicate that images must satisfy to be considered by the <code>Action</code> for deletion.</p><ul><li><code>repos</code>: a list of repositories to apply this rule to. This is literal string matching, not regex. (i.e. <code>tumblr/someservice</code>)</li>\n<li><code>labels</code> is a map of Docker labels that must be present on the Manifest. You can set these in your Dockerfiles with <code>LABEL foo=bar</code>. This is useful to create blanket rules for image retention that allow image owners to opt in to cleanups on their own.</li>\n<li><code>match_tags</code>: a list of regular expressions. Any matching image will have the rule action evaluated against it (i.e. <code>^v\\d+</code>)</li>\n<li><code>ignore_tags</code>: a list of regular expressions. Any matching image will explicitly not be evaluated, even if it would have matched <code>match_tags</code></li>\n</ul><p>NOTE: the <code>^latest$</code> tag is always implicitly inherited into <code>ignore_tags</code>.</p><p><b>Actions</b></p><p>You must provide one action, either <code>keep_versions</code>, <code>keep_recent</code>, or <code>keep_days</code>. Images that match the selector and fail the action predicate will be marked for deletion.</p><ul><li><code>keep_versions</code>: Retain the latest N versions of this image, as defined by semantic version ordering. This requires that your tags use <a href=\"https://semver.org/\">semantic versioning</a>.</li>\n<li><code>keep_days</code>: Retain the only images that have been created in the last N days, ordered by image modified date.</li>\n<li><code>keep_recent</code>: Retain the latest N images, ordered by the image&rsquo;s last modified date.</li>\n</ul><p>You can see the <a href=\"https://github.com/tumblr/docker-registry-pruner/blob/master/docs/config.md\">documentation</a> for more details, or check out the <a href=\"https://github.com/tumblr/docker-registry-pruner/blob/master/config/examples/example.yaml\">example.yaml</a> configuration!</p><p>Tumblr uses this tool to (via Kubernetes CronJob) periodically scan and prune unneeded images from a variety of Docker repos. Hopefully this tool will help other organizations manage the sprawl of Docker images caused by rapid development and CI/CD, as well!</p>",
            "is_current_item": true,
            "is_root_item": true
          }
        ],
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1572216246,
            "blog_name": "datamattsson",
            "blog_uuid": "t:fDskL1HiUMJhhT4Bb_YQgg",
            "blog_url": "https://datamattsson.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1572086938,
            "blog_name": "rainbowlight100",
            "blog_uuid": "t:q7Ienh9NLpUb4SJx18bj5w",
            "blog_url": "https://rainbowlight100.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570659681,
            "blog_name": "alex0two",
            "blog_uuid": "t:7VQwPTcur8RLCwixu9q8dw",
            "blog_url": "https://alex0two.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1568469764,
            "blog_name": "snyperchick62",
            "blog_uuid": "t:6B884lUn1C_sLS_J7KoAoA",
            "blog_url": "https://snyperchick62.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1567921608,
            "blog_name": "nimbosa",
            "blog_uuid": "t:19HpyrhLGZ6dIWGxoZOldA",
            "blog_url": "https://nimbosa.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1566527590,
            "blog_name": "alittlebitgoesalongway",
            "blog_uuid": "t:xenhaEKbJbOufnID1PlKsQ",
            "blog_url": "https://alittlebitgoesalongway.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1565403376,
            "blog_name": "tomaster1",
            "blog_uuid": "t:D6l5HNyfkESA0vJ_El4L4A",
            "blog_url": "https://tomaster1.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1563867965,
            "blog_name": "ravinskiy",
            "blog_uuid": "t:4tZZFv56FWM8Dcu2IaaTxw",
            "blog_url": "https://ravinskiy.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1563856091,
            "blog_name": "designpatternpirate",
            "blog_uuid": "t:maLHAce43iqGUZhFVwMfhQ",
            "blog_url": "https://designpatternpirate.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1563854654,
            "blog_name": "michaelbenedict",
            "blog_uuid": "t:9xviQckaG8u2_pOTTNCXlA",
            "blog_url": "https://benedict.zosima.org/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "186484453322",
            "reblog_parent_blog_name": "pipefail"
          },
          {
            "type": "reblog",
            "timestamp": 1563826973,
            "blog_name": "beesinmysystemd",
            "blog_uuid": "t:s33SEq4Th2WXDRmWZGP5Xg",
            "blog_url": "https://beesinmysystemd.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "186475379709",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1563821696,
            "blog_name": "redcloud",
            "blog_uuid": "t:AXkhpNQrK1ZipBuvIhRznw",
            "blog_url": "https://redcloud.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1563814037,
            "blog_name": "nagaino",
            "blog_uuid": "t:gRFtLTiv-FFqHVktKgVIcQ",
            "blog_url": "https://nagaino.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1563812251,
            "blog_name": "killzoomer",
            "blog_uuid": "t:MlqVLPWKN987JtxrGY0k7g",
            "blog_url": "https://killzoomer.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "186470991559",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1563809722,
            "blog_name": "breadstyx",
            "blog_uuid": "t:I4AIgflpBs0pHeYlowWAaA",
            "blog_url": "https://breadstyx.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1563809014,
            "blog_name": "pipefail",
            "blog_uuid": "t:snvdkTsd6P3iKwsHwUme6g",
            "blog_url": "https://tumblr.pipefail.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "I did a thing!",
            "post_id": "186470054541",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1563808943,
            "blog_name": "pipefail",
            "blog_uuid": "t:snvdkTsd6P3iKwsHwUme6g",
            "blog_url": "https://tumblr.pipefail.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1563808920,
            "blog_name": "etucker",
            "blog_uuid": "t:-zulXd6oSW1TZHpnehAA_w",
            "blog_url": "https://etucker.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1563808115,
            "blog_name": "sksztk",
            "blog_uuid": "t:S-aj2J0eEMa56NMY9J6LTA",
            "blog_url": "https://sksztk.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1563807964,
            "blog_name": "pernoctatious-charrette",
            "blog_uuid": "t:acmyP1udOacTwTQUkchXrA",
            "blog_url": "https://pernoctatious-charrette.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1563807904,
            "blog_name": "justhavetofeelthewaves",
            "blog_uuid": "t:8EJKhQZ2EdqEEUSdCMiImg",
            "blog_url": "https://justhavetofeelthewaves.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1563807860,
            "blog_name": "davek",
            "blog_uuid": "t:fV--MQ8DcEPGL9wO77hxug",
            "blog_url": "https://davek.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "posted",
            "timestamp": 1563807631,
            "blog_name": "engineering",
            "blog_uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
            "blog_url": "https://engineering.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 185729793294,
        "post_url": "https://engineering.tumblr.com/post/185729793294/my-engineering-career-at-tumblr-so-far",
        "slug": "my-engineering-career-at-tumblr-so-far",
        "date": "2019-06-20 18:00:05 GMT",
        "timestamp": 1561053605,
        "state": "published",
        "format": "html",
        "reblog_key": "VJIEIfX7",
        "tags": [ "engineering", "careers" ],
        "short_url": "https://tmblr.co/ZI3nWx2i_MxqE",
        "summary": "My Engineering Career at Tumblr So Far",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 198,
        "title": "My Engineering Career at Tumblr So Far",
        "body": "<p><a href=\"https://cyle.tumblr.com/post/185704749600/my-engineering-career-at-tumblr-so-far\" class=\"tumblr_blog\">cyle</a>:</p><blockquote>\n<p>I’ve been at Tumblr for four years as of last month, and in those four years I’ve moved from Engineer to Senior Engineer to Principal Engineer. Everyone’s journey along the path of their career is different, and engineering is a little different everywhere, but this is my story. My hope is that it provides some insight into Tumblr’s career ladder and some themes that are universal across engineering cultures at other companies.</p>\n<h2>Prelude: Full Stack Madness</h2>\n<p>Before I joined Tumblr, I worked for ten (!!!) years as a full stack developer at a college, mostly alone. I’d been writing code (poorly) and immersing myself in tech since I was a kid, so I felt pretty confident as a teenager taking a job building websites for my college.</p>\n<p>Over the course of that ten-year job, I went from writing terrible PHP and Javascript to performing the ultra full stack of work: rack-mounting servers, installing operating systems on them, splitting them up into application servers and database servers and whatnot, managing them often, writing application logic to run on and across them, designing databases (relational and NoSQL), designing user interfaces, bridging lots of different APIs, and scaling my applications to meet greater demands. Way too much for one person to do, really.</p>\n<p>It was an opportunity for me to get my hands on all facets of building things for the internet. It afforded ample time to figure out what felt best for me, which turned out to be backend application development. I probably waited way too long before moving on to my next job, which luckily became Tumblr. When I did get the job at Tumblr, I had two main goals: to work as a component of a team rather than alone, and to focus on backend engineering.</p>\n<h2>Being heads-down as an Engineer</h2>\n<p>When I joined Tumblr, I came on as an Engineer. It’s technically a step above “entry level” at most companies, and it was the baseline for new engineering hires at Tumblr at the time. Someone at the Engineer level at Tumblr is expected to be a team member who focuses on a certain technical domain, such as databases, SRE, iOS, Android, Javascript, PHP, Scala, etc. For me, in product engineering, this roughly translated into being either a frontend engineer (iOS, Android, Javascript) or a backend engineer (PHP, Scala). When I started, I did a little bit of both since I had experience with both, but over the course of my first year I shed a lot of my frontend knowledge in favor of deepening my backend knowledge.</p>\n<p>The Engineer level usually means you’re someone who is relatively “heads-down”, being given tickets to complete during <a href=\"https://www.atlassian.com/agile/scrum/sprints\">sprints</a> which contribute to a larger project that your team is working on. That was me — at the time I joined we were working on finishing up the <a href=\"https://staff.tumblr.com/post/109422757605/big-update-tumblr\">“new” post forms on the web</a>, and my team was about to start building <a href=\"https://staff.tumblr.com/post/132943903090/you-asked-for-it-here-it-comes-messaging-real\">blog-to-blog instant messaging</a>. I worked with senior engineers to flesh out the architecture for messaging, and through that I learned how to build something that seemed simple to me but became very complex at scale. I churned through a lot of tickets and wrote a lot of code, almost entirely feature logic, rarely touching anything outside of my domain.</p>\n<p>While I didn’t spend a lot of time in meetings or making decisions, I did get to have a voice in pretty much everything my team worked on, and I felt empowered by my manager to speak my mind across the company. During my first year that actually got me in trouble, as I become a bit overconfident in my own opinion, and I didn’t have the experience necessary to back much of it up. That was a good learning experience for me; it taught me how to pick my battles and when to use my voice and speak my mind. Sometimes saying nothing is the best option, and it’s important to keep yourself mindful of what your voice is actually contributing.</p>\n<h2>Opening up avenues into Senior Engineering</h2>\n<p>After my first year I started feeling very familiar with Tumblr’s engineering practices and a couple of lucky opportunities appeared. The first was being asked to act as a pseudo-member of the Core PHP team since they were understaffed, which broadened my responsibilities and gave me a reason to start digging around in our framework-level code. It afforded me time to learn a lot about our framework level and our design patterns, and I made some fundamental changes to how the Tumblr PHP app works. More importantly, it almost doubled the amount of code I was expected to review, much of it outside of my previous work as a product engineer.</p>\n<p>Around that time, the senior engineers I was working with on messaging moved on from the project, leaving pretty much just me to finish the work a few months before we launched. Because of this, almost all of the PHP logic that exists for messaging on Tumblr is my code, and I became the go-to authority on how messaging works under the hood.</p>\n<p>After launch, we continued to iterate on messaging features. <a href=\"https://staff.tumblr.com/post/147398828165/now-you-can-send-pictures-in-messaging-how-open-a\">A few of these iterations</a> required heavy refactors of a system that was humming along, being used by millions of people. I learned how to make dramatic changes without anyone who was using the product noticing, and I started being one of the engineers who’d help others do the same for their projects.</p>\n<p>One example of that kind of work was <a href=\"https://staff.tumblr.com/post/141845074600/i-like-replies-and-i-cannot-lie\">the Replies relaunch</a>, which was outside my normal workload, but I lent a hand to help make sure it met the deadline we had set for ourselves. I also took the engineering lead on the infamous <a href=\"https://thisisdecision2016.tumblr.com/\">Lizard Election of 2016</a>, coordinating work among designers, web engineers, iOS engineers, and Android engineers, while also building most of the backend for it myself. It was an extremely ambitious project that we put together in a very short period time, all for one absurd April Fools joke. The community loved it (or was extremely confused by it), and it provided a lot of insight for me into what it’d be like to lead cross-team efforts.</p>\n<p>I also spent a lot of my first two years participating in Breaking Incidents — at Tumblr these are usually sudden high-impact problems that need to be fixed quickly, usually by someone who is on call. I probably learned the most about Tumblr’s features, systems, and edge cases while helping fix these problems. Sometimes these incidents were small, like just a user interface bug that had been accidentally deployed, and sometimes these incidents were huge, such as entire database clusters failing. Jumping in and helping to quickly resolve these incidents showed that I wasn’t afraid to get my hands dirty.</p>\n<p>All of this additional responsibility meant I started going to more meetings and talking to more people across the company, as I had carved out a space that I felt was my own. It was really difficult and uncomfortable a lot of the time, and I made mistakes that broke things, but fixing them, persevering, and learning not to repeat them showed how much I was ready for a more senior role. I got promoted to Senior Engineer and stayed at that level for two and a half years, with a brief interlude as a Staff Engineer.</p>\n<h2>Raising the stakes as a Senior Engineer and then Staff Engineer</h2>\n<p>As a Senior Engineer, I felt much more empowered to take on difficult tasks, as I had a couple of major, successful projects behind me. The feeling of being uncomfortable became comfortable for me; I got used to being in a position where I didn’t have a ready solution to a problem, and I was happy to say so, but I felt confident I could figure it out by drawing on my past experience and doing some research.</p>\n<p>I started being consulted by other teams when they’d be scoping out new projects, and I had a good sense for why a project could be difficult or easy. I also started going to meetings that had nothing to do with my normal job responsibilities, as I felt that it was important to stay on top of what was happening outside of those responsibilities. With only a couple hundred people at the company, it felt very feasible to know what was going on in most places.</p>\n<p>It was around a year into being a Senior Engineer that I was invited to become a Staff Engineer, which at the time was parallel with the Senior Engineer role, having only a slightly different set of expectations. Being a Staff Engineer meant more talking about engineering problems and processes, more reviewing other peoples’ code and ideas, less time writing my own code. Usually this is actually its own dedicated step along the career path, as it typically means you’re some kind of dedicated domain owner in a much larger organization of engineers. I fell into it naturally, as I was already doing a lot of the kind of work it expected, which highlighted to me that the best career moves are often the obvious ones.</p>\n<p>However, over time it began to feel like Staff Engineer was a role that would be more practical at a larger company of hundreds or thousands of engineers, and actually impractical at Tumblr’s size of just a hundred or so engineers. To me, many of the responsibilities of our Staff Engineer group felt like they should be that of any Senior Engineer or Managers/Directors. Many of our tasks involved shepherding other engineers and providing insight into how to fix hard problems, and defining processes that affected most engineers.</p>\n<p>A lot of those processes were very administrative and felt like they’d be more enforceable if they came from someone at the executive level. At times, Staff Engineering also felt like the dreaded “ivory tower” approach to engineering, in which a select few get to decide what’s best for everyone, which I strongly disagree with. I hopped out of the Staff Engineer role after nine months or so, and the Staff Engineering group was dissolved shortly after I left it.</p>\n<h2>Becoming More Independent</h2>\n<p>After spending so much time spreading myself around the company, I gradually shifted out of being tied to a single team and I became a kind of “floater” among the product engineering teams. I started tackling bigger problems with our legacy systems (such as getting them GDPR compliant) and helping shape the architecture of new features (such as <a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\">the Neue Post Format</a>). I had become the same kind of engineer as those who had helped me build messaging, acting more as someone who isn’t afraid to get their hands dirty contending with the obscure parts of a ten year old codebase. It was around this time that I wrote <a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\">How I Code Now</a> and <a href=\"https://engineering.tumblr.com/post/170040992289/how-i-review-code\">How I Review Code</a>, as a lot of my job felt like it was honing those skills to a sharp point.</p>\n<p>As I became a Senior Engineer and then Staff Engineer, more of my work became self-directed rather than decided for me by a supervisor. Instead of being given tickets to solve in a sprint, I got to do a combination of choosing my own work and being asked to help in certain areas by other managers and my supervisor. I went wherever that focus was needed, which still meant more time talking about problems, but now also more time writing framework code in support of other engineers.</p>\n<p>After gaining a lot of experience in how Tumblr worked, it became easier for me to see where there were opportunities for improvement, both engineering- and product-wise. Since most of my passion is in the product work, I was given the latitude to try to push forward Tumblr’s product features more directly. Some of these projects I ran with myself, like the last three years of April Fools jokes and <a href=\"https://tumblrbot.tumblr.com/\">revamping Tumblrbot</a> and pushing <a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\">the Neue Post Format</a>, but a lot of the time I’ve tried to help empower feature work that I’m just passionate about and want to see succeed.</p>\n<p>Since I worked alone at my previous job for a very long time, I already had the ability to be self-directed and to self-organize. I try to keep my work well documented, I like to keep a trail of emails and tickets to show what I’m working on and have finished, and I can mentally context switch quickly between many different ongoing tasks. Most of that context switching ability centers around assigning priority to every task I do. If a project or task has no priority, it usually never gets done, but that’s fine; there is always more to do than can ever be done. Sometimes I have “rainy days” when I can pull something from the bottom of the priority list that I’ve wanted to do for awhile but not had time.</p>\n<p>It was also around this time of becoming more self-directed that I began mentoring other engineers one-on-one, and working with them to help them grow in the same way that I had, or in whatever way they wanted to grow. Sometimes I join a specific team for a brief period, usually acting as a force-multiplier to the output of a team while I was on it. I like to tear through challenges and make big difficult decisions when they need to be made, talking and documenting them out to reinforce shared knowledge, while trying to avoid the pitfalls of seeking perfection. One example of that is the ongoing Neue Post Format project, which has involved huge refactors of existing code, tons of new code, and a complete overhaul of how all new posts on Tumblr are stored and represented. Not to mention thousands upon thousands of words of documentation.</p>\n<p>All of this led me to becoming a Principal Engineer, which is where I’m at now. For me, it’s a role that expects continuous mentorship and sponsorship of other engineers, constant vigilance of best practices, tons and tons of code review and architecture-building, and heightened mindfulness of ones’ words and actions. In my experience so far, it’s a lot of talking and writing about engineering while making big, difficult engineering decisions, and actually writing fewer, but higher impact, lines of code.</p>\n<p>Moving beyond Principal Engineer is a difficult and rare task. Of the hundred or so engineers at Tumblr, there are only a handful of Principal Engineers, and even fewer Senior Principals. From my understanding, moving beyond Principal at Tumblr means being a framework-level domain owner and decision maker, contributing to the entire scale of Tumblr’s success. I’m still trying to figure out if that challenge is something that interests me, but in the meantime there are more than enough challenges at Tumblr to keep me busy.</p>\n<p>By the way, if my story sounds like an interesting adventure to you, <a href=\"https://www.tumblr.com/jobs\">we’re hiring</a>.</p>\n</blockquote>",
        "reblog": {
          "comment": "",
          "tree_html": "<p><a href=\"https://cyle.tumblr.com/post/185704749600/my-engineering-career-at-tumblr-so-far\" class=\"tumblr_blog\">cyle</a>:</p>\n<blockquote>\n<p>I’ve been at Tumblr for four years as of last month, and in those four years I’ve moved from Engineer to Senior Engineer to Principal Engineer. Everyone’s journey along the path of their career is different, and engineering is a little different everywhere, but this is my story. My hope is that it provides some insight into Tumblr’s career ladder and some themes that are universal across engineering cultures at other companies.</p>\n<h2>Prelude: Full Stack Madness</h2>\n<p>Before I joined Tumblr, I worked for ten (!!!) years as a full stack developer at a college, mostly alone. I’d been writing code (poorly) and immersing myself in tech since I was a kid, so I felt pretty confident as a teenager taking a job building websites for my college.</p>\n<p>Over the course of that ten-year job, I went from writing terrible PHP and Javascript to performing the ultra full stack of work: rack-mounting servers, installing operating systems on them, splitting them up into application servers and database servers and whatnot, managing them often, writing application logic to run on and across them, designing databases (relational and NoSQL), designing user interfaces, bridging lots of different APIs, and scaling my applications to meet greater demands. Way too much for one person to do, really.</p>\n<p>It was an opportunity for me to get my hands on all facets of building things for the internet. It afforded ample time to figure out what felt best for me, which turned out to be backend application development. I probably waited way too long before moving on to my next job, which luckily became Tumblr. When I did get the job at Tumblr, I had two main goals: to work as a component of a team rather than alone, and to focus on backend engineering.</p>\n<h2>Being heads-down as an Engineer</h2>\n<p>When I joined Tumblr, I came on as an Engineer. It’s technically a step above “entry level” at most companies, and it was the baseline for new engineering hires at Tumblr at the time. Someone at the Engineer level at Tumblr is expected to be a team member who focuses on a certain technical domain, such as databases, SRE, iOS, Android, Javascript, PHP, Scala, etc. For me, in product engineering, this roughly translated into being either a frontend engineer (iOS, Android, Javascript) or a backend engineer (PHP, Scala). When I started, I did a little bit of both since I had experience with both, but over the course of my first year I shed a lot of my frontend knowledge in favor of deepening my backend knowledge.</p>\n<p>The Engineer level usually means you’re someone who is relatively “heads-down”, being given tickets to complete during <a href=\"https://www.atlassian.com/agile/scrum/sprints\">sprints</a> which contribute to a larger project that your team is working on. That was me — at the time I joined we were working on finishing up the <a href=\"https://staff.tumblr.com/post/109422757605/big-update-tumblr\">“new” post forms on the web</a>, and my team was about to start building <a href=\"https://staff.tumblr.com/post/132943903090/you-asked-for-it-here-it-comes-messaging-real\">blog-to-blog instant messaging</a>. I worked with senior engineers to flesh out the architecture for messaging, and through that I learned how to build something that seemed simple to me but became very complex at scale. I churned through a lot of tickets and wrote a lot of code, almost entirely feature logic, rarely touching anything outside of my domain.</p>\n<p>While I didn’t spend a lot of time in meetings or making decisions, I did get to have a voice in pretty much everything my team worked on, and I felt empowered by my manager to speak my mind across the company. During my first year that actually got me in trouble, as I become a bit overconfident in my own opinion, and I didn’t have the experience necessary to back much of it up. That was a good learning experience for me; it taught me how to pick my battles and when to use my voice and speak my mind. Sometimes saying nothing is the best option, and it’s important to keep yourself mindful of what your voice is actually contributing.</p>\n<h2>Opening up avenues into Senior Engineering</h2>\n<p>After my first year I started feeling very familiar with Tumblr’s engineering practices and a couple of lucky opportunities appeared. The first was being asked to act as a pseudo-member of the Core PHP team since they were understaffed, which broadened my responsibilities and gave me a reason to start digging around in our framework-level code. It afforded me time to learn a lot about our framework level and our design patterns, and I made some fundamental changes to how the Tumblr PHP app works. More importantly, it almost doubled the amount of code I was expected to review, much of it outside of my previous work as a product engineer.</p>\n<p>Around that time, the senior engineers I was working with on messaging moved on from the project, leaving pretty much just me to finish the work a few months before we launched. Because of this, almost all of the PHP logic that exists for messaging on Tumblr is my code, and I became the go-to authority on how messaging works under the hood.</p>\n<p>After launch, we continued to iterate on messaging features. <a href=\"https://staff.tumblr.com/post/147398828165/now-you-can-send-pictures-in-messaging-how-open-a\">A few of these iterations</a> required heavy refactors of a system that was humming along, being used by millions of people. I learned how to make dramatic changes without anyone who was using the product noticing, and I started being one of the engineers who’d help others do the same for their projects.</p>\n<p>One example of that kind of work was <a href=\"https://staff.tumblr.com/post/141845074600/i-like-replies-and-i-cannot-lie\">the Replies relaunch</a>, which was outside my normal workload, but I lent a hand to help make sure it met the deadline we had set for ourselves. I also took the engineering lead on the infamous <a href=\"https://thisisdecision2016.tumblr.com/\">Lizard Election of 2016</a>, coordinating work among designers, web engineers, iOS engineers, and Android engineers, while also building most of the backend for it myself. It was an extremely ambitious project that we put together in a very short period time, all for one absurd April Fools joke. The community loved it (or was extremely confused by it), and it provided a lot of insight for me into what it’d be like to lead cross-team efforts.</p>\n<p>I also spent a lot of my first two years participating in Breaking Incidents — at Tumblr these are usually sudden high-impact problems that need to be fixed quickly, usually by someone who is on call. I probably learned the most about Tumblr’s features, systems, and edge cases while helping fix these problems. Sometimes these incidents were small, like just a user interface bug that had been accidentally deployed, and sometimes these incidents were huge, such as entire database clusters failing. Jumping in and helping to quickly resolve these incidents showed that I wasn’t afraid to get my hands dirty.</p>\n<p>All of this additional responsibility meant I started going to more meetings and talking to more people across the company, as I had carved out a space that I felt was my own. It was really difficult and uncomfortable a lot of the time, and I made mistakes that broke things, but fixing them, persevering, and learning not to repeat them showed how much I was ready for a more senior role. I got promoted to Senior Engineer and stayed at that level for two and a half years, with a brief interlude as a Staff Engineer.</p>\n<h2>Raising the stakes as a Senior Engineer and then Staff Engineer</h2>\n<p>As a Senior Engineer, I felt much more empowered to take on difficult tasks, as I had a couple of major, successful projects behind me. The feeling of being uncomfortable became comfortable for me; I got used to being in a position where I didn’t have a ready solution to a problem, and I was happy to say so, but I felt confident I could figure it out by drawing on my past experience and doing some research.</p>\n<p>I started being consulted by other teams when they’d be scoping out new projects, and I had a good sense for why a project could be difficult or easy. I also started going to meetings that had nothing to do with my normal job responsibilities, as I felt that it was important to stay on top of what was happening outside of those responsibilities. With only a couple hundred people at the company, it felt very feasible to know what was going on in most places.</p>\n<p>It was around a year into being a Senior Engineer that I was invited to become a Staff Engineer, which at the time was parallel with the Senior Engineer role, having only a slightly different set of expectations. Being a Staff Engineer meant more talking about engineering problems and processes, more reviewing other peoples’ code and ideas, less time writing my own code. Usually this is actually its own dedicated step along the career path, as it typically means you’re some kind of dedicated domain owner in a much larger organization of engineers. I fell into it naturally, as I was already doing a lot of the kind of work it expected, which highlighted to me that the best career moves are often the obvious ones.</p>\n<p>However, over time it began to feel like Staff Engineer was a role that would be more practical at a larger company of hundreds or thousands of engineers, and actually impractical at Tumblr’s size of just a hundred or so engineers. To me, many of the responsibilities of our Staff Engineer group felt like they should be that of any Senior Engineer or Managers/Directors. Many of our tasks involved shepherding other engineers and providing insight into how to fix hard problems, and defining processes that affected most engineers.</p>\n<p>A lot of those processes were very administrative and felt like they’d be more enforceable if they came from someone at the executive level. At times, Staff Engineering also felt like the dreaded “ivory tower” approach to engineering, in which a select few get to decide what’s best for everyone, which I strongly disagree with. I hopped out of the Staff Engineer role after nine months or so, and the Staff Engineering group was dissolved shortly after I left it.</p>\n<h2>Becoming More Independent</h2>\n<p>After spending so much time spreading myself around the company, I gradually shifted out of being tied to a single team and I became a kind of “floater” among the product engineering teams. I started tackling bigger problems with our legacy systems (such as getting them GDPR compliant) and helping shape the architecture of new features (such as <a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\">the Neue Post Format</a>). I had become the same kind of engineer as those who had helped me build messaging, acting more as someone who isn’t afraid to get their hands dirty contending with the obscure parts of a ten year old codebase. It was around this time that I wrote <a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\">How I Code Now</a> and <a href=\"https://engineering.tumblr.com/post/170040992289/how-i-review-code\">How I Review Code</a>, as a lot of my job felt like it was honing those skills to a sharp point.</p>\n<p>As I became a Senior Engineer and then Staff Engineer, more of my work became self-directed rather than decided for me by a supervisor. Instead of being given tickets to solve in a sprint, I got to do a combination of choosing my own work and being asked to help in certain areas by other managers and my supervisor. I went wherever that focus was needed, which still meant more time talking about problems, but now also more time writing framework code in support of other engineers.</p>\n<p>After gaining a lot of experience in how Tumblr worked, it became easier for me to see where there were opportunities for improvement, both engineering- and product-wise. Since most of my passion is in the product work, I was given the latitude to try to push forward Tumblr’s product features more directly. Some of these projects I ran with myself, like the last three years of April Fools jokes and <a href=\"https://tumblrbot.tumblr.com/\">revamping Tumblrbot</a> and pushing <a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\">the Neue Post Format</a>, but a lot of the time I’ve tried to help empower feature work that I’m just passionate about and want to see succeed.</p>\n<p>Since I worked alone at my previous job for a very long time, I already had the ability to be self-directed and to self-organize. I try to keep my work well documented, I like to keep a trail of emails and tickets to show what I’m working on and have finished, and I can mentally context switch quickly between many different ongoing tasks. Most of that context switching ability centers around assigning priority to every task I do. If a project or task has no priority, it usually never gets done, but that’s fine; there is always more to do than can ever be done. Sometimes I have “rainy days” when I can pull something from the bottom of the priority list that I’ve wanted to do for awhile but not had time.</p>\n<p>It was also around this time of becoming more self-directed that I began mentoring other engineers one-on-one, and working with them to help them grow in the same way that I had, or in whatever way they wanted to grow. Sometimes I join a specific team for a brief period, usually acting as a force-multiplier to the output of a team while I was on it. I like to tear through challenges and make big difficult decisions when they need to be made, talking and documenting them out to reinforce shared knowledge, while trying to avoid the pitfalls of seeking perfection. One example of that is the ongoing Neue Post Format project, which has involved huge refactors of existing code, tons of new code, and a complete overhaul of how all new posts on Tumblr are stored and represented. Not to mention thousands upon thousands of words of documentation.</p>\n<p>All of this led me to becoming a Principal Engineer, which is where I’m at now. For me, it’s a role that expects continuous mentorship and sponsorship of other engineers, constant vigilance of best practices, tons and tons of code review and architecture-building, and heightened mindfulness of ones’ words and actions. In my experience so far, it’s a lot of talking and writing about engineering while making big, difficult engineering decisions, and actually writing fewer, but higher impact, lines of code.</p>\n<p>Moving beyond Principal Engineer is a difficult and rare task. Of the hundred or so engineers at Tumblr, there are only a handful of Principal Engineers, and even fewer Senior Principals. From my understanding, moving beyond Principal at Tumblr means being a framework-level domain owner and decision maker, contributing to the entire scale of Tumblr’s success. I’m still trying to figure out if that challenge is something that interests me, but in the meantime there are more than enough challenges at Tumblr to keep me busy.</p>\n<p>By the way, if my story sounds like an interesting adventure to you, <a href=\"https://www.tumblr.com/jobs\">we’re hiring</a>.</p>\n</blockquote>"
        },
        "trail": [
          {
            "blog": {
              "name": "cyle",
              "active": true,
              "theme": {
                "avatar_shape": "circle",
                "background_color": "#FFFFFF",
                "body_font": "Helvetica Neue",
                "header_bounds": 0,
                "header_image": "https://static.tumblr.com/c7c41638489846fe4522d6fe132a6b50/58yw7w9/ne6ooqkx4/tumblr_static_33l5bxoon0isw4kgwk04k04os.png",
                "header_image_focused": "https://static.tumblr.com/c7c41638489846fe4522d6fe132a6b50/58yw7w9/ne6ooqkx4/tumblr_static_33l5bxoon0isw4kgwk04k04os.png",
                "header_image_scaled": "https://static.tumblr.com/c7c41638489846fe4522d6fe132a6b50/58yw7w9/ne6ooqkx4/tumblr_static_33l5bxoon0isw4kgwk04k04os.png",
                "header_stretch": false,
                "link_color": "#d469cd",
                "show_avatar": false,
                "show_description": false,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#d71b2e",
                "title_font": "Sofia Pro",
                "title_font_weight": "regular"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "185704749600" },
            "content_raw": "<p>I’ve been at Tumblr for four years as of last month, and in those four years I’ve moved from Engineer to Senior Engineer to Principal Engineer. Everyone’s journey along the path of their career is different, and engineering is a little different everywhere, but this is my story. My hope is that it provides some insight into Tumblr’s career ladder and some themes that are universal across engineering cultures at other companies.</p>\n<h2>Prelude: Full Stack Madness</h2>\n<p>Before I joined Tumblr, I worked for ten (!!!) years as a full stack developer at a college, mostly alone. I’d been writing code (poorly) and immersing myself in tech since I was a kid, so I felt pretty confident as a teenager taking a job building websites for my college.</p>\n<p>Over the course of that ten-year job, I went from writing terrible PHP and Javascript to performing the ultra full stack of work: rack-mounting servers, installing operating systems on them, splitting them up into application servers and database servers and whatnot, managing them often, writing application logic to run on and across them, designing databases (relational and NoSQL), designing user interfaces, bridging lots of different APIs, and scaling my applications to meet greater demands. Way too much for one person to do, really.</p>\n<p>It was an opportunity for me to get my hands on all facets of building things for the internet. It afforded ample time to figure out what felt best for me, which turned out to be backend application development. I probably waited way too long before moving on to my next job, which luckily became Tumblr. When I did get the job at Tumblr, I had two main goals: to work as a component of a team rather than alone, and to focus on backend engineering.</p>\n<h2>Being heads-down as an Engineer</h2>\n<p>When I joined Tumblr, I came on as an Engineer. It’s technically a step above “entry level” at most companies, and it was the baseline for new engineering hires at Tumblr at the time. Someone at the Engineer level at Tumblr is expected to be a team member who focuses on a certain technical domain, such as databases, SRE, iOS, Android, Javascript, PHP, Scala, etc. For me, in product engineering, this roughly translated into being either a frontend engineer (iOS, Android, Javascript) or a backend engineer (PHP, Scala). When I started, I did a little bit of both since I had experience with both, but over the course of my first year I shed a lot of my frontend knowledge in favor of deepening my backend knowledge.</p>\n<p>The Engineer level usually means you’re someone who is relatively “heads-down”, being given tickets to complete during <a href=\"https://www.atlassian.com/agile/scrum/sprints\">sprints</a> which contribute to a larger project that your team is working on. That was me — at the time I joined we were working on finishing up the <a href=\"https://staff.tumblr.com/post/109422757605/big-update-tumblr\">“new” post forms on the web</a>, and my team was about to start building <a href=\"https://staff.tumblr.com/post/132943903090/you-asked-for-it-here-it-comes-messaging-real\">blog-to-blog instant messaging</a>. I worked with senior engineers to flesh out the architecture for messaging, and through that I learned how to build something that seemed simple to me but became very complex at scale. I churned through a lot of tickets and wrote a lot of code, almost entirely feature logic, rarely touching anything outside of my domain.</p>\n<p>While I didn’t spend a lot of time in meetings or making decisions, I did get to have a voice in pretty much everything my team worked on, and I felt empowered by my manager to speak my mind across the company. During my first year that actually got me in trouble, as I become a bit overconfident in my own opinion, and I didn’t have the experience necessary to back much of it up. That was a good learning experience for me; it taught me how to pick my battles and when to use my voice and speak my mind. Sometimes saying nothing is the best option, and it’s important to keep yourself mindful of what your voice is actually contributing.</p>\n<h2>Opening up avenues into Senior Engineering</h2>\n<p>After my first year I started feeling very familiar with Tumblr’s engineering practices and a couple of lucky opportunities appeared. The first was being asked to act as a pseudo-member of the Core PHP team since they were understaffed, which broadened my responsibilities and gave me a reason to start digging around in our framework-level code. It afforded me time to learn a lot about our framework level and our design patterns, and I made some fundamental changes to how the Tumblr PHP app works. More importantly, it almost doubled the amount of code I was expected to review, much of it outside of my previous work as a product engineer.</p>\n<p>Around that time, the senior engineers I was working with on messaging moved on from the project, leaving pretty much just me to finish the work a few months before we launched. Because of this, almost all of the PHP logic that exists for messaging on Tumblr is my code, and I became the go-to authority on how messaging works under the hood.</p>\n<p>After launch, we continued to iterate on messaging features. <a href=\"https://staff.tumblr.com/post/147398828165/now-you-can-send-pictures-in-messaging-how-open-a\">A few of these iterations</a> required heavy refactors of a system that was humming along, being used by millions of people. I learned how to make dramatic changes without anyone who was using the product noticing, and I started being one of the engineers who’d help others do the same for their projects.</p>\n<p>One example of that kind of work was <a href=\"https://staff.tumblr.com/post/141845074600/i-like-replies-and-i-cannot-lie\">the Replies relaunch</a>, which was outside my normal workload, but I lent a hand to help make sure it met the deadline we had set for ourselves. I also took the engineering lead on the infamous <a href=\"https://thisisdecision2016.tumblr.com/\">Lizard Election of 2016</a>, coordinating work among designers, web engineers, iOS engineers, and Android engineers, while also building most of the backend for it myself. It was an extremely ambitious project that we put together in a very short period time, all for one absurd April Fools joke. The community loved it (or was extremely confused by it), and it provided a lot of insight for me into what it’d be like to lead cross-team efforts.</p>\n<p>I also spent a lot of my first two years participating in Breaking Incidents — at Tumblr these are usually sudden high-impact problems that need to be fixed quickly, usually by someone who is on call. I probably learned the most about Tumblr’s features, systems, and edge cases while helping fix these problems. Sometimes these incidents were small, like just a user interface bug that had been accidentally deployed, and sometimes these incidents were huge, such as entire database clusters failing. Jumping in and helping to quickly resolve these incidents showed that I wasn’t afraid to get my hands dirty.</p>\n<p>All of this additional responsibility meant I started going to more meetings and talking to more people across the company, as I had carved out a space that I felt was my own. It was really difficult and uncomfortable a lot of the time, and I made mistakes that broke things, but fixing them, persevering, and learning not to repeat them showed how much I was ready for a more senior role. I got promoted to Senior Engineer and stayed at that level for two and a half years, with a brief interlude as a Staff Engineer.</p>\n<h2>Raising the stakes as a Senior Engineer and then Staff Engineer</h2>\n<p>As a Senior Engineer, I felt much more empowered to take on difficult tasks, as I had a couple of major, successful projects behind me. The feeling of being uncomfortable became comfortable for me; I got used to being in a position where I didn’t have a ready solution to a problem, and I was happy to say so, but I felt confident I could figure it out by drawing on my past experience and doing some research.</p>\n<p>I started being consulted by other teams when they’d be scoping out new projects, and I had a good sense for why a project could be difficult or easy. I also started going to meetings that had nothing to do with my normal job responsibilities, as I felt that it was important to stay on top of what was happening outside of those responsibilities. With only a couple hundred people at the company, it felt very feasible to know what was going on in most places.</p>\n<p>It was around a year into being a Senior Engineer that I was invited to become a Staff Engineer, which at the time was parallel with the Senior Engineer role, having only a slightly different set of expectations. Being a Staff Engineer meant more talking about engineering problems and processes, more reviewing other peoples’ code and ideas, less time writing my own code. Usually this is actually its own dedicated step along the career path, as it typically means you’re some kind of dedicated domain owner in a much larger organization of engineers. I fell into it naturally, as I was already doing a lot of the kind of work it expected, which highlighted to me that the best career moves are often the obvious ones.</p>\n<p>However, over time it began to feel like Staff Engineer was a role that would be more practical at a larger company of hundreds or thousands of engineers, and actually impractical at Tumblr’s size of just a hundred or so engineers. To me, many of the responsibilities of our Staff Engineer group felt like they should be that of any Senior Engineer or Managers/Directors. Many of our tasks involved shepherding other engineers and providing insight into how to fix hard problems, and defining processes that affected most engineers.</p>\n<p>A lot of those processes were very administrative and felt like they’d be more enforceable if they came from someone at the executive level. At times, Staff Engineering also felt like the dreaded “ivory tower” approach to engineering, in which a select few get to decide what’s best for everyone, which I strongly disagree with. I hopped out of the Staff Engineer role after nine months or so, and the Staff Engineering group was dissolved shortly after I left it.</p>\n<h2>Becoming More Independent</h2>\n<p>After spending so much time spreading myself around the company, I gradually shifted out of being tied to a single team and I became a kind of “floater” among the product engineering teams. I started tackling bigger problems with our legacy systems (such as getting them GDPR compliant) and helping shape the architecture of new features (such as <a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\">the Neue Post Format</a>). I had become the same kind of engineer as those who had helped me build messaging, acting more as someone who isn’t afraid to get their hands dirty contending with the obscure parts of a ten year old codebase. It was around this time that I wrote <a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\">How I Code Now</a> and <a href=\"https://engineering.tumblr.com/post/170040992289/how-i-review-code\">How I Review Code</a>, as a lot of my job felt like it was honing those skills to a sharp point.</p>\n<p>As I became a Senior Engineer and then Staff Engineer, more of my work became self-directed rather than decided for me by a supervisor. Instead of being given tickets to solve in a sprint, I got to do a combination of choosing my own work and being asked to help in certain areas by other managers and my supervisor. I went wherever that focus was needed, which still meant more time talking about problems, but now also more time writing framework code in support of other engineers.</p>\n<p>After gaining a lot of experience in how Tumblr worked, it became easier for me to see where there were opportunities for improvement, both engineering- and product-wise. Since most of my passion is in the product work, I was given the latitude to try to push forward Tumblr’s product features more directly. Some of these projects I ran with myself, like the last three years of April Fools jokes and <a href=\"https://tumblrbot.tumblr.com/\">revamping Tumblrbot</a> and pushing <a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\">the Neue Post Format</a>, but a lot of the time I’ve tried to help empower feature work that I’m just passionate about and want to see succeed.</p>\n<p>Since I worked alone at my previous job for a very long time, I already had the ability to be self-directed and to self-organize. I try to keep my work well documented, I like to keep a trail of emails and tickets to show what I’m working on and have finished, and I can mentally context switch quickly between many different ongoing tasks. Most of that context switching ability centers around assigning priority to every task I do. If a project or task has no priority, it usually never gets done, but that’s fine; there is always more to do than can ever be done. Sometimes I have “rainy days” when I can pull something from the bottom of the priority list that I’ve wanted to do for awhile but not had time.</p>\n<p>It was also around this time of becoming more self-directed that I began mentoring other engineers one-on-one, and working with them to help them grow in the same way that I had, or in whatever way they wanted to grow. Sometimes I join a specific team for a brief period, usually acting as a force-multiplier to the output of a team while I was on it. I like to tear through challenges and make big difficult decisions when they need to be made, talking and documenting them out to reinforce shared knowledge, while trying to avoid the pitfalls of seeking perfection. One example of that is the ongoing Neue Post Format project, which has involved huge refactors of existing code, tons of new code, and a complete overhaul of how all new posts on Tumblr are stored and represented. Not to mention thousands upon thousands of words of documentation.</p>\n<p>All of this led me to becoming a Principal Engineer, which is where I’m at now. For me, it’s a role that expects continuous mentorship and sponsorship of other engineers, constant vigilance of best practices, tons and tons of code review and architecture-building, and heightened mindfulness of ones’ words and actions. In my experience so far, it’s a lot of talking and writing about engineering while making big, difficult engineering decisions, and actually writing fewer, but higher impact, lines of code.</p>\n<p>Moving beyond Principal Engineer is a difficult and rare task. Of the hundred or so engineers at Tumblr, there are only a handful of Principal Engineers, and even fewer Senior Principals. From my understanding, moving beyond Principal at Tumblr means being a framework-level domain owner and decision maker, contributing to the entire scale of Tumblr’s success. I’m still trying to figure out if that challenge is something that interests me, but in the meantime there are more than enough challenges at Tumblr to keep me busy.</p>\n<p>By the way, if my story sounds like an interesting adventure to you, <a href=\"https://www.tumblr.com/jobs\">we’re hiring</a>.</p>",
            "content": "<p>I&rsquo;ve been at Tumblr for four years as of last month, and in those four years I&rsquo;ve moved from Engineer to Senior Engineer to Principal Engineer. Everyone&rsquo;s journey along the path of their career is different, and engineering is a little different everywhere, but this is my story. My hope is that it provides some insight into Tumblr&rsquo;s career ladder and some themes that are universal across engineering cultures at other companies.</p>\n<h2>Prelude: Full Stack Madness</h2>\n<p>Before I joined Tumblr, I worked for ten (!!!) years as a full stack developer at a college, mostly alone. I&rsquo;d been writing code (poorly) and immersing myself in tech since I was a kid, so I felt pretty confident as a teenager taking a job building websites for my college.</p>\n<p>Over the course of that ten-year job, I went from writing terrible PHP and Javascript to performing the ultra full stack of work: rack-mounting servers, installing operating systems on them, splitting them up into application servers and database servers and whatnot, managing them often, writing application logic to run on and across them, designing databases (relational and NoSQL), designing user interfaces, bridging lots of different APIs, and scaling my applications to meet greater demands. Way too much for one person to do, really.</p>\n<p>It was an opportunity for me to get my hands on all facets of building things for the internet. It afforded ample time to figure out what felt best for me, which turned out to be backend application development. I probably waited way too long before moving on to my next job, which luckily became Tumblr. When I did get the job at Tumblr, I had two main goals: to work as a component of a team rather than alone, and to focus on backend engineering.</p>\n<h2>Being heads-down as an Engineer</h2>\n<p>When I joined Tumblr, I came on as an Engineer. It&rsquo;s technically a step above &ldquo;entry level&rdquo; at most companies, and it was the baseline for new engineering hires at Tumblr at the time. Someone at the Engineer level at Tumblr is expected to be a team member who focuses on a certain technical domain, such as databases, SRE, iOS, Android, Javascript, PHP, Scala, etc. For me, in product engineering, this roughly translated into being either a frontend engineer (iOS, Android, Javascript) or a backend engineer (PHP, Scala). When I started, I did a little bit of both since I had experience with both, but over the course of my first year I shed a lot of my frontend knowledge in favor of deepening my backend knowledge.</p>\n<p>The Engineer level usually means you&rsquo;re someone who is relatively &ldquo;heads-down&rdquo;, being given tickets to complete during <a href=\"https://www.atlassian.com/agile/scrum/sprints\">sprints</a> which contribute to a larger project that your team is working on. That was me &mdash; at the time I joined we were working on finishing up the <a href=\"https://staff.tumblr.com/post/109422757605/big-update-tumblr\">&ldquo;new&rdquo; post forms on the web</a>, and my team was about to start building <a href=\"https://staff.tumblr.com/post/132943903090/you-asked-for-it-here-it-comes-messaging-real\">blog-to-blog instant messaging</a>. I worked with senior engineers to flesh out the architecture for messaging, and through that I learned how to build something that seemed simple to me but became very complex at scale. I churned through a lot of tickets and wrote a lot of code, almost entirely feature logic, rarely touching anything outside of my domain.</p>\n<p>While I didn&rsquo;t spend a lot of time in meetings or making decisions, I did get to have a voice in pretty much everything my team worked on, and I felt empowered by my manager to speak my mind across the company. During my first year that actually got me in trouble, as I become a bit overconfident in my own opinion, and I didn&rsquo;t have the experience necessary to back much of it up. That was a good learning experience for me; it taught me how to pick my battles and when to use my voice and speak my mind. Sometimes saying nothing is the best option, and it&rsquo;s important to keep yourself mindful of what your voice is actually contributing.</p>\n<h2>Opening up avenues into Senior Engineering</h2>\n<p>After my first year I started feeling very familiar with Tumblr&rsquo;s engineering practices and a couple of lucky opportunities appeared. The first was being asked to act as a pseudo-member of the Core PHP team since they were understaffed, which broadened my responsibilities and gave me a reason to start digging around in our framework-level code. It afforded me time to learn a lot about our framework level and our design patterns, and I made some fundamental changes to how the Tumblr PHP app works. More importantly, it almost doubled the amount of code I was expected to review, much of it outside of my previous work as a product engineer.</p>\n<p>Around that time, the senior engineers I was working with on messaging moved on from the project, leaving pretty much just me to finish the work a few months before we launched. Because of this, almost all of the PHP logic that exists for messaging on Tumblr is my code, and I became the go-to authority on how messaging works under the hood.</p>\n<p>After launch, we continued to iterate on messaging features. <a href=\"https://staff.tumblr.com/post/147398828165/now-you-can-send-pictures-in-messaging-how-open-a\">A few of these iterations</a> required heavy refactors of a system that was humming along, being used by millions of people. I learned how to make dramatic changes without anyone who was using the product noticing, and I started being one of the engineers who&rsquo;d help others do the same for their projects.</p>\n<p>One example of that kind of work was <a href=\"https://staff.tumblr.com/post/141845074600/i-like-replies-and-i-cannot-lie\">the Replies relaunch</a>, which was outside my normal workload, but I lent a hand to help make sure it met the deadline we had set for ourselves. I also took the engineering lead on the infamous <a href=\"https://thisisdecision2016.tumblr.com/\">Lizard Election of 2016</a>, coordinating work among designers, web engineers, iOS engineers, and Android engineers, while also building most of the backend for it myself. It was an extremely ambitious project that we put together in a very short period time, all for one absurd April Fools joke. The community loved it (or was extremely confused by it), and it provided a lot of insight for me into what it&rsquo;d be like to lead cross-team efforts.</p>\n<p>I also spent a lot of my first two years participating in Breaking Incidents &mdash; at Tumblr these are usually sudden high-impact problems that need to be fixed quickly, usually by someone who is on call. I probably learned the most about Tumblr&rsquo;s features, systems, and edge cases while helping fix these problems. Sometimes these incidents were small, like just a user interface bug that had been accidentally deployed, and sometimes these incidents were huge, such as entire database clusters failing. Jumping in and helping to quickly resolve these incidents showed that I wasn&rsquo;t afraid to get my hands dirty.</p>\n<p>All of this additional responsibility meant I started going to more meetings and talking to more people across the company, as I had carved out a space that I felt was my own. It was really difficult and uncomfortable a lot of the time, and I made mistakes that broke things, but fixing them, persevering, and learning not to repeat them showed how much I was ready for a more senior role. I got promoted to Senior Engineer and stayed at that level for two and a half years, with a brief interlude as a Staff Engineer.</p>\n<h2>Raising the stakes as a Senior Engineer and then Staff Engineer</h2>\n<p>As a Senior Engineer, I felt much more empowered to take on difficult tasks, as I had a couple of major, successful projects behind me. The feeling of being uncomfortable became comfortable for me; I got used to being in a position where I didn&rsquo;t have a ready solution to a problem, and I was happy to say so, but I felt confident I could figure it out by drawing on my past experience and doing some research.</p>\n<p>I started being consulted by other teams when they&rsquo;d be scoping out new projects, and I had a good sense for why a project could be difficult or easy. I also started going to meetings that had nothing to do with my normal job responsibilities, as I felt that it was important to stay on top of what was happening outside of those responsibilities. With only a couple hundred people at the company, it felt very feasible to know what was going on in most places.</p>\n<p>It was around a year into being a Senior Engineer that I was invited to become a Staff Engineer, which at the time was parallel with the Senior Engineer role, having only a slightly different set of expectations. Being a Staff Engineer meant more talking about engineering problems and processes, more reviewing other peoples&rsquo; code and ideas, less time writing my own code. Usually this is actually its own dedicated step along the career path, as it typically means you&rsquo;re some kind of dedicated domain owner in a much larger organization of engineers. I fell into it naturally, as I was already doing a lot of the kind of work it expected, which highlighted to me that the best career moves are often the obvious ones.</p>\n<p>However, over time it began to feel like Staff Engineer was a role that would be more practical at a larger company of hundreds or thousands of engineers, and actually impractical at Tumblr&rsquo;s size of just a hundred or so engineers. To me, many of the responsibilities of our Staff Engineer group felt like they should be that of any Senior Engineer or Managers/Directors. Many of our tasks involved shepherding other engineers and providing insight into how to fix hard problems, and defining processes that affected most engineers.</p>\n<p>A lot of those processes were very administrative and felt like they&rsquo;d be more enforceable if they came from someone at the executive level. At times, Staff Engineering also felt like the dreaded &ldquo;ivory tower&rdquo; approach to engineering, in which a select few get to decide what&rsquo;s best for everyone, which I strongly disagree with. I hopped out of the Staff Engineer role after nine months or so, and the Staff Engineering group was dissolved shortly after I left it.</p>\n<h2>Becoming More Independent</h2>\n<p>After spending so much time spreading myself around the company, I gradually shifted out of being tied to a single team and I became a kind of &ldquo;floater&rdquo; among the product engineering teams. I started tackling bigger problems with our legacy systems (such as getting them GDPR compliant) and helping shape the architecture of new features (such as <a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\">the Neue Post Format</a>). I had become the same kind of engineer as those who had helped me build messaging, acting more as someone who isn&rsquo;t afraid to get their hands dirty contending with the obscure parts of a ten year old codebase. It was around this time that I wrote <a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\">How I Code Now</a> and <a href=\"https://engineering.tumblr.com/post/170040992289/how-i-review-code\">How I Review Code</a>, as a lot of my job felt like it was honing those skills to a sharp point.</p>\n<p>As I became a Senior Engineer and then Staff Engineer, more of my work became self-directed rather than decided for me by a supervisor. Instead of being given tickets to solve in a sprint, I got to do a combination of choosing my own work and being asked to help in certain areas by other managers and my supervisor. I went wherever that focus was needed, which still meant more time talking about problems, but now also more time writing framework code in support of other engineers.</p>\n<p>After gaining a lot of experience in how Tumblr worked, it became easier for me to see where there were opportunities for improvement, both engineering- and product-wise. Since most of my passion is in the product work, I was given the latitude to try to push forward Tumblr&rsquo;s product features more directly. Some of these projects I ran with myself, like the last three years of April Fools jokes and <a href=\"https://tumblrbot.tumblr.com/\">revamping Tumblrbot</a> and pushing <a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\">the Neue Post Format</a>, but a lot of the time I&rsquo;ve tried to help empower feature work that I&rsquo;m just passionate about and want to see succeed.</p>\n<p>Since I worked alone at my previous job for a very long time, I already had the ability to be self-directed and to self-organize. I try to keep my work well documented, I like to keep a trail of emails and tickets to show what I&rsquo;m working on and have finished, and I can mentally context switch quickly between many different ongoing tasks. Most of that context switching ability centers around assigning priority to every task I do. If a project or task has no priority, it usually never gets done, but that&rsquo;s fine; there is always more to do than can ever be done. Sometimes I have &ldquo;rainy days&rdquo; when I can pull something from the bottom of the priority list that I&rsquo;ve wanted to do for awhile but not had time.</p>\n<p>It was also around this time of becoming more self-directed that I began mentoring other engineers one-on-one, and working with them to help them grow in the same way that I had, or in whatever way they wanted to grow. Sometimes I join a specific team for a brief period, usually acting as a force-multiplier to the output of a team while I was on it. I like to tear through challenges and make big difficult decisions when they need to be made, talking and documenting them out to reinforce shared knowledge, while trying to avoid the pitfalls of seeking perfection. One example of that is the ongoing Neue Post Format project, which has involved huge refactors of existing code, tons of new code, and a complete overhaul of how all new posts on Tumblr are stored and represented. Not to mention thousands upon thousands of words of documentation.</p>\n<p>All of this led me to becoming a Principal Engineer, which is where I&rsquo;m at now. For me, it&rsquo;s a role that expects continuous mentorship and sponsorship of other engineers, constant vigilance of best practices, tons and tons of code review and architecture-building, and heightened mindfulness of ones&rsquo; words and actions. In my experience so far, it&rsquo;s a lot of talking and writing about engineering while making big, difficult engineering decisions, and actually writing fewer, but higher impact, lines of code.</p>\n<p>Moving beyond Principal Engineer is a difficult and rare task. Of the hundred or so engineers at Tumblr, there are only a handful of Principal Engineers, and even fewer Senior Principals. From my understanding, moving beyond Principal at Tumblr means being a framework-level domain owner and decision maker, contributing to the entire scale of Tumblr&rsquo;s success. I&rsquo;m still trying to figure out if that challenge is something that interests me, but in the meantime there are more than enough challenges at Tumblr to keep me busy.</p>\n<p>By the way, if my story sounds like an interesting adventure to you, <a href=\"https://www.tumblr.com/jobs\">we&rsquo;re hiring</a>.</p>",
            "is_root_item": true
          }
        ],
        "reblogged_from_id": "185704749600",
        "reblogged_from_url": "https://cyle.tumblr.com/post/185704749600/my-engineering-career-at-tumblr-so-far",
        "reblogged_from_name": "cyle",
        "reblogged_from_title": "cyle",
        "reblogged_from_uuid": "t:3WVZ6W9Z8weSVXKdNHPz7Q",
        "reblogged_from_can_message": true,
        "reblogged_root_id": "185704749600",
        "reblogged_root_url": "https://cyle.tumblr.com/post/185704749600/my-engineering-career-at-tumblr-so-far",
        "reblogged_root_name": "cyle",
        "reblogged_root_title": "cyle",
        "reblogged_root_uuid": "t:3WVZ6W9Z8weSVXKdNHPz7Q",
        "reblogged_root_can_message": true,
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1575435755,
            "blog_name": "justhavetofeelthewaves",
            "blog_uuid": "t:8EJKhQZ2EdqEEUSdCMiImg",
            "blog_url": "https://justhavetofeelthewaves.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1575313141,
            "blog_name": "oneiridescent",
            "blog_uuid": "t:hs25dKWH22kal39AIm8P8A",
            "blog_url": "https://oneiridescent.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1572086954,
            "blog_name": "rainbowlight100",
            "blog_uuid": "t:q7Ienh9NLpUb4SJx18bj5w",
            "blog_url": "https://rainbowlight100.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1571079243,
            "blog_name": "ryanlrussell",
            "blog_uuid": "t:46AFUlrpMpotxICOoprYBQ",
            "blog_url": "https://ryanlrussell.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1570659687,
            "blog_name": "alex0two",
            "blog_uuid": "t:7VQwPTcur8RLCwixu9q8dw",
            "blog_url": "https://alex0two.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570478363,
            "blog_name": "pyrrnic",
            "blog_uuid": "t:AnRmp2fF7NIvvD5s3LIgWA",
            "blog_url": "https://pyrrnic.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1569430855,
            "blog_name": "nadhysposts",
            "blog_uuid": "t:jfzikrrthIk3b01iXZSSlw",
            "blog_url": "https://nadhysposts.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1568632791,
            "blog_name": "kevbrinx",
            "blog_uuid": "t:hWKlJa4C5GN9JDcVfiN0Fw",
            "blog_url": "https://markmycomics.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1566534548,
            "blog_name": "celestial-millennial",
            "blog_uuid": "t:QnRVfWRzKQpIVpeqysxcog",
            "blog_url": "https://celestial-millennial.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1566119885,
            "blog_name": "eznay",
            "blog_uuid": "t:MRVUefXkvIxtsIzD46y-1Q",
            "blog_url": "https://eznay.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1564387526,
            "blog_name": "lifechronicles",
            "blog_uuid": "t:atvZ3zxID_nzu2wdgL6ijw",
            "blog_url": "https://lifechronicles.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1563889226,
            "blog_name": "docestranhoamor",
            "blog_uuid": "t:D1nf3nG3O-I5pW5adPnC5g",
            "blog_url": "https://docestranhoamor.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1563109955,
            "blog_name": "stickycloudcowboypurse",
            "blog_uuid": "t:E239BOxpp3poIzTHzfaxGA",
            "blog_url": "https://stickycloudcowboypurse.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1562818933,
            "blog_name": "tinycollectiveobject",
            "blog_uuid": "t:smHImFXyEo02T5Y2Zw6zKQ",
            "blog_url": "https://tinycollectiveobject.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1562791383,
            "blog_name": "holisticfansstuff",
            "blog_uuid": "t:ciYa2ItlamfgTWnl_cikJQ",
            "blog_url": "https://holisticfansstuff.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1562039816,
            "blog_name": "mwuahjk",
            "blog_uuid": "t:GLNe1zTUKs-boI7nq7BHXg",
            "blog_url": "https://mwuahjk.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1561985521,
            "blog_name": "admung",
            "blog_uuid": "t:yjsRbW8L-DgnhgX3zKbXug",
            "blog_url": "https://admung.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1561825035,
            "blog_name": "cosmiccodestest3",
            "blog_uuid": "t:srV-ypPw6S06N2zwo_RSnw",
            "blog_url": "https://cosmiccodestest3.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "185933405113",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1561734122,
            "blog_name": "ournewoverlords",
            "blog_uuid": "t:9J-37tBXWCB-UlsFK6GV3A",
            "blog_url": "https://ournewoverlords.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1561636056,
            "blog_name": "schnuki99",
            "blog_uuid": "t:u9-eLpJO3W_QmJEWoSXjcQ",
            "blog_url": "https://schnuki99.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1561529129,
            "blog_name": "ambivartence",
            "blog_uuid": "t:4IU157vdVRm-wK_rp8-hjA",
            "blog_url": "https://ambivartence.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1561495859,
            "blog_name": "kaypree",
            "blog_uuid": "t:WETMl__Fepn8q4vx0mi1LA",
            "blog_url": "https://kaypree.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1561455429,
            "blog_name": "surajitch",
            "blog_uuid": "t:edYKrfBxP337UYBJ6GLyCQ",
            "blog_url": "https://surajitch.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1561442728,
            "blog_name": "madame-razz",
            "blog_uuid": "t:5KTr1NkJrRAZRjAeqQ3gsw",
            "blog_url": "https://madame-razz.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1561386024,
            "blog_name": "topherchris",
            "blog_uuid": "t:VoYsAw9i1H9cVrSUbmM7Rw",
            "blog_url": "https://topherchris.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1561375933,
            "blog_name": "aradiantdarkness",
            "blog_uuid": "t:o2y4E8cYUNnzgJh_kQLPqQ",
            "blog_url": "https://aradiantdarkness.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1561298422,
            "blog_name": "thirdstrings",
            "blog_uuid": "t:ytTXg1HguMwOikxM21Ipgg",
            "blog_url": "https://thirdstrings.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "185792814886",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1561295818,
            "blog_name": "whiskeykin",
            "blog_uuid": "t:Z9UE4YP85IMP7eu2m4vtAA",
            "blog_url": "https://whiskeykin.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1561295547,
            "blog_name": "nerdstrings",
            "blog_uuid": "t:td5HTPFKjPKfzf9Uq6_NhA",
            "blog_url": "https://nerdstrings.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1561229173,
            "blog_name": "kynosoural",
            "blog_uuid": "t:d0VdjHp250t4lzAefRASlA",
            "blog_url": "https://kynosoural.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1561217516,
            "blog_name": "wsample",
            "blog_uuid": "t:DpMpbAVyZlz0lFQshRegmQ",
            "blog_url": "https://wsample.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1561213269,
            "blog_name": "wanderingchaos",
            "blog_uuid": "t:6R185yH6_UU3JIrNFyb0NA",
            "blog_url": "https://wanderingchaos.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "185770921750",
            "reblog_parent_blog_name": "continuants"
          },
          {
            "type": "like",
            "timestamp": 1561213266,
            "blog_name": "wanderingchaos",
            "blog_uuid": "t:6R185yH6_UU3JIrNFyb0NA",
            "blog_url": "https://wanderingchaos.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1561212987,
            "blog_name": "franniferlopez",
            "blog_uuid": "t:hXgMGTBy1h9nWLSz1qMrQw",
            "blog_url": "https://franniferlopez.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "I think it’s very sad that there’s people out there that don’t get to work with @cyle.",
            "post_id": "185770841694",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1561208754,
            "blog_name": "iampikachuhearmeroar",
            "blog_uuid": "t:xgGK-hhbFFDGMqRtMWPXmg",
            "blog_url": "https://iampikachuhearmeroar.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1561208500,
            "blog_name": "booyahpurgatory",
            "blog_uuid": "t:uA_wcl4ALQ54a9Sv81KpJA",
            "blog_url": "https://booyahpurgatory.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1561207151,
            "blog_name": "continuants",
            "blog_uuid": "t:_Le3ACMZWVUygyl8-1jJ1w",
            "blog_url": "https://memelibrarian.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "@cyle is a treasure",
            "post_id": "185769494363",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1561207107,
            "blog_name": "continuants",
            "blog_uuid": "t:_Le3ACMZWVUygyl8-1jJ1w",
            "blog_url": "https://memelibrarian.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1561182089,
            "blog_name": "justcantethan",
            "blog_uuid": "t:WMSNeWfpQPIJ0D0IDQ4RVQ",
            "blog_url": "https://justcantethan.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "added_text": "YEAH CYLE!!!!",
            "post_id": "185764531274",
            "reblog_parent_blog_name": "cyle",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1561161745,
            "blog_name": "confettimuffin",
            "blog_uuid": "t:qFuQ01NxRda9Crrc_ZUZGg",
            "blog_url": "https://confettimuffin.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 185038695551,
        "post_url": "https://engineering.tumblr.com/post/185038695551/emberconf-2019-recap",
        "slug": "emberconf-2019-recap",
        "date": "2019-05-21 15:00:17 GMT",
        "timestamp": 1558450817,
        "state": "published",
        "format": "html",
        "reblog_key": "ZensMkOZ",
        "tags": [ "ember", "emberjs", "engineering", "javascript" ],
        "short_url": "https://tmblr.co/ZI3nWx2iLAcn-",
        "summary": "EmberConf 2019 Recap",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 35,
        "title": "EmberConf 2019 Recap",
        "body": "<p>Now that the dust has settled on EmberConf 2019, I thought I&rsquo;d take some time to write up my experience and what I learned.</p><p>I (@oli) was fortunate to be invited to teach my <a href=\"https://broccoli.build\">Broccoli.js</a> workshop this year at <a href=\"https://emberconf.com/\">EmberConf 2019</a> during March in Portland, Oregon. I taught a similar workshop last year at the conference and received great feedback, and so of course was more than happy to come back this year with a refresher course. For those unfamiliar with Broccoli.js, it&rsquo;s a JavaScript build system used to compile JavaScript projects, and it makes up the build system for Ember.js. My workshop covered an introduction to how Broccoli.js works and how to integrate with it into your Ember.js application. The workshop this year was another great success with attendees leaving with skills to turbo charge their Ember.js build pipeline.</p><h2>The conference</h2><p>EmberConf is one of my favourite conferences, not only because I get to geek out with fellow engineers about Ember.js, but mainly due to the stellar organization by <a href=\"https://twitter.com/wifelette\">Leah Silber</a> and the amazing EmberConf team. EmberConf places a big emphasis on inclusivity, with no space for harassing behavior or anything that makes anyone&rsquo;s experience unpleasant as is outlined in their <a href=\"https://emberconf.com/code-of-conduct.html\">code of conduct</a>. It&rsquo;s great to be part of such a welcoming community and the organisers should be very proud of the atmosphere that they foster, I didn&rsquo;t see one unhappy face!</p><figure data-orig-width=\"1080\" data-orig-height=\"1208\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/8f2729010e05518f18073bda744d2fbc/tumblr_inline_prt4mtwdqN1qzyw0r_540.jpg\" data-orig-width=\"1080\" data-orig-height=\"1208\"/></figure><h2>The night before the storm</h2><p>There was a buzz in the air this year, something felt different. After speaking with Tom Dale at the speakers&rsquo; dinner the night before the conference kicked off, it was hard not to feel infected by his excitement for the keynote the following morning. <a href=\"https://twitter.com/tomdale\">Tom Dale</a> and <a href=\"https://twitter.com/wycats\">Yehuda Katz</a> are the parents of Ember, it was their takes on the technology of the web circa 2010 that gave birth to <a href=\"https://sproutcore.com/\">SproutCore</a> and what subsequently evolved into <a href=\"http://emberjs.com\">Ember.js</a>. From their original mantra of <a href=\"https://www.youtube.com/watch?v=OSEXpsVcTxI\">Stop Breaking the Web</a>, to today&rsquo;s JavaScript that you wouldn&rsquo;t dream of writing without a compiler of sorts, Tom and Yehuda have pioneered web technologies for nearly a decade. It&rsquo;s for this reason that when Tom gets excited about something, it&rsquo;s probably worth getting excited about.</p><h2>Keynote time</h2><figure class=\"tmblr-full\" data-orig-height=\"960\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/f7955bc83f547d805a025bd898a8a0aa/tumblr_inline_prt4nbg1VR1qzyw0r_540.jpg\" data-orig-height=\"960\" data-orig-width=\"1280\"/></figure><p>Conference day one rolls around, and it&rsquo;s keynote time, the room is packed with 1000 or so people, the lights dim and Yehuda and Tom approach the stage. As is customary for EmberConf, they start off with reiterating that EmberConf is an inclusive conference and if you feel someone looks uncomfortable to go and interject into the situation to disperse it or speak to a conference organiser. I&rsquo;ve never seen anyone look uncomfortable at EmberConf — quite the opposite for that matter, which is fantastic.</p><p><b>History</b></p><p>Tom covers a bit of Ember&rsquo;s history, being 8 years old this year, and highlights how much the web has changed since Ember was released. The web has evolved so much in the last 8 years, and Ember has kept up and in a lot of cases spearheaded those changes. Ember was founded on the idea of being a framework to &ldquo;Build ambitious web applications&rdquo; and one of the founding values of Ember is &ldquo;Climb the mountain together&rdquo; (borrowed from <a href=\"https://twitter.com/dhh\">DHH</a>). So the mountain is &ldquo;ambitious web applications&rdquo; and we climb it together through shared tools, shipping features, and with big changes we move as a community. This really is a fundamental benefit of Ember, that the shared conventions, tooling, and features avoid bike-shedding over things that we as a community collectively agree on and allows Ember to focus on innovation and new ways of solving common problems in a cohesive manner.</p><p>A quick recap of some of the things that Ember has done in the past 8 years:</p><figure class=\"tmblr-full\" data-orig-height=\"644\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/b114b6bae0695da7e8a77b53476d495d/tumblr_inline_prt4noPIB81qzyw0r_540.png\" data-orig-height=\"644\" data-orig-width=\"1280\"/></figure><p>Things like the six-week release cycle, the RFC process, and engaging in standards and code mods have made it easy and predictable for everyone who uses Ember to upgrade as a community and benefit from all the enhancements that come with that. To that end, the <a href=\"https://emberjs.com/ember-community-survey-2019/\">Ember Community Surveys</a> show that the majority of users are on the latest LTS or newer version of Ember.</p><p>Using the same tools is also important, Ember CLI allows everyone who uses Ember to use the same build tool, and combined with Addons allows for shared extensions to Ember and the build pipeline and allows for the community to experiment and extend Ember in predictable and collaborative ways. Due to the shared conventions anyone opening an Ember application should immediately feel at home and understand how the app is structured, how the build pipeline works, and how additional functionality can be added through shared endeavors.</p><p><b>Stability &amp; Progress</b></p><p>Frameworks must strike a careful balance with the tension between stability and progress. On one hand we don&rsquo;t want to break peoples apps when they upgrade, but at the same time we don&rsquo;t want that to necessarily hold us back from progress, we must climb the mountain together. As such one must strike a balance between aggressive changes cause community fragmentation and cautious changes that leave Ember falling behind its competition.</p><figure class=\"tmblr-full\" data-orig-height=\"647\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/22004c40fa24324330b9594d6e724b7a/tumblr_inline_prt4o6Jdyb1qzyw0r_540.png\" data-orig-height=\"647\" data-orig-width=\"1280\"/></figure><p>During the Ember one lifecycle, lots of aggressive changes were made at the expense of leaving some users behind who were unable to upgrade. Comparatively in the 2.0 release cycle, very few major features landed with most releases saying &ldquo;No new features are added in Ember core&rdquo;, but focused more on internal non-breaking changes to improve stability and coherence. On that note, the fact that the core team managed to ship an <i>entirely</i> new rendering engine under the hood without breaking existing apps, but whilst simultaneously taking advantage of new technologies and improving rendering performance of over 2x is pretty staggering. The Ember 3.0 release cycle tried to strike a balance between shipping things incrementally whilst keeping an eye on the direction of the whole system, driving towards coherence.</p><p><b>Coherence</b></p><p>Coherence is about how features and APIs interact with one another, and making commitments to stability without designing the entire future. For example it means we don&rsquo;t need to land all the changes to a specific programming model in a single release, we can improve the model in one so that new features can be adopted and peoples lives become easier, and finish it off in another thus rounding out the full model and making the API coherent.</p><p>An example of this is the component getter and setter model, and how to get rid of <code>this.get('foo')</code> and <code>this.set('foo', 'bar')</code> within a component and replace them with native JavaScript getters and setters <code>this.foo</code> and <code>this.foo = 'bar'</code> would have in the 2.0 series been held back by not having a good story for the setter and this make an asymmetrical and incoherent API. However in the 3.0 series the decision was made to ship the getter syntax, and continue working on the setter syntax until a good solution had been found, and when it does, symmetry was restored and the API became coherent again. So long as there is a long term goal of where we need to get to, we can get there iteratively without having to land everything at once. This strikes a balance between progress and stability.</p><p><b>Incoherence</b></p><p>The problem with this idea of intentionally making something incoherent for the sake of progress leads to the intermediary state potentially being confusing to developers. This confusion state has been termed &ldquo;the pit of incoherence&rdquo;, it&rsquo;s the middle point between where we are and where we want to be.</p><figure class=\"tmblr-full\" data-orig-height=\"634\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/719050bb7d3cf654da4f1d2b6e59e64c/tumblr_inline_prt4oifRU11qzyw0r_540.png\" data-orig-height=\"634\" data-orig-width=\"1280\"/></figure><p>The side effect of this is the idea of &ldquo;churn&rdquo;, that developers have to continually upgrade their apps and adopt new models and ways of thinking, rolling with the punches if you will. So there needs to be a way to communicate to developers when a set of APIs and features have all landed and are all coherent, that documentation is ready and the set are officially supported by the core teams. Traditionally this would be done by cutting a new major release, but Ember uses major releases to signify things that have been finally removed after being deprecated instead of new features being added. This really is the idea of a major version change, signifying that change have been made without preserving backwards compatibility. What most frameworks tend to do however is bundle end of life features with new features, which makes it difficult to upgrade and developers are faced with not only features being removed, but also having to learn new paradigms for the new major version. As an attempt to solve this, Ember is introducing &ldquo;Editions&rdquo;.</p><p><b>Editions</b></p><p>The idea is to take a snapshot of the framework as a way of signalling to all Ember developers, to all of the core teams, the Ember community and the wide JavaScript community these points of maximum coherence. Essentially &ldquo;these features are all related and they all reinforce and complement one another, they&rsquo;ve all landed, they&rsquo;re all polished and documented, it&rsquo;s a good time for you to go and adopt these features in your application&rdquo;.</p><p>And with that, Ember will be releasing its first &ldquo;official&rdquo; edition: <a href=\"https://emberjs.com/editions/octane/\">Octane</a>. Octane is a snapshot of the Ember framework at a given time when a set of features are cohesive and represent &ldquo;the new way&rdquo; of building an Ember application. These features are as follows:</p><figure class=\"tmblr-full\" data-orig-height=\"647\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/635846faf347f7ad5545ab182f54a2b6/tumblr_inline_prt4oyGj8S1qzyw0r_540.png\" data-orig-height=\"647\" data-orig-width=\"1280\"/></figure><p>Octane is a snapshot, a &ldquo;peak&rdquo; of coherence where the core teams have landed a bunch of great new features and now is a good time for the community to adopt them.</p><p>To find out more about Octane, checkout the <a href=\"https://emberjs.com/editions/octane/\">offical preview</a> website.</p><p><b>Roundup</b></p><p>I think editions is an awesome way of packaging a set of features that together for a cohesive experience, that isn&rsquo;t coupled to a <a href=\"https://en.wikipedia.org/wiki/Software_versioning\">semver</a> major release but allows developers to adopt a complete set of changes in one go, invest in learning the &ldquo;new&rdquo; ways of doing things and collectively we as a community move up the mountain together.</p><p>With the release of Ember Octane, we have a bright future for the Ember project. This edition really does feel like a fundamental shift in the programming model, bringing itself up-to-date with the JavaScript wider community, whilst also ushering in awesome new features like tracked properties, something no other framework is doing as far as I can see.</p><p>I think Tom said it best at the end of the keynote:</p><p>&ldquo;I got into web development in the first place because I wanted to make cool things for my friends, and I really   love the web because I could write a little bit of code, save the file and instantly I got that feedback loop and   I saw something happening on the screen. A little bit of code gave me something really visual and fun and   interactive, and I could share it with my friends and they loved it as much as I did. I want that feeling when   I&rsquo;m building things at work.&rdquo;</p><p>And Tom is absolutely right, using Ember Octane really does have that similar feedback loop, it really does feel fun.</p><figure class=\"tmblr-full\" data-orig-height=\"636\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/1e2b8e4dd6578c877ef943b15a13ff3f/tumblr_inline_prt4phldQt1qzyw0r_540.png\" data-orig-height=\"636\" data-orig-width=\"1280\"/></figure><p>You can find out more about Ember Octane on the Ember.js website <a href=\"https://emberjs.com/editions/octane/\">https://emberjs.com/editions/octane/</a> or watch the EmberConf keynote (and the rest of the conference) in full here: <a href=\"https://www.youtube.com/watch?v=O3RKLHvpUAI\">https://www.youtube.com/watch?v=O3RKLHvpUAI</a></p><p>I personally want to give a huge shout out to all the Ember core team members who have made this possible, bravo 👏</p><figure class=\"tmblr-full\" data-orig-height=\"960\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/0f7672d0c15bb2cba4b9d6f4fe1789d1/tumblr_inline_prt4pqgd1J1qzyw0r_540.jpg\" data-orig-height=\"960\" data-orig-width=\"1280\"/></figure>",
        "reblog": {
          "comment": "<p><p>Now that the dust has settled on EmberConf 2019, I thought I’d take some time to write up my experience and what I learned.</p><p>I (@oli) was fortunate to be invited to teach my <a href=\"https://broccoli.build\">Broccoli.js</a> workshop this year at <a href=\"https://emberconf.com/\">EmberConf 2019</a> during March in Portland, Oregon. I taught a similar workshop last year at the conference and received great feedback, and so of course was more than happy to come back this year with a refresher course. For those unfamiliar with Broccoli.js, it’s a JavaScript build system used to compile JavaScript projects, and it makes up the build system for Ember.js. My workshop covered an introduction to how Broccoli.js works and how to integrate with it into your Ember.js application. The workshop this year was another great success with attendees leaving with skills to turbo charge their Ember.js build pipeline.</p><h2>The conference</h2><p>EmberConf is one of my favourite conferences, not only because I get to geek out with fellow engineers about Ember.js, but mainly due to the stellar organization by <a href=\"https://twitter.com/wifelette\">Leah Silber</a> and the amazing EmberConf team. EmberConf places a big emphasis on inclusivity, with no space for harassing behavior or anything that makes anyone’s experience unpleasant as is outlined in their <a href=\"https://emberconf.com/code-of-conduct.html\">code of conduct</a>. It’s great to be part of such a welcoming community and the organisers should be very proud of the atmosphere that they foster, I didn’t see one unhappy face!</p><figure data-orig-width=\"1080\" data-orig-height=\"1208\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/8f2729010e05518f18073bda744d2fbc/tumblr_inline_prt4mtwdqN1qzyw0r_540.jpg\" data-orig-width=\"1080\" data-orig-height=\"1208\"></figure><h2>The night before the storm</h2><p>There was a buzz in the air this year, something felt different. After speaking with Tom Dale at the speakers’ dinner the night before the conference kicked off, it was hard not to feel infected by his excitement for the keynote the following morning. <a href=\"https://twitter.com/tomdale\">Tom Dale</a> and <a href=\"https://twitter.com/wycats\">Yehuda Katz</a> are the parents of Ember, it was their takes on the technology of the web circa 2010 that gave birth to <a href=\"https://sproutcore.com/\">SproutCore</a> and what subsequently evolved into <a href=\"http://emberjs.com\">Ember.js</a>. From their original mantra of <a href=\"https://www.youtube.com/watch?v=OSEXpsVcTxI\">Stop Breaking the Web</a>, to today’s JavaScript that you wouldn’t dream of writing without a compiler of sorts, Tom and Yehuda have pioneered web technologies for nearly a decade. It’s for this reason that when Tom gets excited about something, it’s probably worth getting excited about.</p><h2>Keynote time</h2><figure class=\"tmblr-full\" data-orig-height=\"960\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/f7955bc83f547d805a025bd898a8a0aa/tumblr_inline_prt4nbg1VR1qzyw0r_540.jpg\" data-orig-height=\"960\" data-orig-width=\"1280\"></figure><p>Conference day one rolls around, and it’s keynote time, the room is packed with 1000 or so people, the lights dim and Yehuda and Tom approach the stage. As is customary for EmberConf, they start off with reiterating that EmberConf is an inclusive conference and if you feel someone looks uncomfortable to go and interject into the situation to disperse it or speak to a conference organiser. I’ve never seen anyone look uncomfortable at EmberConf — quite the opposite for that matter, which is fantastic.</p><p><b>History</b></p><p>Tom covers a bit of Ember’s history, being 8 years old this year, and highlights how much the web has changed since Ember was released. The web has evolved so much in the last 8 years, and Ember has kept up and in a lot of cases spearheaded those changes. Ember was founded on the idea of being a framework to “Build ambitious web applications” and one of the founding values of Ember is “Climb the mountain together” (borrowed from <a href=\"https://twitter.com/dhh\">DHH</a>). So the mountain is “ambitious web applications” and we climb it together through shared tools, shipping features, and with big changes we move as a community. This really is a fundamental benefit of Ember, that the shared conventions, tooling, and features avoid bike-shedding over things that we as a community collectively agree on and allows Ember to focus on innovation and new ways of solving common problems in a cohesive manner.</p><p>A quick recap of some of the things that Ember has done in the past 8 years:</p><figure class=\"tmblr-full\" data-orig-height=\"644\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/b114b6bae0695da7e8a77b53476d495d/tumblr_inline_prt4noPIB81qzyw0r_540.png\" data-orig-height=\"644\" data-orig-width=\"1280\"></figure><p>Things like the six-week release cycle, the RFC process, and engaging in standards and code mods have made it easy and predictable for everyone who uses Ember to upgrade as a community and benefit from all the enhancements that come with that. To that end, the <a href=\"https://emberjs.com/ember-community-survey-2019/\">Ember Community Surveys</a> show that the majority of users are on the latest LTS or newer version of Ember.</p><p>Using the same tools is also important, Ember CLI allows everyone who uses Ember to use the same build tool, and combined with Addons allows for shared extensions to Ember and the build pipeline and allows for the community to experiment and extend Ember in predictable and collaborative ways. Due to the shared conventions anyone opening an Ember application should immediately feel at home and understand how the app is structured, how the build pipeline works, and how additional functionality can be added through shared endeavors.</p><p><b>Stability &amp; Progress</b></p><p>Frameworks must strike a careful balance with the tension between stability and progress. On one hand we don’t want to break peoples apps when they upgrade, but at the same time we don’t want that to necessarily hold us back from progress, we must climb the mountain together. As such one must strike a balance between aggressive changes cause community fragmentation and cautious changes that leave Ember falling behind its competition.</p><figure class=\"tmblr-full\" data-orig-height=\"647\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/22004c40fa24324330b9594d6e724b7a/tumblr_inline_prt4o6Jdyb1qzyw0r_540.png\" data-orig-height=\"647\" data-orig-width=\"1280\"></figure><p>During the Ember one lifecycle, lots of aggressive changes were made at the expense of leaving some users behind who were unable to upgrade. Comparatively in the 2.0 release cycle, very few major features landed with most releases saying “No new features are added in Ember core”, but focused more on internal non-breaking changes to improve stability and coherence. On that note, the fact that the core team managed to ship an <i>entirely</i> new rendering engine under the hood without breaking existing apps, but whilst simultaneously taking advantage of new technologies and improving rendering performance of over 2x is pretty staggering. The Ember 3.0 release cycle tried to strike a balance between shipping things incrementally whilst keeping an eye on the direction of the whole system, driving towards coherence.</p><p><b>Coherence</b></p><p>Coherence is about how features and APIs interact with one another, and making commitments to stability without designing the entire future. For example it means we don’t need to land all the changes to a specific programming model in a single release, we can improve the model in one so that new features can be adopted and peoples lives become easier, and finish it off in another thus rounding out the full model and making the API coherent.</p><p>An example of this is the component getter and setter model, and how to get rid of <code>this.get('foo')</code> and <code>this.set('foo', 'bar')</code> within a component and replace them with native JavaScript getters and setters <code>this.foo</code> and <code>this.foo = 'bar'</code> would have in the 2.0 series been held back by not having a good story for the setter and this make an asymmetrical and incoherent API. However in the 3.0 series the decision was made to ship the getter syntax, and continue working on the setter syntax until a good solution had been found, and when it does, symmetry was restored and the API became coherent again. So long as there is a long term goal of where we need to get to, we can get there iteratively without having to land everything at once. This strikes a balance between progress and stability.</p><p><b>Incoherence</b></p><p>The problem with this idea of intentionally making something incoherent for the sake of progress leads to the intermediary state potentially being confusing to developers. This confusion state has been termed “the pit of incoherence”, it’s the middle point between where we are and where we want to be.</p><figure class=\"tmblr-full\" data-orig-height=\"634\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/719050bb7d3cf654da4f1d2b6e59e64c/tumblr_inline_prt4oifRU11qzyw0r_540.png\" data-orig-height=\"634\" data-orig-width=\"1280\"></figure><p>The side effect of this is the idea of “churn”, that developers have to continually upgrade their apps and adopt new models and ways of thinking, rolling with the punches if you will. So there needs to be a way to communicate to developers when a set of APIs and features have all landed and are all coherent, that documentation is ready and the set are officially supported by the core teams. Traditionally this would be done by cutting a new major release, but Ember uses major releases to signify things that have been finally removed after being deprecated instead of new features being added. This really is the idea of a major version change, signifying that change have been made without preserving backwards compatibility. What most frameworks tend to do however is bundle end of life features with new features, which makes it difficult to upgrade and developers are faced with not only features being removed, but also having to learn new paradigms for the new major version. As an attempt to solve this, Ember is introducing “Editions”.</p><p><b>Editions</b></p><p>The idea is to take a snapshot of the framework as a way of signalling to all Ember developers, to all of the core teams, the Ember community and the wide JavaScript community these points of maximum coherence. Essentially “these features are all related and they all reinforce and complement one another, they’ve all landed, they’re all polished and documented, it’s a good time for you to go and adopt these features in your application”.</p><p>And with that, Ember will be releasing its first “official” edition: <a href=\"https://emberjs.com/editions/octane/\">Octane</a>. Octane is a snapshot of the Ember framework at a given time when a set of features are cohesive and represent “the new way” of building an Ember application. These features are as follows:</p><figure class=\"tmblr-full\" data-orig-height=\"647\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/635846faf347f7ad5545ab182f54a2b6/tumblr_inline_prt4oyGj8S1qzyw0r_540.png\" data-orig-height=\"647\" data-orig-width=\"1280\"></figure><p>Octane is a snapshot, a “peak” of coherence where the core teams have landed a bunch of great new features and now is a good time for the community to adopt them.</p><p>To find out more about Octane, checkout the <a href=\"https://emberjs.com/editions/octane/\">offical preview</a> website.</p><p><b>Roundup</b></p><p>I think editions is an awesome way of packaging a set of features that together for a cohesive experience, that isn’t coupled to a <a href=\"https://en.wikipedia.org/wiki/Software_versioning\">semver</a> major release but allows developers to adopt a complete set of changes in one go, invest in learning the “new” ways of doing things and collectively we as a community move up the mountain together.</p><p>With the release of Ember Octane, we have a bright future for the Ember project. This edition really does feel like a fundamental shift in the programming model, bringing itself up-to-date with the JavaScript wider community, whilst also ushering in awesome new features like tracked properties, something no other framework is doing as far as I can see.</p><p>I think Tom said it best at the end of the keynote:</p><p>“I got into web development in the first place because I wanted to make cool things for my friends, and I really   love the web because I could write a little bit of code, save the file and instantly I got that feedback loop and   I saw something happening on the screen. A little bit of code gave me something really visual and fun and   interactive, and I could share it with my friends and they loved it as much as I did. I want that feeling when   I’m building things at work.”</p><p>And Tom is absolutely right, using Ember Octane really does have that similar feedback loop, it really does feel fun.</p><figure class=\"tmblr-full\" data-orig-height=\"636\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/1e2b8e4dd6578c877ef943b15a13ff3f/tumblr_inline_prt4phldQt1qzyw0r_540.png\" data-orig-height=\"636\" data-orig-width=\"1280\"></figure><p>You can find out more about Ember Octane on the Ember.js website <a href=\"https://emberjs.com/editions/octane/\">https://emberjs.com/editions/octane/</a> or watch the EmberConf keynote (and the rest of the conference) in full here: <a href=\"https://www.youtube.com/watch?v=O3RKLHvpUAI\">https://www.youtube.com/watch?v=O3RKLHvpUAI</a></p><p>I personally want to give a huge shout out to all the Ember core team members who have made this possible, bravo 👏</p><figure class=\"tmblr-full\" data-orig-height=\"960\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/0f7672d0c15bb2cba4b9d6f4fe1789d1/tumblr_inline_prt4pqgd1J1qzyw0r_540.jpg\" data-orig-height=\"960\" data-orig-width=\"1280\"></figure></p>",
          "tree_html": ""
        },
        "trail": [
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "185038695551" },
            "content_raw": "<p><p>Now that the dust has settled on EmberConf 2019, I thought I’d take some time to write up my experience and what I learned.</p><p>I (@oli) was fortunate to be invited to teach my <a href=\"https://broccoli.build\">Broccoli.js</a> workshop this year at <a href=\"https://emberconf.com/\">EmberConf 2019</a> during March in Portland, Oregon. I taught a similar workshop last year at the conference and received great feedback, and so of course was more than happy to come back this year with a refresher course. For those unfamiliar with Broccoli.js, it’s a JavaScript build system used to compile JavaScript projects, and it makes up the build system for Ember.js. My workshop covered an introduction to how Broccoli.js works and how to integrate with it into your Ember.js application. The workshop this year was another great success with attendees leaving with skills to turbo charge their Ember.js build pipeline.</p><h2>The conference</h2><p>EmberConf is one of my favourite conferences, not only because I get to geek out with fellow engineers about Ember.js, but mainly due to the stellar organization by <a href=\"https://twitter.com/wifelette\">Leah Silber</a> and the amazing EmberConf team. EmberConf places a big emphasis on inclusivity, with no space for harassing behavior or anything that makes anyone’s experience unpleasant as is outlined in their <a href=\"https://emberconf.com/code-of-conduct.html\">code of conduct</a>. It’s great to be part of such a welcoming community and the organisers should be very proud of the atmosphere that they foster, I didn’t see one unhappy face!</p><figure data-orig-width=\"1080\" data-orig-height=\"1208\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/8f2729010e05518f18073bda744d2fbc/tumblr_inline_prt4mtwdqN1qzyw0r_540.jpg\" data-orig-width=\"1080\" data-orig-height=\"1208\"></figure><h2>The night before the storm</h2><p>There was a buzz in the air this year, something felt different. After speaking with Tom Dale at the speakers’ dinner the night before the conference kicked off, it was hard not to feel infected by his excitement for the keynote the following morning. <a href=\"https://twitter.com/tomdale\">Tom Dale</a> and <a href=\"https://twitter.com/wycats\">Yehuda Katz</a> are the parents of Ember, it was their takes on the technology of the web circa 2010 that gave birth to <a href=\"https://sproutcore.com/\">SproutCore</a> and what subsequently evolved into <a href=\"http://emberjs.com\">Ember.js</a>. From their original mantra of <a href=\"https://www.youtube.com/watch?v=OSEXpsVcTxI\">Stop Breaking the Web</a>, to today’s JavaScript that you wouldn’t dream of writing without a compiler of sorts, Tom and Yehuda have pioneered web technologies for nearly a decade. It’s for this reason that when Tom gets excited about something, it’s probably worth getting excited about.</p><h2>Keynote time</h2><figure class=\"tmblr-full\" data-orig-height=\"960\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/f7955bc83f547d805a025bd898a8a0aa/tumblr_inline_prt4nbg1VR1qzyw0r_540.jpg\" data-orig-height=\"960\" data-orig-width=\"1280\"></figure><p>Conference day one rolls around, and it’s keynote time, the room is packed with 1000 or so people, the lights dim and Yehuda and Tom approach the stage. As is customary for EmberConf, they start off with reiterating that EmberConf is an inclusive conference and if you feel someone looks uncomfortable to go and interject into the situation to disperse it or speak to a conference organiser. I’ve never seen anyone look uncomfortable at EmberConf — quite the opposite for that matter, which is fantastic.</p><p><b>History</b></p><p>Tom covers a bit of Ember’s history, being 8 years old this year, and highlights how much the web has changed since Ember was released. The web has evolved so much in the last 8 years, and Ember has kept up and in a lot of cases spearheaded those changes. Ember was founded on the idea of being a framework to “Build ambitious web applications” and one of the founding values of Ember is “Climb the mountain together” (borrowed from <a href=\"https://twitter.com/dhh\">DHH</a>). So the mountain is “ambitious web applications” and we climb it together through shared tools, shipping features, and with big changes we move as a community. This really is a fundamental benefit of Ember, that the shared conventions, tooling, and features avoid bike-shedding over things that we as a community collectively agree on and allows Ember to focus on innovation and new ways of solving common problems in a cohesive manner.</p><p>A quick recap of some of the things that Ember has done in the past 8 years:</p><figure class=\"tmblr-full\" data-orig-height=\"644\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/b114b6bae0695da7e8a77b53476d495d/tumblr_inline_prt4noPIB81qzyw0r_540.png\" data-orig-height=\"644\" data-orig-width=\"1280\"></figure><p>Things like the six-week release cycle, the RFC process, and engaging in standards and code mods have made it easy and predictable for everyone who uses Ember to upgrade as a community and benefit from all the enhancements that come with that. To that end, the <a href=\"https://emberjs.com/ember-community-survey-2019/\">Ember Community Surveys</a> show that the majority of users are on the latest LTS or newer version of Ember.</p><p>Using the same tools is also important, Ember CLI allows everyone who uses Ember to use the same build tool, and combined with Addons allows for shared extensions to Ember and the build pipeline and allows for the community to experiment and extend Ember in predictable and collaborative ways. Due to the shared conventions anyone opening an Ember application should immediately feel at home and understand how the app is structured, how the build pipeline works, and how additional functionality can be added through shared endeavors.</p><p><b>Stability &amp; Progress</b></p><p>Frameworks must strike a careful balance with the tension between stability and progress. On one hand we don’t want to break peoples apps when they upgrade, but at the same time we don’t want that to necessarily hold us back from progress, we must climb the mountain together. As such one must strike a balance between aggressive changes cause community fragmentation and cautious changes that leave Ember falling behind its competition.</p><figure class=\"tmblr-full\" data-orig-height=\"647\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/22004c40fa24324330b9594d6e724b7a/tumblr_inline_prt4o6Jdyb1qzyw0r_540.png\" data-orig-height=\"647\" data-orig-width=\"1280\"></figure><p>During the Ember one lifecycle, lots of aggressive changes were made at the expense of leaving some users behind who were unable to upgrade. Comparatively in the 2.0 release cycle, very few major features landed with most releases saying “No new features are added in Ember core”, but focused more on internal non-breaking changes to improve stability and coherence. On that note, the fact that the core team managed to ship an <i>entirely</i> new rendering engine under the hood without breaking existing apps, but whilst simultaneously taking advantage of new technologies and improving rendering performance of over 2x is pretty staggering. The Ember 3.0 release cycle tried to strike a balance between shipping things incrementally whilst keeping an eye on the direction of the whole system, driving towards coherence.</p><p><b>Coherence</b></p><p>Coherence is about how features and APIs interact with one another, and making commitments to stability without designing the entire future. For example it means we don’t need to land all the changes to a specific programming model in a single release, we can improve the model in one so that new features can be adopted and peoples lives become easier, and finish it off in another thus rounding out the full model and making the API coherent.</p><p>An example of this is the component getter and setter model, and how to get rid of <code>this.get('foo')</code> and <code>this.set('foo', 'bar')</code> within a component and replace them with native JavaScript getters and setters <code>this.foo</code> and <code>this.foo = 'bar'</code> would have in the 2.0 series been held back by not having a good story for the setter and this make an asymmetrical and incoherent API. However in the 3.0 series the decision was made to ship the getter syntax, and continue working on the setter syntax until a good solution had been found, and when it does, symmetry was restored and the API became coherent again. So long as there is a long term goal of where we need to get to, we can get there iteratively without having to land everything at once. This strikes a balance between progress and stability.</p><p><b>Incoherence</b></p><p>The problem with this idea of intentionally making something incoherent for the sake of progress leads to the intermediary state potentially being confusing to developers. This confusion state has been termed “the pit of incoherence”, it’s the middle point between where we are and where we want to be.</p><figure class=\"tmblr-full\" data-orig-height=\"634\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/719050bb7d3cf654da4f1d2b6e59e64c/tumblr_inline_prt4oifRU11qzyw0r_540.png\" data-orig-height=\"634\" data-orig-width=\"1280\"></figure><p>The side effect of this is the idea of “churn”, that developers have to continually upgrade their apps and adopt new models and ways of thinking, rolling with the punches if you will. So there needs to be a way to communicate to developers when a set of APIs and features have all landed and are all coherent, that documentation is ready and the set are officially supported by the core teams. Traditionally this would be done by cutting a new major release, but Ember uses major releases to signify things that have been finally removed after being deprecated instead of new features being added. This really is the idea of a major version change, signifying that change have been made without preserving backwards compatibility. What most frameworks tend to do however is bundle end of life features with new features, which makes it difficult to upgrade and developers are faced with not only features being removed, but also having to learn new paradigms for the new major version. As an attempt to solve this, Ember is introducing “Editions”.</p><p><b>Editions</b></p><p>The idea is to take a snapshot of the framework as a way of signalling to all Ember developers, to all of the core teams, the Ember community and the wide JavaScript community these points of maximum coherence. Essentially “these features are all related and they all reinforce and complement one another, they’ve all landed, they’re all polished and documented, it’s a good time for you to go and adopt these features in your application”.</p><p>And with that, Ember will be releasing its first “official” edition: <a href=\"https://emberjs.com/editions/octane/\">Octane</a>. Octane is a snapshot of the Ember framework at a given time when a set of features are cohesive and represent “the new way” of building an Ember application. These features are as follows:</p><figure class=\"tmblr-full\" data-orig-height=\"647\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/635846faf347f7ad5545ab182f54a2b6/tumblr_inline_prt4oyGj8S1qzyw0r_540.png\" data-orig-height=\"647\" data-orig-width=\"1280\"></figure><p>Octane is a snapshot, a “peak” of coherence where the core teams have landed a bunch of great new features and now is a good time for the community to adopt them.</p><p>To find out more about Octane, checkout the <a href=\"https://emberjs.com/editions/octane/\">offical preview</a> website.</p><p><b>Roundup</b></p><p>I think editions is an awesome way of packaging a set of features that together for a cohesive experience, that isn’t coupled to a <a href=\"https://en.wikipedia.org/wiki/Software_versioning\">semver</a> major release but allows developers to adopt a complete set of changes in one go, invest in learning the “new” ways of doing things and collectively we as a community move up the mountain together.</p><p>With the release of Ember Octane, we have a bright future for the Ember project. This edition really does feel like a fundamental shift in the programming model, bringing itself up-to-date with the JavaScript wider community, whilst also ushering in awesome new features like tracked properties, something no other framework is doing as far as I can see.</p><p>I think Tom said it best at the end of the keynote:</p><p>“I got into web development in the first place because I wanted to make cool things for my friends, and I really   love the web because I could write a little bit of code, save the file and instantly I got that feedback loop and   I saw something happening on the screen. A little bit of code gave me something really visual and fun and   interactive, and I could share it with my friends and they loved it as much as I did. I want that feeling when   I’m building things at work.”</p><p>And Tom is absolutely right, using Ember Octane really does have that similar feedback loop, it really does feel fun.</p><figure class=\"tmblr-full\" data-orig-height=\"636\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/1e2b8e4dd6578c877ef943b15a13ff3f/tumblr_inline_prt4phldQt1qzyw0r_540.png\" data-orig-height=\"636\" data-orig-width=\"1280\"></figure><p>You can find out more about Ember Octane on the Ember.js website <a href=\"https://emberjs.com/editions/octane/\">https://emberjs.com/editions/octane/</a> or watch the EmberConf keynote (and the rest of the conference) in full here: <a href=\"https://www.youtube.com/watch?v=O3RKLHvpUAI\">https://www.youtube.com/watch?v=O3RKLHvpUAI</a></p><p>I personally want to give a huge shout out to all the Ember core team members who have made this possible, bravo 👏</p><figure class=\"tmblr-full\" data-orig-height=\"960\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/0f7672d0c15bb2cba4b9d6f4fe1789d1/tumblr_inline_prt4pqgd1J1qzyw0r_540.jpg\" data-orig-height=\"960\" data-orig-width=\"1280\"></figure></p>",
            "content": "<p><p>Now that the dust has settled on EmberConf 2019, I thought I&rsquo;d take some time to write up my experience and what I learned.</p><p>I (@oli) was fortunate to be invited to teach my <a href=\"https://broccoli.build\">Broccoli.js</a> workshop this year at <a href=\"https://emberconf.com/\">EmberConf 2019</a> during March in Portland, Oregon. I taught a similar workshop last year at the conference and received great feedback, and so of course was more than happy to come back this year with a refresher course. For those unfamiliar with Broccoli.js, it&rsquo;s a JavaScript build system used to compile JavaScript projects, and it makes up the build system for Ember.js. My workshop covered an introduction to how Broccoli.js works and how to integrate with it into your Ember.js application. The workshop this year was another great success with attendees leaving with skills to turbo charge their Ember.js build pipeline.</p><h2>The conference</h2><p>EmberConf is one of my favourite conferences, not only because I get to geek out with fellow engineers about Ember.js, but mainly due to the stellar organization by <a href=\"https://twitter.com/wifelette\">Leah Silber</a> and the amazing EmberConf team. EmberConf places a big emphasis on inclusivity, with no space for harassing behavior or anything that makes anyone&rsquo;s experience unpleasant as is outlined in their <a href=\"https://emberconf.com/code-of-conduct.html\">code of conduct</a>. It&rsquo;s great to be part of such a welcoming community and the organisers should be very proud of the atmosphere that they foster, I didn&rsquo;t see one unhappy face!</p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/8f2729010e05518f18073bda744d2fbc/tumblr_inline_prt4mtwdqN1qzyw0r_540.jpg\" alt=\"image\" class=\"\"/></figure><h2>The night before the storm</h2><p>There was a buzz in the air this year, something felt different. After speaking with Tom Dale at the speakers&rsquo; dinner the night before the conference kicked off, it was hard not to feel infected by his excitement for the keynote the following morning. <a href=\"https://twitter.com/tomdale\">Tom Dale</a> and <a href=\"https://twitter.com/wycats\">Yehuda Katz</a> are the parents of Ember, it was their takes on the technology of the web circa 2010 that gave birth to <a href=\"https://sproutcore.com/\">SproutCore</a> and what subsequently evolved into <a href=\"http://emberjs.com\">Ember.js</a>. From their original mantra of <a href=\"https://www.youtube.com/watch?v=OSEXpsVcTxI\">Stop Breaking the Web</a>, to today&rsquo;s JavaScript that you wouldn&rsquo;t dream of writing without a compiler of sorts, Tom and Yehuda have pioneered web technologies for nearly a decade. It&rsquo;s for this reason that when Tom gets excited about something, it&rsquo;s probably worth getting excited about.</p><h2>Keynote time</h2><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/f7955bc83f547d805a025bd898a8a0aa/tumblr_inline_prt4nbg1VR1qzyw0r_540.jpg\" alt=\"image\" class=\"\"/></figure><p>Conference day one rolls around, and it&rsquo;s keynote time, the room is packed with 1000 or so people, the lights dim and Yehuda and Tom approach the stage. As is customary for EmberConf, they start off with reiterating that EmberConf is an inclusive conference and if you feel someone looks uncomfortable to go and interject into the situation to disperse it or speak to a conference organiser. I&rsquo;ve never seen anyone look uncomfortable at EmberConf &mdash; quite the opposite for that matter, which is fantastic.</p><p><b>History</b></p><p>Tom covers a bit of Ember&rsquo;s history, being 8 years old this year, and highlights how much the web has changed since Ember was released. The web has evolved so much in the last 8 years, and Ember has kept up and in a lot of cases spearheaded those changes. Ember was founded on the idea of being a framework to &ldquo;Build ambitious web applications&rdquo; and one of the founding values of Ember is &ldquo;Climb the mountain together&rdquo; (borrowed from <a href=\"https://twitter.com/dhh\">DHH</a>). So the mountain is &ldquo;ambitious web applications&rdquo; and we climb it together through shared tools, shipping features, and with big changes we move as a community. This really is a fundamental benefit of Ember, that the shared conventions, tooling, and features avoid bike-shedding over things that we as a community collectively agree on and allows Ember to focus on innovation and new ways of solving common problems in a cohesive manner.</p><p>A quick recap of some of the things that Ember has done in the past 8 years:</p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/b114b6bae0695da7e8a77b53476d495d/tumblr_inline_prt4noPIB81qzyw0r_540.png\" alt=\"image\" class=\"\"/></figure><p>Things like the six-week release cycle, the RFC process, and engaging in standards and code mods have made it easy and predictable for everyone who uses Ember to upgrade as a community and benefit from all the enhancements that come with that. To that end, the <a href=\"https://emberjs.com/ember-community-survey-2019/\">Ember Community Surveys</a> show that the majority of users are on the latest LTS or newer version of Ember.</p><p>Using the same tools is also important, Ember CLI allows everyone who uses Ember to use the same build tool, and combined with Addons allows for shared extensions to Ember and the build pipeline and allows for the community to experiment and extend Ember in predictable and collaborative ways. Due to the shared conventions anyone opening an Ember application should immediately feel at home and understand how the app is structured, how the build pipeline works, and how additional functionality can be added through shared endeavors.</p><p><b>Stability &amp; Progress</b></p><p>Frameworks must strike a careful balance with the tension between stability and progress. On one hand we don&rsquo;t want to break peoples apps when they upgrade, but at the same time we don&rsquo;t want that to necessarily hold us back from progress, we must climb the mountain together. As such one must strike a balance between aggressive changes cause community fragmentation and cautious changes that leave Ember falling behind its competition.</p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/22004c40fa24324330b9594d6e724b7a/tumblr_inline_prt4o6Jdyb1qzyw0r_540.png\" alt=\"image\" class=\"\"/></figure><p>During the Ember one lifecycle, lots of aggressive changes were made at the expense of leaving some users behind who were unable to upgrade. Comparatively in the 2.0 release cycle, very few major features landed with most releases saying &ldquo;No new features are added in Ember core&rdquo;, but focused more on internal non-breaking changes to improve stability and coherence. On that note, the fact that the core team managed to ship an <i>entirely</i> new rendering engine under the hood without breaking existing apps, but whilst simultaneously taking advantage of new technologies and improving rendering performance of over 2x is pretty staggering. The Ember 3.0 release cycle tried to strike a balance between shipping things incrementally whilst keeping an eye on the direction of the whole system, driving towards coherence.</p><p><b>Coherence</b></p><p>Coherence is about how features and APIs interact with one another, and making commitments to stability without designing the entire future. For example it means we don&rsquo;t need to land all the changes to a specific programming model in a single release, we can improve the model in one so that new features can be adopted and peoples lives become easier, and finish it off in another thus rounding out the full model and making the API coherent.</p><p>An example of this is the component getter and setter model, and how to get rid of <code>this.get('foo')</code> and <code>this.set('foo', 'bar')</code> within a component and replace them with native JavaScript getters and setters <code>this.foo</code> and <code>this.foo = 'bar'</code> would have in the 2.0 series been held back by not having a good story for the setter and this make an asymmetrical and incoherent API. However in the 3.0 series the decision was made to ship the getter syntax, and continue working on the setter syntax until a good solution had been found, and when it does, symmetry was restored and the API became coherent again. So long as there is a long term goal of where we need to get to, we can get there iteratively without having to land everything at once. This strikes a balance between progress and stability.</p><p><b>Incoherence</b></p><p>The problem with this idea of intentionally making something incoherent for the sake of progress leads to the intermediary state potentially being confusing to developers. This confusion state has been termed &ldquo;the pit of incoherence&rdquo;, it&rsquo;s the middle point between where we are and where we want to be.</p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/719050bb7d3cf654da4f1d2b6e59e64c/tumblr_inline_prt4oifRU11qzyw0r_540.png\" alt=\"image\" class=\"\"/></figure><p>The side effect of this is the idea of &ldquo;churn&rdquo;, that developers have to continually upgrade their apps and adopt new models and ways of thinking, rolling with the punches if you will. So there needs to be a way to communicate to developers when a set of APIs and features have all landed and are all coherent, that documentation is ready and the set are officially supported by the core teams. Traditionally this would be done by cutting a new major release, but Ember uses major releases to signify things that have been finally removed after being deprecated instead of new features being added. This really is the idea of a major version change, signifying that change have been made without preserving backwards compatibility. What most frameworks tend to do however is bundle end of life features with new features, which makes it difficult to upgrade and developers are faced with not only features being removed, but also having to learn new paradigms for the new major version. As an attempt to solve this, Ember is introducing &ldquo;Editions&rdquo;.</p><p><b>Editions</b></p><p>The idea is to take a snapshot of the framework as a way of signalling to all Ember developers, to all of the core teams, the Ember community and the wide JavaScript community these points of maximum coherence. Essentially &ldquo;these features are all related and they all reinforce and complement one another, they&rsquo;ve all landed, they&rsquo;re all polished and documented, it&rsquo;s a good time for you to go and adopt these features in your application&rdquo;.</p><p>And with that, Ember will be releasing its first &ldquo;official&rdquo; edition: <a href=\"https://emberjs.com/editions/octane/\">Octane</a>. Octane is a snapshot of the Ember framework at a given time when a set of features are cohesive and represent &ldquo;the new way&rdquo; of building an Ember application. These features are as follows:</p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/635846faf347f7ad5545ab182f54a2b6/tumblr_inline_prt4oyGj8S1qzyw0r_540.png\" alt=\"image\" class=\"\"/></figure><p>Octane is a snapshot, a &ldquo;peak&rdquo; of coherence where the core teams have landed a bunch of great new features and now is a good time for the community to adopt them.</p><p>To find out more about Octane, checkout the <a href=\"https://emberjs.com/editions/octane/\">offical preview</a> website.</p><p><b>Roundup</b></p><p>I think editions is an awesome way of packaging a set of features that together for a cohesive experience, that isn&rsquo;t coupled to a <a href=\"https://en.wikipedia.org/wiki/Software_versioning\">semver</a> major release but allows developers to adopt a complete set of changes in one go, invest in learning the &ldquo;new&rdquo; ways of doing things and collectively we as a community move up the mountain together.</p><p>With the release of Ember Octane, we have a bright future for the Ember project. This edition really does feel like a fundamental shift in the programming model, bringing itself up-to-date with the JavaScript wider community, whilst also ushering in awesome new features like tracked properties, something no other framework is doing as far as I can see.</p><p>I think Tom said it best at the end of the keynote:</p><p>&ldquo;I got into web development in the first place because I wanted to make cool things for my friends, and I really   love the web because I could write a little bit of code, save the file and instantly I got that feedback loop and   I saw something happening on the screen. A little bit of code gave me something really visual and fun and   interactive, and I could share it with my friends and they loved it as much as I did. I want that feeling when   I&rsquo;m building things at work.&rdquo;</p><p>And Tom is absolutely right, using Ember Octane really does have that similar feedback loop, it really does feel fun.</p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/1e2b8e4dd6578c877ef943b15a13ff3f/tumblr_inline_prt4phldQt1qzyw0r_540.png\" alt=\"image\" class=\"\"/></figure><p>You can find out more about Ember Octane on the Ember.js website <a href=\"https://emberjs.com/editions/octane/\">https://emberjs.com/editions/octane/</a> or watch the EmberConf keynote (and the rest of the conference) in full here: <a href=\"https://www.youtube.com/watch?v=O3RKLHvpUAI\">https://www.youtube.com/watch?v=O3RKLHvpUAI</a></p><p>I personally want to give a huge shout out to all the Ember core team members who have made this possible, bravo &#128079;</p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/0f7672d0c15bb2cba4b9d6f4fe1789d1/tumblr_inline_prt4pqgd1J1qzyw0r_540.jpg\" alt=\"image\" class=\"\"/></figure></p>",
            "is_current_item": true,
            "is_root_item": true
          }
        ],
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1575093805,
            "blog_name": "profoundtoadpsychicpickle",
            "blog_uuid": "t:pf_Tkwi3fzIm_Fsi9X_wdA",
            "blog_url": "https://profoundtoadpsychicpickle.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1574106882,
            "blog_name": "swimmingpieegglight",
            "blog_uuid": "t:X-RqGbgZvRuZAqiiop8WXw",
            "blog_url": "https://swimmingpieegglight.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1572086972,
            "blog_name": "rainbowlight100",
            "blog_uuid": "t:q7Ienh9NLpUb4SJx18bj5w",
            "blog_url": "https://rainbowlight100.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570659695,
            "blog_name": "alex0two",
            "blog_uuid": "t:7VQwPTcur8RLCwixu9q8dw",
            "blog_url": "https://alex0two.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1560814026,
            "blog_name": "the-ronnie-junior",
            "blog_uuid": "t:cio9H7RGU2e4VmQnqh44nQ",
            "blog_url": "https://the-ronnie-junior.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558991997,
            "blog_name": "unchi111-blog",
            "blog_uuid": "t:lP6xdKgLw0qmaui2aYEwGA",
            "blog_url": "https://unchi111-blog.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558685156,
            "blog_name": "ravenwolf-queenofinsanity",
            "blog_uuid": "t:RjJceqF0h6HhGuVYNnAMyQ",
            "blog_url": "https://ravenwolf-queenofinsanity.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1558552411,
            "blog_name": "adulthoodisokay",
            "blog_uuid": "t:ionxtXJaG_1fNNC-dcqdtw",
            "blog_url": "https://adulthoodisokay.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558530544,
            "blog_name": "dharmendra1998",
            "blog_uuid": "t:V__nG3xpukCNqWqyuikL9w",
            "blog_url": "https://dharmendra1998.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558521670,
            "blog_name": "sabinagraces",
            "blog_uuid": "t:yLXT0Rvjae00_LhRQFhKsA",
            "blog_url": "https://sabinagraces.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558511564,
            "blog_name": "meganecamera",
            "blog_uuid": "t:K3ylVRDxITtuXzSjSU7NrA",
            "blog_url": "https://meganecamera.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558477779,
            "blog_name": "billydalto",
            "blog_uuid": "t:5N9N6St3iKW1rGbTAY9QyA",
            "blog_url": "https://diatomparty.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1558475015,
            "blog_name": "savvyflowers",
            "blog_uuid": "t:PbS-Dq-0rw_1AjPvj9LtcA",
            "blog_url": "https://savvyflowers.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558474405,
            "blog_name": "benevolentgentleman",
            "blog_uuid": "t:0Rt9iUX3nfOgQiMzN-ihBw",
            "blog_url": "https://benevolentgentleman.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1558471393,
            "blog_name": "ishiduca",
            "blog_uuid": "t:8UhK7SI8Gn3GI71okqGxjw",
            "blog_url": "https://ishiduca.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558468004,
            "blog_name": "atomscrow",
            "blog_uuid": "t:0-EEPcLq7wfgExipO3HvDQ",
            "blog_url": "https://atomscrow.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558463691,
            "blog_name": "seeiamgroot",
            "blog_uuid": "t:9YY_NeigdAG5UA0jHxJj8g",
            "blog_url": "https://seeiamgroot.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1558461649,
            "blog_name": "thelovelycherry",
            "blog_uuid": "t:SEc5Wk4ueoY0OEQk8faUeA",
            "blog_url": "https://thelovelycherry.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "185041918882",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1558461647,
            "blog_name": "thelovelycherry",
            "blog_uuid": "t:SEc5Wk4ueoY0OEQk8faUeA",
            "blog_url": "https://thelovelycherry.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1558461485,
            "blog_name": "breadstyx",
            "blog_uuid": "t:I4AIgflpBs0pHeYlowWAaA",
            "blog_url": "https://breadstyx.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1558460384,
            "blog_name": "nagaino",
            "blog_uuid": "t:gRFtLTiv-FFqHVktKgVIcQ",
            "blog_url": "https://nagaino.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558456735,
            "blog_name": "detourist",
            "blog_uuid": "t:aRN2z7Uu2StbJMTVJdhElA",
            "blog_url": "https://detourist.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558454701,
            "blog_name": "smbhcrew",
            "blog_uuid": "t:GTnNcvr3O-WbazKbKNZWYg",
            "blog_url": "https://smbhcrew.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558454514,
            "blog_name": "toastygoast",
            "blog_uuid": "t:ZhKwD9QlQ5juQGvleHPMfw",
            "blog_url": "https://toastygoast.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1558453541,
            "blog_name": "pernoctatious-charrette",
            "blog_uuid": "t:acmyP1udOacTwTQUkchXrA",
            "blog_url": "https://pernoctatious-charrette.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558452643,
            "blog_name": "etucker",
            "blog_uuid": "t:-zulXd6oSW1TZHpnehAA_w",
            "blog_url": "https://etucker.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558452076,
            "blog_name": "mickey-the-doll",
            "blog_uuid": "t:KR2-8cxvi6ImyC9leZdkHQ",
            "blog_url": "https://mickey-the-doll.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1558452000,
            "blog_name": "designpatternpirate",
            "blog_uuid": "t:maLHAce43iqGUZhFVwMfhQ",
            "blog_url": "https://designpatternpirate.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1558451634,
            "blog_name": "kingofcandyland",
            "blog_uuid": "t:411DpD5v4aF1rhaPGukmIQ",
            "blog_url": "https://kingofcandyland.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1558451114,
            "blog_name": "oli",
            "blog_uuid": "t:paW_ls0hL4OtPApnHofdFQ",
            "blog_url": "https://oli.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "185038784946",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1558451096,
            "blog_name": "oli",
            "blog_uuid": "t:paW_ls0hL4OtPApnHofdFQ",
            "blog_url": "https://oli.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1558450974,
            "blog_name": "trmw",
            "blog_uuid": "t:srx-JKqxC-WuZV6wvWDd1g",
            "blog_url": "https://www.trmw.org/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "posted",
            "timestamp": 1558450817,
            "blog_name": "engineering",
            "blog_uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
            "blog_url": "https://engineering.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 184390252036,
        "post_url": "https://engineering.tumblr.com/post/184390252036/https-for-all-tumblrs",
        "slug": "https-for-all-tumblrs",
        "date": "2019-04-23 15:00:29 GMT",
        "timestamp": 1556031629,
        "state": "published",
        "format": "html",
        "reblog_key": "nLjNpngk",
        "tags": [ "security", "https", "ssl" ],
        "short_url": "https://tmblr.co/ZI3nWx2hkW-O4",
        "summary": "HTTPS for all Tumblrs",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 154,
        "title": "HTTPS for all Tumblrs",
        "body": "<p><a href=\"https://security.tumblr.com/post/184371490790/https-for-all-tumblrs\" class=\"tumblr_blog\">security</a>:</p><blockquote>\n<p>In a long-overdue launch, after <a href=\"https://security.tumblr.com/post/166219476810/support-support-ssl-security-which-has-been\">several iterations</a>, we’re happy to announce that <a href=\"https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https\">HTTPS</a> is now enabled on all Tumblrs!</p>\n<p>Setting up a new Tumblr? It’s enabled! Already have one (or more) of the 464.5 million existing Tumblrs? It’s enabled! <a href=\"https://www.tumblr.com/docs/en/blog_management#customdomain\">Adding a custom domain name</a> to your Tumblr? It’s enabled! Nothing more for you to do except enjoy a more secure Tumblr experience.</p>\n<p>Check out <a href=\"https://tumblr.zendesk.com/hc/en-us/articles/226273528-Encryption\">our help docs</a> for more info.</p>\n</blockquote>\n<p>💯</p>",
        "reblog": {
          "comment": "<p>💯</p>",
          "tree_html": "<p><a href=\"https://security.tumblr.com/post/184371490790/https-for-all-tumblrs\" class=\"tumblr_blog\">security</a>:</p>\n<blockquote>\n<p>In a long-overdue launch, after <a href=\"https://security.tumblr.com/post/166219476810/support-support-ssl-security-which-has-been\">several iterations</a>, we’re happy to announce that <a href=\"https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https\">HTTPS</a> is now enabled on all Tumblrs!</p>\n<p>Setting up a new Tumblr? It’s enabled! Already have one (or more) of the 464.5 million existing Tumblrs? It’s enabled! <a href=\"https://www.tumblr.com/docs/en/blog_management#customdomain\">Adding a custom domain name</a> to your Tumblr? It’s enabled! Nothing more for you to do except enjoy a more secure Tumblr experience.</p>\n<p>Check out <a href=\"https://tumblr.zendesk.com/hc/en-us/articles/226273528-Encryption\">our help docs</a> for more info.</p>\n</blockquote>"
        },
        "trail": [
          {
            "blog": {
              "name": "security",
              "active": true,
              "theme": {
                "header_full_width": 5904,
                "header_full_height": 3321,
                "header_focus_width": 2048,
                "header_focus_height": 1152,
                "avatar_shape": "square",
                "background_color": "#fafafa",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/3f5cae3b0e6deecaa2499bd36cc440f5/1eb4f135c79bb46b-9c/s5904x3321/0cef9dc610f7953046ea24bf212bbd43c5651780.png",
                "header_image_focused": "https://66.media.tumblr.com/3f5cae3b0e6deecaa2499bd36cc440f5/1eb4f135c79bb46b-9c/s2048x3072/cdbc75b3bb1212877d217f14560cb971f0293343.png",
                "header_image_scaled": "https://66.media.tumblr.com/3f5cae3b0e6deecaa2499bd36cc440f5/1eb4f135c79bb46b-9c/s2048x3072/cdbc75b3bb1212877d217f14560cb971f0293343.png",
                "header_stretch": true,
                "link_color": "#00cc00",
                "show_avatar": true,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#666666",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "184371490790" },
            "content_raw": "<p>In a long-overdue launch, after <a href=\"https://security.tumblr.com/post/166219476810/support-support-ssl-security-which-has-been\">several iterations</a>, we’re happy to announce that <a href=\"https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https\">HTTPS</a> is now enabled on all Tumblrs!</p>\n<p>Setting up a new Tumblr? It’s enabled! Already have one (or more) of the 464.5 million existing Tumblrs? It’s enabled! <a href=\"https://www.tumblr.com/docs/en/blog_management#customdomain\">Adding a custom domain name</a> to your Tumblr? It’s enabled! Nothing more for you to do except enjoy a more secure Tumblr experience.</p>\n<p>Check out <a href=\"https://tumblr.zendesk.com/hc/en-us/articles/226273528-Encryption\">our help docs</a> for more info.</p>",
            "content": "<p>In a long-overdue launch, after <a href=\"https://security.tumblr.com/post/166219476810/support-support-ssl-security-which-has-been\">several iterations</a>, we&rsquo;re happy to announce that <a href=\"https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https\">HTTPS</a> is now enabled on all Tumblrs!</p>\n<p>Setting up a new Tumblr? It&rsquo;s enabled! Already have one (or more) of the 464.5 million existing Tumblrs? It&rsquo;s enabled! <a href=\"https://www.tumblr.com/docs/en/blog_management#customdomain\">Adding a custom domain name</a> to your Tumblr? It&rsquo;s enabled! Nothing more for you to do except enjoy a more secure Tumblr experience.</p>\n<p>Check out <a href=\"https://tumblr.zendesk.com/hc/en-us/articles/226273528-Encryption\">our help docs</a> for more info.</p>",
            "is_root_item": true
          },
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "184390252036" },
            "content_raw": "<p>💯</p>",
            "content": "<p>&#128175;</p>",
            "is_current_item": true
          }
        ],
        "reblogged_from_id": "184371490790",
        "reblogged_from_url": "https://security.tumblr.com/post/184371490790/https-for-all-tumblrs",
        "reblogged_from_name": "security",
        "reblogged_from_title": "Tumblr Security",
        "reblogged_from_uuid": "t:w0gakFqfHHiqEEwpj0NdlQ",
        "reblogged_from_can_message": true,
        "reblogged_root_id": "184371490790",
        "reblogged_root_url": "https://security.tumblr.com/post/184371490790/https-for-all-tumblrs",
        "reblogged_root_name": "security",
        "reblogged_root_title": "Tumblr Security",
        "reblogged_root_uuid": "t:w0gakFqfHHiqEEwpj0NdlQ",
        "reblogged_root_can_message": true,
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1575155266,
            "blog_name": "travelingfreak36",
            "blog_uuid": "t:zN80y11pzoydlhV7bV2_pw",
            "blog_url": "https://travelingfreak36.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1572998399,
            "blog_name": "kit-callie",
            "blog_uuid": "t:g8IY_gYt2Inii0iK10Z4Ag",
            "blog_url": "https://kit-callie.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "I may be late to the update, but this is great news!",
            "post_id": "188845138615",
            "reblog_parent_blog_name": "security",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1572998264,
            "blog_name": "kit-callie",
            "blog_uuid": "t:g8IY_gYt2Inii0iK10Z4Ag",
            "blog_url": "https://kit-callie.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570659697,
            "blog_name": "alex0two",
            "blog_uuid": "t:7VQwPTcur8RLCwixu9q8dw",
            "blog_url": "https://alex0two.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1569688955,
            "blog_name": "barneybarker",
            "blog_uuid": "t:0gLUSRq3fHiVfwGtb2Zg6g",
            "blog_url": "https://barneybarker.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1568442639,
            "blog_name": "realqwert",
            "blog_uuid": "t:v0PGMAjvulUdVvlBME100Q",
            "blog_url": "https://realqwert.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1562791406,
            "blog_name": "holisticfansstuff",
            "blog_uuid": "t:ciYa2ItlamfgTWnl_cikJQ",
            "blog_url": "https://holisticfansstuff.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1561361373,
            "blog_name": "technoponywardrobe",
            "blog_uuid": "t:WlwDSgheASJqS6yKliv-vQ",
            "blog_url": "https://technoponywardrobe.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1561294848,
            "blog_name": "thyron69-blog",
            "blog_uuid": "t:XCifBQKYnfovWMwXP__DUg",
            "blog_url": "https://thyron69-blog.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reply",
            "timestamp": 1560428390,
            "blog_name": "fxarsomxlxgxnd",
            "blog_uuid": "t:OfqpG4VkvrsP0lZyI5PoOA",
            "blog_url": "https://fxarsomxlxgxnd.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "Staff, can you do something about that problem i have. I can't send messages to the peoples i want to talk to",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1560090013,
            "blog_name": "azsharoth",
            "blog_uuid": "t:9Wcq1Em99uItB-nEbAtSaQ",
            "blog_url": "https://azsharoth.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1559584609,
            "blog_name": "thatonechickfromspace",
            "blog_uuid": "t:iRx49UIglLe8Aa6pKJBEqw",
            "blog_url": "https://thatonechickfromspace.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1557821140,
            "blog_name": "coin-crow",
            "blog_uuid": "t:vOCSDnyDLiQcfRbRxZXP2Q",
            "blog_url": "https://coin-crow.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1557756357,
            "blog_name": "msbahsocialblog",
            "blog_uuid": "t:94qHHiJeey1adKkXCldGFg",
            "blog_url": "https://msbahsocialblog.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1557688037,
            "blog_name": "whitennerdiest",
            "blog_uuid": "t:gBFhOT5xzPM1qWGsoG4hJw",
            "blog_url": "https://whitennerdiest.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184831029614",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1557688033,
            "blog_name": "whitennerdiest",
            "blog_uuid": "t:gBFhOT5xzPM1qWGsoG4hJw",
            "blog_url": "https://whitennerdiest.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1557602801,
            "blog_name": "essays",
            "blog_uuid": "t:Yv9eGt141MrTFH_XnE1gyA",
            "blog_url": "https://essays.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1557192394,
            "blog_name": "wartoyo0707",
            "blog_uuid": "t:8JA-r6l7kWHvsRodW58rOA",
            "blog_url": "https://wartoyo0707.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1556853018,
            "blog_name": "encontradoemti",
            "blog_uuid": "t:rVofP-kGAxu54KdZcBKWVA",
            "blog_url": "https://encontradoemti.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1556767561,
            "blog_name": "charleylhasa",
            "blog_uuid": "t:wbnrxkKoHwj7bKWiLd814Q",
            "blog_url": "https://charleylhasa.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1556733654,
            "blog_name": "tumbloggo",
            "blog_uuid": "t:lCiSPgFi1vYidATR-8iYYg",
            "blog_url": "https://tumbloggo.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1556389517,
            "blog_name": "missu",
            "blog_uuid": "t:El97FQCMXDMfLtQQDvGXtw",
            "blog_url": "https://missu.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1556359339,
            "blog_name": "geoffersonmusic",
            "blog_uuid": "t:SzPWMafD6gPDPVajwd9zHg",
            "blog_url": "https://geoffersonmusic.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1556310347,
            "blog_name": "andreer",
            "blog_uuid": "t:vgEZ8d5HnANFV4iY31oMxw",
            "blog_url": "https://andreer.no/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1556268318,
            "blog_name": "nomoarty",
            "blog_uuid": "t:Vp6gQyu2vEpQf1fAW5_jfQ",
            "blog_url": "https://nomoarty.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1556201262,
            "blog_name": "kichisaburo3",
            "blog_uuid": "t:Gd6pDNLouF90t10BGgw28A",
            "blog_url": "https://kichisaburo3.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "dd 22 APRIL 2019 Monday https://security.tumblr.com/post/184371490790/https-for-all-tumblrs",
            "post_id": "184435201467",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1556175434,
            "blog_name": "super-serket-spider-troll",
            "blog_uuid": "t:C2noeM7hHxtX9KYgy6-ceA",
            "blog_url": "https://super-serket-spider-troll.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1556129046,
            "blog_name": "digigal-transbian",
            "blog_uuid": "t:mubMeehxzTg7pl60Lvo69A",
            "blog_url": "https://digigal-transbian.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184416403429",
            "reblog_parent_blog_name": "reguess1997"
          },
          {
            "type": "like",
            "timestamp": 1556129044,
            "blog_name": "digigal-transbian",
            "blog_uuid": "t:mubMeehxzTg7pl60Lvo69A",
            "blog_url": "https://digigal-transbian.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1556109636,
            "blog_name": "kiri2",
            "blog_uuid": "t:7LDWVOjXxhs_Ga3DpyxcqQ",
            "blog_url": "https://kiri2.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184411128958",
            "reblog_parent_blog_name": "do-nothing"
          },
          {
            "type": "like",
            "timestamp": 1556105698,
            "blog_name": "brimurph",
            "blog_uuid": "t:wZB42GIq2NOS0q00cGvy4Q",
            "blog_url": "https://brimurph.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1556099482,
            "blog_name": "flightless-nerds",
            "blog_uuid": "t:os5hnwqVFlRv4ijJndv_PA",
            "blog_url": "https://flightless-nerds.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1556091916,
            "blog_name": "theother1019",
            "blog_uuid": "t:s080QOMVB3tIDAIlNYMvpA",
            "blog_url": "https://theother1019.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1556083588,
            "blog_name": "rawjeev",
            "blog_uuid": "t:3LpzA3iOjho1CckdczA71g",
            "blog_url": "https://randoms.rawjeev.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1556074928,
            "blog_name": "do-nothing",
            "blog_uuid": "t:iQXt8YPOG7VWFFMX5UIJPA",
            "blog_url": "https://do-nothing.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "184403610905",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1556068962,
            "blog_name": "br3ach",
            "blog_uuid": "t:aOsFf94bmdNAtDxCsJo4mA",
            "blog_url": "https://br3ach.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1556065658,
            "blog_name": "ph4z0n",
            "blog_uuid": "t:CnUUP9OIxSOdxoENQzzLvQ",
            "blog_url": "https://ph4z0n.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1556057781,
            "blog_name": "frogburt",
            "blog_uuid": "t:m5zLEWJ0enPK-cvYZSKGcQ",
            "blog_url": "https://frogburt.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1556053397,
            "blog_name": "kim",
            "blog_uuid": "t:POGGzYWWGAYAtU1PzkKQEg",
            "blog_url": "https://imho.me/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1556047880,
            "blog_name": "breadstyx",
            "blog_uuid": "t:I4AIgflpBs0pHeYlowWAaA",
            "blog_url": "https://breadstyx.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1556047142,
            "blog_name": "kyokohunter",
            "blog_uuid": "t:hKI-oG5hDA4b0m0VpwyiDw",
            "blog_url": "https://kyokohunter.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1556046113,
            "blog_name": "buy-hugs",
            "blog_uuid": "t:obEF0JPpbbMtD-nGMEb64A",
            "blog_url": "https://buy-hugs.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "photo",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 184151700524,
        "post_url": "https://engineering.tumblr.com/post/184151700524/javascript-hi-you-may-have-noticed-recently",
        "slug": "javascript-hi-you-may-have-noticed-recently",
        "date": "2019-04-13 09:26:19 GMT",
        "timestamp": 1555147579,
        "state": "published",
        "format": "html",
        "reblog_key": "wLKzyAwb",
        "tags": [],
        "short_url": "https://tmblr.co/ZI3nWx2hWI-Gi",
        "summary": "Hi! You may have noticed recently that blog archives look a little different. Spruced up a bit: smoother, faster, fancier....",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 136,
        "caption": "<p><a href=\"https://javascript.tumblr.com/post/184133312962/hi-you-may-have-noticed-recently-that-blog\" class=\"tumblr_blog\">javascript</a>:</p>\n\n<blockquote><p>Hi! You may have noticed recently that blog archives look a little different. Spruced up a bit: smoother, faster, fancier. Squarer! You can mix and match filters in a way you never could before. Go ahead! Pick a month <i>and </i>a post type. You deserve it!</p><p>You can even filter the archive by tag now.</p><figure data-orig-width=\"672\" data-orig-height=\"440\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/1589605b873d3f0ff6c6088b27e1b924/tumblr_inline_pptas57Drf1qc01bx_540.gif\" alt=\"image\" data-orig-width=\"672\" data-orig-height=\"440\"/></figure><p>It’s pretty good! And it’s all possible because the archive has joined the honored ranks of pages running on <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\">our new web stack</a>, just like <a href=\"https://javascript.tumblr.com/post/176747072462/a-breath-of-life-welcome-the-brand-new-mobile-web\">the mobile web dashboard</a>.</p><p>And we’re not stopping here! As Tina Turner once said, big wheel keep on turnin’. <a href=\"https://www.tumblr.com/jobs\">Come be a part of that wheel</a>.</p><p>- Robbie Dawson (<a href=\"https://tmblr.co/m7-mz7MAygA9Hv2PKLlnDDA\">@idiot</a>)</p></blockquote>\n\n<p>😍</p>",
        "reblog": {
          "comment": "<p>😍</p>",
          "tree_html": "<p><a href=\"https://javascript.tumblr.com/post/184133312962/hi-you-may-have-noticed-recently-that-blog\" class=\"tumblr_blog\">javascript</a>:</p><blockquote>\n<p>Hi! You may have noticed recently that blog archives look a little different. Spruced up a bit: smoother, faster, fancier. Squarer! You can mix and match filters in a way you never could before. Go ahead! Pick a month <i>and </i>a post type. You deserve it!</p>\n<p>You can even filter the archive by tag now.</p>\n<figure data-orig-width=\"672\" data-orig-height=\"440\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/1589605b873d3f0ff6c6088b27e1b924/tumblr_inline_pptas57Drf1qc01bx_540.gif\" alt=\"image\" data-orig-width=\"672\" data-orig-height=\"440\"></figure><p>It’s pretty good! And it’s all possible because the archive has joined the honored ranks of pages running on <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\">our new web stack</a>, just like <a href=\"https://javascript.tumblr.com/post/176747072462/a-breath-of-life-welcome-the-brand-new-mobile-web\">the mobile web dashboard</a>.</p>\n<p>And we’re not stopping here! As Tina Turner once said, big wheel keep on turnin’. <a href=\"https://www.tumblr.com/jobs\">Come be a part of that wheel</a>.</p>\n<p>- Robbie Dawson (<a href=\"https://tmblr.co/m7-mz7MAygA9Hv2PKLlnDDA\">@idiot</a>)</p>\n</blockquote>"
        },
        "trail": [
          {
            "blog": {
              "name": "javascript",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#fcf11d",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/84c85268abe461ffc10dbb903b7fb00f/9640f1cf5d2277fc-18/s1920x1080/df1e800724c9d16acec6021cb42973a24a67ad76.png",
                "header_image_focused": "https://66.media.tumblr.com/84c85268abe461ffc10dbb903b7fb00f/9640f1cf5d2277fc-18/s2048x3072/a16e81f6427d965a37f713d8bc24a7b7d848a633.png",
                "header_image_scaled": "https://66.media.tumblr.com/84c85268abe461ffc10dbb903b7fb00f/9640f1cf5d2277fc-18/s2048x3072/a16e81f6427d965a37f713d8bc24a7b7d848a633.png",
                "header_stretch": true,
                "link_color": "#000000",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#000000",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "184133312962" },
            "content_raw": "<p>Hi! You may have noticed recently that blog archives look a little different. Spruced up a bit: smoother, faster, fancier. Squarer! You can mix and match filters in a way you never could before. Go ahead! Pick a month <i>and </i>a post type. You deserve it!</p>\n<p>You can even filter the archive by tag now.</p>\n<figure data-orig-width=\"672\" data-orig-height=\"440\" class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/1589605b873d3f0ff6c6088b27e1b924/tumblr_inline_pptas57Drf1qc01bx_540.gif\" alt=\"image\" data-orig-width=\"672\" data-orig-height=\"440\"></figure><p>It’s pretty good! And it’s all possible because the archive has joined the honored ranks of pages running on <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\">our new web stack</a>, just like <a href=\"https://javascript.tumblr.com/post/176747072462/a-breath-of-life-welcome-the-brand-new-mobile-web\">the mobile web dashboard</a>.</p>\n<p>And we’re not stopping here! As Tina Turner once said, big wheel keep on turnin’. <a href=\"https://www.tumblr.com/jobs\">Come be a part of that wheel</a>.</p>\n<p>- Robbie Dawson (<a href=\"https://tmblr.co/m7-mz7MAygA9Hv2PKLlnDDA\">@idiot</a>)</p>",
            "content": "<p>Hi! You may have noticed recently that blog archives look a little different. Spruced up a bit: smoother, faster, fancier. Squarer! You can mix and match filters in a way you never could before. Go ahead! Pick a month <i>and </i>a post type. You deserve it!</p>\n<p>You can even filter the archive by tag now.</p>\n<figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/1589605b873d3f0ff6c6088b27e1b924/tumblr_inline_pptas57Drf1qc01bx_540.gif\" alt=\"image\" class=\"\"/></figure><p>It&rsquo;s pretty good! And it&rsquo;s all possible because the archive has joined the honored ranks of pages running on <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\">our new web stack</a>, just like <a href=\"https://javascript.tumblr.com/post/176747072462/a-breath-of-life-welcome-the-brand-new-mobile-web\">the mobile web dashboard</a>.</p>\n<p>And we&rsquo;re not stopping here! As Tina Turner once said, big wheel keep on turnin&rsquo;. <a href=\"https://www.tumblr.com/jobs\">Come be a part of that wheel</a>.</p>\n<p>- Robbie Dawson (<a href=\"https://tmblr.co/m7-mz7MAygA9Hv2PKLlnDDA\">@idiot</a>)</p>",
            "is_root_item": true
          },
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "184151700524" },
            "content_raw": "<p>😍</p>",
            "content": "<p>&#128525;</p>",
            "is_current_item": true
          }
        ],
        "image_permalink": "https://engineering.tumblr.com/image/184151700524",
        "photos": [
          {
            "caption": "",
            "original_size": {
              "url": "https://66.media.tumblr.com/9975911ed38a12695e98f32fbffd2364/tumblr_ppus99n99d1ul6kzno1_1280.png",
              "width": 1280,
              "height": 1046
            },
            "alt_sizes": [
              {
                "url": "https://66.media.tumblr.com/9975911ed38a12695e98f32fbffd2364/tumblr_ppus99n99d1ul6kzno1_1280.png",
                "width": 1280,
                "height": 1046
              },
              {
                "url": "https://66.media.tumblr.com/9975911ed38a12695e98f32fbffd2364/tumblr_ppus99n99d1ul6kzno1_640.png",
                "width": 640,
                "height": 523
              },
              {
                "url": "https://66.media.tumblr.com/9975911ed38a12695e98f32fbffd2364/tumblr_ppus99n99d1ul6kzno1_540.png",
                "width": 540,
                "height": 441
              },
              {
                "url": "https://66.media.tumblr.com/9975911ed38a12695e98f32fbffd2364/tumblr_ppus99n99d1ul6kzno1_500.png",
                "width": 500,
                "height": 408
              },
              {
                "url": "https://66.media.tumblr.com/9975911ed38a12695e98f32fbffd2364/tumblr_ppus99n99d1ul6kzno1_400.png",
                "width": 400,
                "height": 327
              },
              {
                "url": "https://66.media.tumblr.com/9975911ed38a12695e98f32fbffd2364/tumblr_ppus99n99d1ul6kzno1_250.png",
                "width": 250,
                "height": 204
              },
              {
                "url": "https://66.media.tumblr.com/9975911ed38a12695e98f32fbffd2364/tumblr_ppus99n99d1ul6kzno1_100.png",
                "width": 100,
                "height": 82
              },
              {
                "url": "https://66.media.tumblr.com/9975911ed38a12695e98f32fbffd2364/tumblr_ppus99n99d1ul6kzno1_75sq.png",
                "width": 75,
                "height": 75
              }
            ]
          }
        ],
        "reblogged_from_id": "184133312962",
        "reblogged_from_url": "https://javascript.tumblr.com/post/184133312962/hi-you-may-have-noticed-recently-that-blog",
        "reblogged_from_name": "javascript",
        "reblogged_from_title": "JavaScript on Tumblr",
        "reblogged_from_uuid": "t:E3JWSmG5IINX0s4eBqC2TQ",
        "reblogged_from_can_message": false,
        "reblogged_root_id": "184133312962",
        "reblogged_root_url": "https://javascript.tumblr.com/post/184133312962/hi-you-may-have-noticed-recently-that-blog",
        "reblogged_root_name": "javascript",
        "reblogged_root_title": "JavaScript on Tumblr",
        "reblogged_root_uuid": "t:E3JWSmG5IINX0s4eBqC2TQ",
        "reblogged_root_can_message": false,
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1574803837,
            "blog_name": "ashbless",
            "blog_uuid": "t:FTioX3ExqBWyACMOcVyYaA",
            "blog_url": "https://ashbless.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1572086979,
            "blog_name": "rainbowlight100",
            "blog_uuid": "t:q7Ienh9NLpUb4SJx18bj5w",
            "blog_url": "https://rainbowlight100.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1571375948,
            "blog_name": "jhonny30",
            "blog_uuid": "t:qdr8dQ8uA6r51jbkVg1wwA",
            "blog_url": "https://blog.jonathancastillo.zz.mu/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570659700,
            "blog_name": "alex0two",
            "blog_uuid": "t:7VQwPTcur8RLCwixu9q8dw",
            "blog_url": "https://alex0two.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1567444616,
            "blog_name": "leonardoos-stuff",
            "blog_uuid": "t:5vU_tHm-I0WjtnXcxLWJJA",
            "blog_url": "https://leonardoos-stuff.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1562791440,
            "blog_name": "holisticfansstuff",
            "blog_uuid": "t:ciYa2ItlamfgTWnl_cikJQ",
            "blog_url": "https://holisticfansstuff.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1561318160,
            "blog_name": "skacore182",
            "blog_uuid": "t:luHQIxx8O1HGdE3flcH_8A",
            "blog_url": "https://skacore182.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "185798682627",
            "reblog_parent_blog_name": "benjaminikuta"
          },
          {
            "type": "reblog",
            "timestamp": 1561316432,
            "blog_name": "benjaminikuta",
            "blog_uuid": "t:TV1BBWqGMpzLdeht0dxiAw",
            "blog_url": "https://benjaminikuta.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "185798171539",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1557425696,
            "blog_name": "tommypenner",
            "blog_uuid": "t:RmY-pfUObuBwNVzRkWwL8g",
            "blog_url": "https://tommypenner.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1557384399,
            "blog_name": "daniellesteenbrink",
            "blog_uuid": "t:IeZ0UrdZTaHfTvc4D5XCFA",
            "blog_url": "https://daniellesteenbrink.nl/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184754146347",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1557267974,
            "blog_name": "thefenty88",
            "blog_uuid": "t:zE3ksNmQLRo7fDw_YYLSAg",
            "blog_url": "https://thefenty88.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1557192424,
            "blog_name": "wartoyo0707",
            "blog_uuid": "t:8JA-r6l7kWHvsRodW58rOA",
            "blog_url": "https://wartoyo0707.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1556389782,
            "blog_name": "missu",
            "blog_uuid": "t:El97FQCMXDMfLtQQDvGXtw",
            "blog_url": "https://missu.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1556086576,
            "blog_name": "dch",
            "blog_uuid": "t:2EokVHEMLwS9tgYMJv00lA",
            "blog_url": "https://dch.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "184406809422",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1556031679,
            "blog_name": "whenradwasafad",
            "blog_uuid": "t:nyUJz8RDKmDE99hLzFPvYQ",
            "blog_url": "https://whenradwasafad.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1555965044,
            "blog_name": "tosatanikofurby",
            "blog_uuid": "t:bhAQP3UHCTFG0-OB3zL6VA",
            "blog_url": "https://tosatanikofurby.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1555669904,
            "blog_name": "daniellesteenbrink",
            "blog_uuid": "t:IeZ0UrdZTaHfTvc4D5XCFA",
            "blog_url": "https://daniellesteenbrink.nl/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184292145807",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1555669901,
            "blog_name": "princessgeekdaantje",
            "blog_uuid": "t:K1B2kDTlStOJtWvaWexBdA",
            "blog_url": "https://princessgeekdaantje.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1555643921,
            "blog_name": "maria",
            "blog_uuid": "t:AMC47mm0mJSbY0LAB1xpOg",
            "blog_url": "https://maria.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1555488004,
            "blog_name": "pinkcowboybananaturkey",
            "blog_uuid": "t:ZR3YBc_FNk6k655evUYhPQ",
            "blog_url": "https://pinkcowboybananaturkey.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1555408814,
            "blog_name": "what-if-questions",
            "blog_uuid": "t:ZINVqxWdWpJ2HAR7I9zSRg",
            "blog_url": "https://what-if-questions.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184223090786",
            "reblog_parent_blog_name": "platypus-quacks-too"
          },
          {
            "type": "reblog",
            "timestamp": 1555385198,
            "blog_name": "girltirl",
            "blog_uuid": "t:HusPRMiX8jQaexd6VDe58A",
            "blog_url": "https://girltirl.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184217881976",
            "reblog_parent_blog_name": "javascript"
          },
          {
            "type": "like",
            "timestamp": 1555336807,
            "blog_name": "meyong",
            "blog_uuid": "t:uWf_r8HqrPuMwakU9hcBCg",
            "blog_url": "https://meyong.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1555324326,
            "blog_name": "fictionalred",
            "blog_uuid": "t:7kBXXRlASJJOtv1FXmt1MQ",
            "blog_url": "https://fictionalred.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184199975339",
            "reblog_parent_blog_name": "degenezijde"
          },
          {
            "type": "reblog",
            "timestamp": 1555314332,
            "blog_name": "degenezijde",
            "blog_uuid": "t:rViBRl6vA9up4yNuRnQHzA",
            "blog_url": "https://degenezijde.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184198224342",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "reblog",
            "timestamp": 1555302393,
            "blog_name": "jellyfishbreaths",
            "blog_uuid": "t:kDhGGqKMXwF7r00MkG_9gA",
            "blog_url": "https://jellyfishbreaths.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184195390880",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "reblog",
            "timestamp": 1555280433,
            "blog_name": "tumbloggo",
            "blog_uuid": "t:lCiSPgFi1vYidATR-8iYYg",
            "blog_url": "https://tumbloggo.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184188528769",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1555250733,
            "blog_name": "francoisbry",
            "blog_uuid": "t:Um_dVz_5JVL3BzFGaqQ9Lg",
            "blog_url": "https://francoisbry.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1555250145,
            "blog_name": "feifeicuttie",
            "blog_uuid": "t:R_FSkISga_7UVwnqC3b4_A",
            "blog_url": "https://feifeicuttie.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1555245160,
            "blog_name": "dappercontinuouslydesigns",
            "blog_uuid": "t:eub79U7cQory6VXPJuC64Q",
            "blog_url": "https://dappercontinuouslydesigns.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1555240953,
            "blog_name": "themazette",
            "blog_uuid": "t:DVQcndBkQYBqALqkWdwIbQ",
            "blog_url": "https://themazette.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1555234257,
            "blog_name": "sovtime",
            "blog_uuid": "t:ARaCShpdS0mDkKbks9AJPA",
            "blog_url": "https://sovtime.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1555232431,
            "blog_name": "luxlit",
            "blog_uuid": "t:NiHT9vMpTABWzVff2fSUaQ",
            "blog_url": "https://luxlit.net/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184174709688",
            "reblog_parent_blog_name": "letstalkphotography"
          },
          {
            "type": "like",
            "timestamp": 1555232420,
            "blog_name": "allthingsfern",
            "blog_uuid": "t:iDuQA5ezMTyR6l-1xlDs3w",
            "blog_url": "https://allthingsfern.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1555231724,
            "blog_name": "markroome",
            "blog_uuid": "t:e7Zw2nAQh-Mfkq3xrClBlg",
            "blog_url": "https://markroome.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1555227490,
            "blog_name": "camilaruizuniverse",
            "blog_uuid": "t:2bgKFdXzUlR2BBvX57ygDA",
            "blog_url": "https://camilaruizuniverse.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1555225712,
            "blog_name": "silvermorning",
            "blog_uuid": "t:e51i8IKvHqnojOmnTvL-5A",
            "blog_url": "https://silvermorning.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1555218514,
            "blog_name": "pivovarchik-vitali",
            "blog_uuid": "t:LUxvpnlkgvj9r_vhX-Qjqw",
            "blog_url": "https://pivovarchik-vitali.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1555218318,
            "blog_name": "snowymary",
            "blog_uuid": "t:4sMFRcwKUAQ_VvHDZSK_YQ",
            "blog_url": "https://snowymary.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reply",
            "timestamp": 1555216071,
            "blog_name": "inthedarktrees",
            "blog_uuid": "t:F6BHE-otGepwFWDpahR97A",
            "blog_url": "https://inthedarktrees.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "Looks like tag filtering is working okay now!",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1555215212,
            "blog_name": "ericbrandonrp",
            "blog_uuid": "t:G4jf5XdRyo7YlM85zMAIKw",
            "blog_url": "https://ericbrandonrp.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1555209404,
            "blog_name": "writing-ace",
            "blog_uuid": "t:aEoo0xvhoELPnnP4zafJOA",
            "blog_url": "https://writing-ace.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184169056137",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "reply",
            "timestamp": 1555208083,
            "blog_name": "inthedarktrees",
            "blog_uuid": "t:F6BHE-otGepwFWDpahR97A",
            "blog_url": "https://inthedarktrees.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "@idiot On my blog, the results of filtering by a given tag include a lot of posts that don’t include the selected tag. 🙁 Hope this issue will be resolved; filtering the Archive by tag will be really helpful.",
            "formatting": [
              {
                "type": "mention",
                "start": 0,
                "end": 5,
                "blog": {
                  "name": "idiot",
                  "url": "https://idiot.tumblr.com/",
                  "uuid": "t:nrQRrGRm3-1dMjWpuCHb4w"
                }
              }
            ],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1555206438,
            "blog_name": "pinwheelwhirl",
            "blog_uuid": "t:Qkb22dc9v2YK1WGDbGtmxA",
            "blog_url": "https://pinwheelwhirl.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 183939126786,
        "post_url": "https://engineering.tumblr.com/post/183939126786/memories-tumblr-is-my-biggest-hobby-and-my",
        "slug": "memories-tumblr-is-my-biggest-hobby-and-my",
        "date": "2019-04-04 15:00:30 GMT",
        "timestamp": 1554390030,
        "state": "published",
        "format": "html",
        "reblog_key": "leqYFaU0",
        "tags": [],
        "short_url": "https://tmblr.co/ZI3nWx2hJe5O2",
        "summary": "#tumblr is my biggest hobby… and my greatest fear.",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 59326,
        "source_url": "https://memories.tumblr.com/post/183550009750/tumbeasts-is-my-biggest-hobby-and-my-greatest",
        "source_title": "memories",
        "title": null,
        "body": "<p><a href=\"https://memories.tumblr.com/post/183550009750/tumblr-is-my-biggest-hobby-and-my-greatest\" class=\"tumblr_blog\">memories</a>:</p>\n<blockquote><p><a href=\"https://www.tumblr.com/tagged/tumblr\">#tumblr</a> is my biggest hobby… and my greatest fear.</p></blockquote>\n<p>same</p>",
        "reblog": {
          "comment": "<p>same</p>",
          "tree_html": "<p><a href=\"https://memories.tumblr.com/post/183550009750/tumblr-is-my-biggest-hobby-and-my-greatest\" class=\"tumblr_blog\">memories</a>:</p><blockquote><p><a href=\"https://www.tumblr.com/tagged/tumblr\">#tumblr</a> is my biggest hobby… and my greatest fear.</p></blockquote>"
        },
        "trail": [
          {
            "blog": {
              "name": "memories",
              "active": true,
              "theme": {
                "header_full_width": 2066,
                "header_full_height": 1162,
                "header_focus_width": 2048,
                "header_focus_height": 1152,
                "avatar_shape": "circle",
                "background_color": "#eff5ff",
                "body_font": "Helvetica Neue",
                "header_bounds": "0,2065,1162,0",
                "header_image": "https://static.tumblr.com/537bc179cc7f0ad69d38d6f1d09cd169/za27g7q/ZfBpp4ws5/tumblr_static_5du3vnefxhk4w0kkwooc8ccc0.gif",
                "header_image_focused": "https://static.tumblr.com/537bc179cc7f0ad69d38d6f1d09cd169/za27g7q/Ynypp4wsy/tumblr_static_tumblr_static_5du3vnefxhk4w0kkwooc8ccc0_focused_v3.gif",
                "header_image_scaled": "https://static.tumblr.com/537bc179cc7f0ad69d38d6f1d09cd169/za27g7q/ZfBpp4ws5/tumblr_static_5du3vnefxhk4w0kkwooc8ccc0_2048_v2.gif",
                "header_stretch": true,
                "link_color": "#2185c4",
                "show_avatar": true,
                "show_description": false,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#213f52",
                "title_font": "Streetscript",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "183550009750" },
            "content_raw": "<p><a href=\"https://www.tumblr.com/tagged/tumblr\">#tumblr</a> is my biggest hobby… and my greatest fear.</p>",
            "content": "<p><a href=\"https://www.tumblr.com/tagged/tumblr\">#tumblr</a> is my biggest hobby&hellip; and my greatest fear.</p>",
            "is_root_item": true
          },
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "183939126786" },
            "content_raw": "<p>same</p>",
            "content": "<p>same</p>",
            "is_current_item": true
          }
        ],
        "reblogged_from_id": "183873056531",
        "reblogged_from_url": "https://creative.tumblr.com/post/183873056531/memories-tumblr-is-my-biggest-hobby-and-my",
        "reblogged_from_name": "creative",
        "reblogged_from_title": "Creative",
        "reblogged_from_uuid": "t:HEWOQwkrpMmz_bnq3g9PDQ",
        "reblogged_from_can_message": false,
        "reblogged_root_id": "183550009750",
        "reblogged_root_url": "https://memories.tumblr.com/post/183550009750/tumbeasts-is-my-biggest-hobby-and-my-greatest",
        "reblogged_root_name": "memories",
        "reblogged_root_title": "",
        "reblogged_root_uuid": "t:Hr088YHw-gB5BF72hLd8xg",
        "reblogged_root_can_message": false,
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1577988661,
            "blog_name": "queerius",
            "blog_uuid": "t:h0-2eZ87TaH8m6HpQTO9GQ",
            "blog_url": "https://queerius.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1577988058,
            "blog_name": "catilinas",
            "blog_uuid": "t:H8g1Vr6HjUW2W9M3HC-cHQ",
            "blog_url": "https://catilinas.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190019437479",
            "reblog_parent_blog_name": "finelythreadedsky"
          },
          {
            "type": "like",
            "timestamp": 1577986748,
            "blog_name": "szarvasoks",
            "blog_uuid": "t:uY8MBpoN01uGJ9bwHxM3DQ",
            "blog_url": "https://szarvasoks.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1577985949,
            "blog_name": "nyutians",
            "blog_uuid": "t:MPQ5-9POx3bvk90_80MiVA",
            "blog_url": "https://nyutians.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1577983959,
            "blog_name": "imyuu",
            "blog_uuid": "t:Zo8vRUE_mALZIABIhL2jEg",
            "blog_url": "https://imyuu.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1577978143,
            "blog_name": "sadstonedgoblindyke",
            "blog_uuid": "t:Fece9eoxSfr82TH4X-iGQw",
            "blog_url": "https://sadstonedgoblindyke.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190016879279",
            "reblog_parent_blog_name": "memories"
          },
          {
            "type": "reblog",
            "timestamp": 1577976747,
            "blog_name": "exoullent",
            "blog_uuid": "t:1Ejkpw7EJaoOWW3qVtkbOg",
            "blog_url": "https://exoullent.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190016544536",
            "reblog_parent_blog_name": "memories"
          },
          {
            "type": "reblog",
            "timestamp": 1577967140,
            "blog_name": "spo0kygirl",
            "blog_uuid": "t:GNsWUFRWQ25UyrmrmVRVpA",
            "blog_url": "https://spo0kygirl.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190014608536",
            "reblog_parent_blog_name": "painslutiero"
          },
          {
            "type": "like",
            "timestamp": 1577967136,
            "blog_name": "spo0kygirl",
            "blog_uuid": "t:GNsWUFRWQ25UyrmrmVRVpA",
            "blog_url": "https://spo0kygirl.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1577961275,
            "blog_name": "digi-moe",
            "blog_uuid": "t:2o7vbSPFd56PocneC9pEvg",
            "blog_url": "https://digi-moe.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "190013680650",
            "reblog_parent_blog_name": "memories"
          },
          {
            "type": "like",
            "timestamp": 1577959167,
            "blog_name": "confuzzled-waffle",
            "blog_uuid": "t:TmG0X8uz2g_Hb7fz5Ts4Ew",
            "blog_url": "https://confuzzled-waffle.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1577958364,
            "blog_name": "belleandtherosebush",
            "blog_uuid": "t:eolLocBSthGQGcjVHKCAUg",
            "blog_url": "https://belleandtherosebush.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1577955977,
            "blog_name": "losangeles-mp3",
            "blog_uuid": "t:FTyTrPeiBJMk-AeSaZf51Q",
            "blog_url": "https://losangeles-mp3.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1577952155,
            "blog_name": "cant-choose-a-url",
            "blog_uuid": "t:z02b2reyuHX1uIKwClLXbg",
            "blog_url": "https://cant-choose-a-url.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190012178262",
            "reblog_parent_blog_name": "space--cake"
          },
          {
            "type": "like",
            "timestamp": 1577952151,
            "blog_name": "cant-choose-a-url",
            "blog_uuid": "t:z02b2reyuHX1uIKwClLXbg",
            "blog_url": "https://cant-choose-a-url.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1577950300,
            "blog_name": "sharpeyesharpshooter",
            "blog_uuid": "t:i-y3Rv5bOr69-wTlD1zq5w",
            "blog_url": "https://sharpeyesharpshooter.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "190011831495",
            "reblog_parent_blog_name": "oursaviorkellinquinn"
          },
          {
            "type": "like",
            "timestamp": 1577950295,
            "blog_name": "sharpeyesharpshooter",
            "blog_uuid": "t:i-y3Rv5bOr69-wTlD1zq5w",
            "blog_url": "https://sharpeyesharpshooter.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1577948040,
            "blog_name": "jetsetlifeis-gonnakillyou",
            "blog_uuid": "t:JVd6z76IXpp1jDRviEzqLg",
            "blog_url": "https://jetsetlifeis-gonnakillyou.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1577945274,
            "blog_name": "ashelynx",
            "blog_uuid": "t:Y4y63kKs7QVqC_gdo3GoRQ",
            "blog_url": "https://ashelynx.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190010737399",
            "reblog_parent_blog_name": "memories"
          },
          {
            "type": "like",
            "timestamp": 1577944477,
            "blog_name": "yesimweirdgetusedtoit",
            "blog_uuid": "t:YfXR-2TurhxL6aYUJBPBoA",
            "blog_url": "https://yesimweirdgetusedtoit.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1577944097,
            "blog_name": "destroya33",
            "blog_uuid": "t:dcbFIxlpx4QPzxB01ztHbA",
            "blog_url": "https://destroya33.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "190010446772",
            "reblog_parent_blog_name": "memories"
          },
          {
            "type": "reblog",
            "timestamp": 1577943777,
            "blog_name": "sashasthoughtsaretakingover",
            "blog_uuid": "t:_oqLA0wLuhSWbkh1oxnM5w",
            "blog_url": "https://sashasthoughtsaretakingover.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "190010372336",
            "reblog_parent_blog_name": "painslutiero"
          },
          {
            "type": "like",
            "timestamp": 1577943762,
            "blog_name": "not-this-shit-again-fuck",
            "blog_uuid": "t:5HUBadwAd1EaBszPuHtalw",
            "blog_url": "https://not-this-shit-again-fuck.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1577943760,
            "blog_name": "sashasthoughtsaretakingover",
            "blog_uuid": "t:_oqLA0wLuhSWbkh1oxnM5w",
            "blog_url": "https://sashasthoughtsaretakingover.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1577943499,
            "blog_name": "m0blizz",
            "blog_uuid": "t:EkYyWQlYDiLmynToCzNQeg",
            "blog_url": "https://m0blizz.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "190010300731",
            "reblog_parent_blog_name": "memories"
          },
          {
            "type": "like",
            "timestamp": 1577943485,
            "blog_name": "m0blizz",
            "blog_uuid": "t:EkYyWQlYDiLmynToCzNQeg",
            "blog_url": "https://m0blizz.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1577943218,
            "blog_name": "space--cake",
            "blog_uuid": "t:y5ZAo62cJaaziiOXQFRXXQ",
            "blog_url": "https://space--cake.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190010226133",
            "reblog_parent_blog_name": "painslutiero"
          },
          {
            "type": "like",
            "timestamp": 1577943214,
            "blog_name": "space--cake",
            "blog_uuid": "t:y5ZAo62cJaaziiOXQFRXXQ",
            "blog_url": "https://space--cake.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1577943042,
            "blog_name": "brookeisarat",
            "blog_uuid": "t:N9JNyDaRFrqRStokqvDeHA",
            "blog_url": "https://brookeisarat.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190010179533",
            "reblog_parent_blog_name": "softandsnowy"
          },
          {
            "type": "reblog",
            "timestamp": 1577942614,
            "blog_name": "painslutiero",
            "blog_uuid": "t:EPvCQV938ZwYCHfjD7p-zA",
            "blog_url": "https://painslutiero.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190010072527",
            "reblog_parent_blog_name": "oursaviorkellinquinn"
          },
          {
            "type": "reblog",
            "timestamp": 1577942272,
            "blog_name": "mypanicfallout",
            "blog_uuid": "t:Rt74kDcOXDA_OUyefnTkOg",
            "blog_url": "https://mypanicfallout.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "190009986008",
            "reblog_parent_blog_name": "wherethewaterstarts-andyouend"
          },
          {
            "type": "like",
            "timestamp": 1577942267,
            "blog_name": "mypanicfallout",
            "blog_uuid": "t:Rt74kDcOXDA_OUyefnTkOg",
            "blog_url": "https://mypanicfallout.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1577942198,
            "blog_name": "yay-depression",
            "blog_uuid": "t:UXqsMtAXyM9WMTTOIh6mnA",
            "blog_url": "https://yay-depression.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1577942134,
            "blog_name": "shittlesmcgiggles",
            "blog_uuid": "t:T0uVOlRiL8BGBkLp9lNvpQ",
            "blog_url": "https://shittlesmcgiggles.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190009952529",
            "reblog_parent_blog_name": "memories"
          },
          {
            "type": "reblog",
            "timestamp": 1577941971,
            "blog_name": "oursaviorkellinquinn",
            "blog_uuid": "t:icR2OWq5unxDrDedRVmnLg",
            "blog_url": "https://oursaviorkellinquinn.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190009911713",
            "reblog_parent_blog_name": "wherethewaterstarts-andyouend"
          },
          {
            "type": "like",
            "timestamp": 1577941958,
            "blog_name": "oursaviorkellinquinn",
            "blog_uuid": "t:icR2OWq5unxDrDedRVmnLg",
            "blog_url": "https://oursaviorkellinquinn.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1577940265,
            "blog_name": "wherethewaterstarts-andyouend",
            "blog_uuid": "t:g531-k5RHqDiedq_aglhNg",
            "blog_url": "https://wherethewaterstarts-andyouend.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "190009466429",
            "reblog_parent_blog_name": "memories"
          },
          {
            "type": "reblog",
            "timestamp": 1577939886,
            "blog_name": "softandsnowy",
            "blog_uuid": "t:t8_bhj6KgeLbmhUt5FRQnA",
            "blog_url": "https://softandsnowy.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "190009364212",
            "reblog_parent_blog_name": "memories"
          },
          {
            "type": "like",
            "timestamp": 1577927973,
            "blog_name": "absolute-randomness-forever",
            "blog_uuid": "t:pSXIOWnJefEJEy0cNDrfDg",
            "blog_url": "https://absolute-randomness-forever.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1577925870,
            "blog_name": "capther",
            "blog_uuid": "t:9AL_jjQlMd_mkQsWwQotjw",
            "blog_url": "https://capther.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1577925109,
            "blog_name": "millefori",
            "blog_uuid": "t:gjWI7tcC9KDGYeeP0toA9A",
            "blog_url": "https://millefori.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "190005171475",
            "reblog_parent_blog_name": "memories"
          },
          {
            "type": "reblog",
            "timestamp": 1577924000,
            "blog_name": "blastprocesing",
            "blog_uuid": "t:dkLbGGx7pqjHfuK2lKK-Cg",
            "blog_url": "https://blastprocesing.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "190004855669",
            "reblog_parent_blog_name": "memories"
          },
          {
            "type": "like",
            "timestamp": 1577918538,
            "blog_name": "maskedlady",
            "blog_uuid": "t:F10OTdhiEw0GREF8vixkMA",
            "blog_url": "https://maskedlady.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1577913658,
            "blog_name": "bodachs",
            "blog_uuid": "t:EzaSU46Q7MaCk6wCHVVy0Q",
            "blog_url": "https://bodachs.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1577909384,
            "blog_name": "lawsandother",
            "blog_uuid": "t:De3yUwvW-XnX_KkPCDRvGw",
            "blog_url": "https://lawsandother.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1577909085,
            "blog_name": "barcalfc",
            "blog_uuid": "t:sKcwhG5RTv-iVMsBQmqTLw",
            "blog_url": "https://barcalfc.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "190000414283",
            "reblog_parent_blog_name": "memories"
          },
          {
            "type": "like",
            "timestamp": 1577907212,
            "blog_name": "soleciri",
            "blog_uuid": "t:Cm6qbrO0evZI7Ws4JloKGg",
            "blog_url": "https://soleciri.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1577898458,
            "blog_name": "8liralik-armin-albumu",
            "blog_uuid": "t:LWOhuX_9WrRbKNTFK49leQ",
            "blog_url": "https://8liralik-armin-albumu.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "answer",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 183897944074,
        "post_url": "https://engineering.tumblr.com/post/183897944074/write-a-blog-post-about-security-that-i-can-reblog",
        "slug": "write-a-blog-post-about-security-that-i-can-reblog",
        "date": "2019-04-02 20:37:31 GMT",
        "timestamp": 1554237451,
        "state": "published",
        "format": "html",
        "reblog_key": "XULZNhdw",
        "tags": [ "security", "engineering", "best practices" ],
        "short_url": "https://tmblr.co/ZI3nWx2hHA-0A",
        "summary": "write a blog post about security that i can reblog to the engineering blog, my dude",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 75,
        "asking_name": "cyle",
        "asking_url": "https://cyle.tumblr.com/",
        "question": "write a blog post about security that i can reblog to the engineering blog, my dude",
        "answer": "<p><a class=\"tumblr_blog\" href=\"https://andrewcore.tumblr.com/post/183810779690/write-a-blog-post-about-security-that-i-can-reblog\">andrewcore</a>:</p>\n\n<blockquote><p>hmmmmmmmmm</p><figure class=\"tmblr-full\" data-orig-height=\"300\" data-orig-width=\"300\" data-tumblr-attribution=\"moctor:2EwKPP5EPGEiKQgwE5uOEQ:ZwWhRo2TBPPyo\"><img src=\"https://66.media.tumblr.com/6890fa77ef0c97f35fc5d3a73561bffe/tumblr_p1ad0tO0KL1tsymcro1_400.gif\" data-orig-height=\"300\" data-orig-width=\"300\"/></figure><p>ok here it goes:</p><ol><li><b><span class=\"npf_color_ross\">Use a password </span><span class=\"npf_color_ross\">manage</span></b><span class=\"npf_color_ross\">r</span> like 1Password. It’s hard to get started but it’s so much easier than remembering passwords and literally priceless vs getting pwned</li><li>Ok password managers are a good start but also make sure to <b><span class=\"npf_color_rachel\">enable two factor authentication</span></b>!! It’s where you need a second code (either texted to you or generated with your phone) to complete your login. Neat!!</li><li><span class=\"npf_color_joey\"><b>Update your stuff</b></span>. Do you have stuff with a chip in it and connects to the internet? Make sure it’s updated!!!</li><li><span style=\"color: #7c5cff\"><b>Don’t do sketchy things</b></span> on the internet!!!! </li></ol><p class=\"npf_quirky\" data-npf='{\"subtype\":\"quirky\"}'>Ok thanks for coming to my <span class=\"npf_color_monica\">TED </span><span class=\"npf_color_niles\">talk!</span></p><p>(But, for real tho, <span style=\"color: #7c5cff\"><i>Tech</i></span><i><span class=\"npf_color_niles\"> Solidarity</span></i> put together <span class=\"npf_color_rachel\"><b><a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Ftechsolidarity.org%2Fresources%2Fbasic_security.htm&amp;t=MjExMWQ1ZjdiMzE3NzY5N2E3ZGU2YzRhODI4OGVmNmI3ZTYyOWFiOCwwNzc4ZTY1OWI5ZWNmNTJhNjBlOTMzOGIyYzQ4YTIxZmQwMDk2Zjg0\">a super solid guide</a></b></span> on security principles for journalists and other high priority targets that is a great guide for securing your life!)</p></blockquote><p><p>Some great tips from one of Tumblr’s Engineers. 💯</p></p>",
        "reblog": {
          "comment": "<p>Some great tips from one of Tumblr’s Engineers. 💯</p>",
          "tree_html": "<p><a class=\"tumblr_blog\" href=\"https://andrewcore.tumblr.com/post/183810779690/write-a-blog-post-about-security-that-i-can-reblog\">andrewcore</a>:</p><blockquote>\n<p>hmmmmmmmmm</p>\n<figure class=\"tmblr-full\" data-orig-height=\"300\" data-orig-width=\"300\" data-tumblr-attribution=\"moctor:2EwKPP5EPGEiKQgwE5uOEQ:ZwWhRo2TBPPyo\"><img src=\"https://66.media.tumblr.com/6890fa77ef0c97f35fc5d3a73561bffe/tumblr_p1ad0tO0KL1tsymcro1_400.gif\" data-orig-height=\"300\" data-orig-width=\"300\"></figure><p>ok here it goes:</p>\n<ol>\n<li>\n<b><span class=\"npf_color_ross\">Use a password </span><span class=\"npf_color_ross\">manage</span></b><span class=\"npf_color_ross\">r</span> like 1Password. It’s hard to get started but it’s so much easier than remembering passwords and literally priceless vs getting pwned</li>\n<li>Ok password managers are a good start but also make sure to <b><span class=\"npf_color_rachel\">enable two factor authentication</span></b>!! It’s where you need a second code (either texted to you or generated with your phone) to complete your login. Neat!!</li>\n<li>\n<span class=\"npf_color_joey\"><b>Update your stuff</b></span>. Do you have stuff with a chip in it and connects to the internet? Make sure it’s updated!!!</li>\n<li>\n<span style=\"color: #7c5cff\"><b>Don’t do sketchy things</b></span> on the internet!!!! </li>\n</ol>\n<p class=\"npf_quirky\" data-npf='{\"subtype\":\"quirky\"}'>Ok thanks for coming to my <span class=\"npf_color_monica\">TED </span><span class=\"npf_color_niles\">talk!</span></p>\n<p>(But, for real tho, <span style=\"color: #7c5cff\"><i>Tech</i></span><i><span class=\"npf_color_niles\"> Solidarity</span></i> put together <span class=\"npf_color_rachel\"><b><a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Ftechsolidarity.org%2Fresources%2Fbasic_security.htm&amp;t=MjExMWQ1ZjdiMzE3NzY5N2E3ZGU2YzRhODI4OGVmNmI3ZTYyOWFiOCwwNzc4ZTY1OWI5ZWNmNTJhNjBlOTMzOGIyYzQ4YTIxZmQwMDk2Zjg0\">a super solid guide</a></b></span> on security principles for journalists and other high priority targets that is a great guide for securing your life!)</p>\n</blockquote>\n"
        },
        "trail": [
          {
            "blog": {
              "name": "andrewcore",
              "active": true,
              "theme": {
                "header_full_width": 1280,
                "header_full_height": 960,
                "header_focus_width": 1096,
                "header_focus_height": 616,
                "avatar_shape": "circle",
                "background_color": "#EEEEEE",
                "body_font": "Helvetica Neue",
                "header_bounds": "106,1096,722,0",
                "header_image": "https://static.tumblr.com/ddd762197bb135a04106d0485ef4fb36/zxetxvw/EOvpkzkm1/tumblr_static_.jpg",
                "header_image_focused": "https://static.tumblr.com/6c018799599e0e6ebedbddb1c9b40de8/zxetxvw/Rcjpzzvn5/tumblr_static_tumblr_static__focused_v3.jpg",
                "header_image_scaled": "https://assets.tumblr.com/images/default_header/optica_pattern_11_focused_v3.png?_v=4275fa0865b78225d79970023dde05a1",
                "header_stretch": true,
                "link_color": "#4687AE",
                "show_avatar": true,
                "show_description": true,
                "show_header_image": true,
                "show_title": true,
                "title_color": "#444444",
                "title_font": "Quadrat",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "183810779690" },
            "content_raw": "<p>hmmmmmmmmm</p>\n<figure class=\"tmblr-full\" data-orig-height=\"300\" data-orig-width=\"300\" data-tumblr-attribution=\"moctor:2EwKPP5EPGEiKQgwE5uOEQ:ZwWhRo2TBPPyo\"><img src=\"https://66.media.tumblr.com/6890fa77ef0c97f35fc5d3a73561bffe/tumblr_p1ad0tO0KL1tsymcro1_400.gif\" data-orig-height=\"300\" data-orig-width=\"300\"></figure><p>ok here it goes:</p>\n<ol><li>\n<b><span class=\"npf_color_ross\">Use a password </span><span class=\"npf_color_ross\">manage</span></b><span class=\"npf_color_ross\">r</span> like 1Password. It’s hard to get started but it’s so much easier than remembering passwords and literally priceless vs getting pwned</li>\n<li>Ok password managers are a good start but also make sure to <b><span class=\"npf_color_rachel\">enable two factor authentication</span></b>!! It’s where you need a second code (either texted to you or generated with your phone) to complete your login. Neat!!</li>\n<li>\n<span class=\"npf_color_joey\"><b>Update your stuff</b></span>. Do you have stuff with a chip in it and connects to the internet? Make sure it’s updated!!!</li>\n<li>\n<span style=\"color: #7c5cff\"><b>Don’t do sketchy things</b></span> on the internet!!!! </li>\n</ol><p class=\"npf_quirky\" data-npf='{\"subtype\":\"quirky\"}'>Ok thanks for coming to my <span class=\"npf_color_monica\">TED </span><span class=\"npf_color_niles\">talk!</span></p>\n<p>(But, for real tho, <span style=\"color: #7c5cff\"><i>Tech</i></span><i><span class=\"npf_color_niles\"> Solidarity</span></i> put together <span class=\"npf_color_rachel\"><b><a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Ftechsolidarity.org%2Fresources%2Fbasic_security.htm&amp;t=MjExMWQ1ZjdiMzE3NzY5N2E3ZGU2YzRhODI4OGVmNmI3ZTYyOWFiOCwwNzc4ZTY1OWI5ZWNmNTJhNjBlOTMzOGIyYzQ4YTIxZmQwMDk2Zjg0\">a super solid guide</a></b></span> on security principles for journalists and other high priority targets that is a great guide for securing your life!)</p>",
            "content": "<p>hmmmmmmmmm</p>\n<figure data-tumblr-media-id=\"0\" class=\"tmblr-full\"></figure><p>ok here it goes:</p>\n<ol><li>\n<b><span class=\"npf_color_ross\">Use a password </span><span class=\"npf_color_ross\">manage</span></b><span class=\"npf_color_ross\">r</span> like 1Password. It&rsquo;s hard to get started but it&rsquo;s so much easier than remembering passwords and literally priceless vs getting pwned</li>\n<li>Ok password managers are a good start but also make sure to <b><span class=\"npf_color_rachel\">enable two factor authentication</span></b>!! It&rsquo;s where you need a second code (either texted to you or generated with your phone) to complete your login. Neat!!</li>\n<li>\n<span class=\"npf_color_joey\"><b>Update your stuff</b></span>. Do you have stuff with a chip in it and connects to the internet? Make sure it&rsquo;s updated!!!</li>\n<li>\n<span style=\"color: #7c5cff\"><b>Don&rsquo;t do sketchy things</b></span> on the internet!!!! </li>\n</ol><p class=\"npf_quirky\" data-npf=\"{&quot;subtype&quot;:&quot;quirky&quot;}\">Ok thanks for coming to my <span class=\"npf_color_monica\">TED </span><span class=\"npf_color_niles\">talk!</span></p>\n<p>(But, for real tho, <span style=\"color: #7c5cff\"><i>Tech</i></span><i><span class=\"npf_color_niles\"> Solidarity</span></i> put together <span class=\"npf_color_rachel\"><b><a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Ftechsolidarity.org%2Fresources%2Fbasic_security.htm&amp;t=MjExMWQ1ZjdiMzE3NzY5N2E3ZGU2YzRhODI4OGVmNmI3ZTYyOWFiOCwwNzc4ZTY1OWI5ZWNmNTJhNjBlOTMzOGIyYzQ4YTIxZmQwMDk2Zjg0\">a super solid guide</a></b></span> on security principles for journalists and other high priority targets that is a great guide for securing your life!)</p>",
            "is_root_item": true
          },
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "183897944074" },
            "content_raw": "<p>Some great tips from one of Tumblr’s Engineers. 💯</p>",
            "content": "<p>Some great tips from one of Tumblr&rsquo;s Engineers. &#128175;</p>",
            "is_current_item": true
          }
        ],
        "reblogged_from_id": "183810779690",
        "reblogged_from_url": "https://andrewcore.tumblr.com/post/183810779690/write-a-blog-post-about-security-that-i-can-reblog",
        "reblogged_from_name": "andrewcore",
        "reblogged_from_title": "andrewcore",
        "reblogged_from_uuid": "t:LXtngItCDLq3dr9kvcrAqA",
        "reblogged_from_can_message": true,
        "reblogged_root_id": "183810779690",
        "reblogged_root_url": "https://andrewcore.tumblr.com/post/183810779690/write-a-blog-post-about-security-that-i-can-reblog",
        "reblogged_root_name": "andrewcore",
        "reblogged_root_title": "andrewcore",
        "reblogged_root_uuid": "t:LXtngItCDLq3dr9kvcrAqA",
        "reblogged_root_can_message": true,
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1572086984,
            "blog_name": "rainbowlight100",
            "blog_uuid": "t:q7Ienh9NLpUb4SJx18bj5w",
            "blog_url": "https://rainbowlight100.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570659704,
            "blog_name": "alex0two",
            "blog_uuid": "t:7VQwPTcur8RLCwixu9q8dw",
            "blog_url": "https://alex0two.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1562791453,
            "blog_name": "holisticfansstuff",
            "blog_uuid": "t:ciYa2ItlamfgTWnl_cikJQ",
            "blog_url": "https://holisticfansstuff.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1555152082,
            "blog_name": "deualogica",
            "blog_uuid": "t:jf5-pn0kVhyRiLXIuWSlew",
            "blog_url": "https://deualogica.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184152504207",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1554636881,
            "blog_name": "boiigenus",
            "blog_uuid": "t:fkGHCULBN2SBJcXpTK4vvQ",
            "blog_url": "https://boiigenus.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1554636192,
            "blog_name": "do-nothing",
            "blog_uuid": "t:iQXt8YPOG7VWFFMX5UIJPA",
            "blog_url": "https://do-nothing.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "184008101715",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1554573775,
            "blog_name": "bleedingrocketship",
            "blog_uuid": "t:5qFhkSk-R-jKSiSnIyJRSg",
            "blog_url": "https://bleedingrocketship.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1554382135,
            "blog_name": "byul-kongs",
            "blog_uuid": "t:R0z5wDZ7sU55TI2Z2yfuCg",
            "blog_url": "https://byul-kongs.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "183936949384",
            "reblog_parent_blog_name": "gohjah"
          },
          {
            "type": "reblog",
            "timestamp": 1554372708,
            "blog_name": "gohjah",
            "blog_uuid": "t:aWgvqBi5FWaLrcRhcSFjRA",
            "blog_url": "https://gohjah.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "183934788382",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1554348796,
            "blog_name": "pipefail",
            "blog_uuid": "t:snvdkTsd6P3iKwsHwUme6g",
            "blog_url": "https://tumblr.pipefail.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1554345002,
            "blog_name": "dewen-ii",
            "blog_uuid": "t:K6e_BBvvD_0a8G_iqn01Fg",
            "blog_url": "https://dewen-ii.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "183927907860",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "reblog",
            "timestamp": 1554305594,
            "blog_name": "androgynouspaperyouth",
            "blog_uuid": "t:inliK4HmXWn3D4RHl6Gcug",
            "blog_url": "https://androgynouspaperyouth.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "183915399518",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1554277237,
            "blog_name": "deualogica",
            "blog_uuid": "t:jf5-pn0kVhyRiLXIuWSlew",
            "blog_url": "https://deualogica.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1554272576,
            "blog_name": "autowahn",
            "blog_uuid": "t:RJGXAHhPQQYrXgNlpejuNw",
            "blog_url": "https://autowahn.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reply",
            "timestamp": 1554267975,
            "blog_name": "ph4z0n",
            "blog_uuid": "t:CnUUP9OIxSOdxoENQzzLvQ",
            "blog_url": "https://ph4z0n.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "The 2000s taught us to never trust advice from multicolor animated smilies on the internets...",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1554266755,
            "blog_name": "ph4z0n",
            "blog_uuid": "t:CnUUP9OIxSOdxoENQzzLvQ",
            "blog_url": "https://ph4z0n.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1554266569,
            "blog_name": "illegible",
            "blog_uuid": "t:7RXIPPkEeZ9WpvZNgZTzfQ",
            "blog_url": "https://illegible.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1554264006,
            "blog_name": "lightwarde",
            "blog_uuid": "t:oZ9XixewlMQhy7xd76jAww",
            "blog_url": "https://lightwarde.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1554261686,
            "blog_name": "off-by-one",
            "blog_uuid": "t:0fkm4sCuSeH37kyr8s3xjg",
            "blog_url": "https://off-by-one.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1554260460,
            "blog_name": "fictionfreakazoid",
            "blog_uuid": "t:iMhdIlGkZIL3VlzKlq_5Yw",
            "blog_url": "https://fictionfreakazoid.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1554258203,
            "blog_name": "tracken",
            "blog_uuid": "t:dk2XfBYpvC0-t0DCOaF6QA",
            "blog_url": "https://tracken.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1554256925,
            "blog_name": "inthedarktrees",
            "blog_uuid": "t:F6BHE-otGepwFWDpahR97A",
            "blog_url": "https://inthedarktrees.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1554256315,
            "blog_name": "jeffdonof",
            "blog_uuid": "t:cbibcUZvCapSTcHfgTovkA",
            "blog_url": "https://jeffdonof.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1554254001,
            "blog_name": "lion-byte",
            "blog_uuid": "t:4cuzRuAfdCGX27Gg5s9bqA",
            "blog_url": "https://jtdoggzone.co.vu/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "183903043592",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "reblog",
            "timestamp": 1554251490,
            "blog_name": "queen-amaretto",
            "blog_uuid": "t:A1hABze9NxoErSD2kOIv1Q",
            "blog_url": "https://queen-amaretto.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "183902265765",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1554251105,
            "blog_name": "projectedinfinity",
            "blog_uuid": "t:Ap3_5A-lym-o5U6xtIhjgg",
            "blog_url": "https://projectedinfinity.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1554250786,
            "blog_name": "burning--amber",
            "blog_uuid": "t:-P0VLKGhdg7seVWqxbiBog",
            "blog_url": "https://burning--amber.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "183902052647",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1554250123,
            "blog_name": "burning--amber",
            "blog_uuid": "t:-P0VLKGhdg7seVWqxbiBog",
            "blog_url": "https://burning--amber.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1554249683,
            "blog_name": "flying-press",
            "blog_uuid": "t:JGRUV1LtjdDWtIyYty5zUA",
            "blog_url": "https://flying-press.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1554247459,
            "blog_name": "paopumew",
            "blog_uuid": "t:H5XumWXtW9vuUtqUtU1JHw",
            "blog_url": "https://paopumew.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "183901069099",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1554247284,
            "blog_name": "celestriakle",
            "blog_uuid": "t:lXzZcmEElvuWzTQ78QVShA",
            "blog_url": "https://celestriakle.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1554244835,
            "blog_name": "annakurganova",
            "blog_uuid": "t:ztc_a567XUSOYanV86D8Jw",
            "blog_url": "https://annakurganova.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1554244592,
            "blog_name": "seeiamgroot",
            "blog_uuid": "t:9YY_NeigdAG5UA0jHxJj8g",
            "blog_url": "https://seeiamgroot.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "183900225210",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1554244588,
            "blog_name": "seeiamgroot",
            "blog_uuid": "t:9YY_NeigdAG5UA0jHxJj8g",
            "blog_url": "https://seeiamgroot.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1554244154,
            "blog_name": "windowsapologist",
            "blog_uuid": "t:-ThQtDZk7p12Tad1eruycQ",
            "blog_url": "https://windowsapologist.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1554243480,
            "blog_name": "paul300",
            "blog_uuid": "t:FltZ1Hp_yDjVw3r6FM2Fiw",
            "blog_url": "https://www.nicelab.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1554243060,
            "blog_name": "frogburt",
            "blog_uuid": "t:m5zLEWJ0enPK-cvYZSKGcQ",
            "blog_url": "https://frogburt.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1554242159,
            "blog_name": "manyblinkinglights",
            "blog_uuid": "t:FpeisIIg2Ke1TRxtWOs51Q",
            "blog_url": "https://manyblinkinglights.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1554242113,
            "blog_name": "tmpi",
            "blog_uuid": "t:IkHVjk2jTDyyHEy6aaYKOw",
            "blog_url": "https://tmpi.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1554242044,
            "blog_name": "gary4freecycle",
            "blog_uuid": "t:RG09GsTaTS2F5sNwV74jgA",
            "blog_url": "https://gary4freecycle.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1554241514,
            "blog_name": "themagnificentmags",
            "blog_uuid": "t:_T34Z4_ooh-rQZPaT7vi_Q",
            "blog_url": "https://themagnificentmags.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1554240600,
            "blog_name": "weihnachten",
            "blog_uuid": "t:-zBvlDNRVNxkhy4yYpC5uA",
            "blog_url": "https://weihnachten.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "183898982762",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1554240083,
            "blog_name": "sunburntmirth",
            "blog_uuid": "t:299a0N8sJUWo84-z0PioDw",
            "blog_url": "https://sunburntmirth.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1554240035,
            "blog_name": "kittiesandapples",
            "blog_uuid": "t:SOm-zTmVdu70OH19pk4qGg",
            "blog_url": "https://kittiesandapples.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1554240032,
            "blog_name": "hyratel",
            "blog_uuid": "t:AomfzrTd-M-r8XFeYdCUsA",
            "blog_url": "https://hyratel.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "183898798982",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "reblog",
            "timestamp": 1554239231,
            "blog_name": "kingofcandyland",
            "blog_uuid": "t:411DpD5v4aF1rhaPGukmIQ",
            "blog_url": "https://kingofcandyland.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "183898538299",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1554238806,
            "blog_name": "andrewcore",
            "blog_uuid": "t:LXtngItCDLq3dr9kvcrAqA",
            "blog_url": "https://andrewcore.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 183075992674,
        "post_url": "https://engineering.tumblr.com/post/183075992674/how-to-be-a-great-engineer",
        "slug": "how-to-be-a-great-engineer",
        "date": "2019-02-26 19:02:22 GMT",
        "timestamp": 1551207742,
        "state": "published",
        "format": "html",
        "reblog_key": "1HjDANJT",
        "tags": [ "engineering", "engineers", "wisdom" ],
        "short_url": "https://tmblr.co/ZI3nWx2gWBVHY",
        "summary": "How to be a great engineer",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 172,
        "title": "How to be a great engineer",
        "body": "<p><a href=\"https://diana.tumblr.com/post/183075654774/how-to-be-a-great-engineer\" class=\"tumblr_blog\">diana</a>:</p><blockquote>\n<ol><li>\n<b>Master the art of being wrong</b>. Be confident in your answer but do not be closed-minded. The person who believes they are the most ignorant in the room will be the one who learns the most. </li>\n<li>\n<b>When you think somebody is wrong, teach them and do not scold them. </b>There are ways to problem-solve that do not require steamrolling others. Powerful engineers are those who help others find the same solution that they did, but letting them do it on their own. </li>\n<li>\n<b>Listen to people</b>. Do not interrupt others when they are talking, no matter how wrong you think they are. Again there are ways to problem-solve without interrupting others.</li>\n<li>\n<b>Ask questions</b>. Instead of saying “you are wrong” ask them the questions that you asked yourself. </li>\n</ol><p>Being a great engineer is not about how fast you come up with a solution or how many times you say “No that’s wrong.” Being a great engineer is about how many people you can lift while you climb, how well you can teach people, and how well you can communicate your concerns without discouraging people. </p>\n</blockquote>\n<p>Some wisdom from one of our amazing engineers at Tumblr! 👏</p>",
        "reblog": {
          "comment": "<p>Some wisdom from one of our amazing engineers at Tumblr! 👏</p>",
          "tree_html": "<p><a href=\"https://diana.tumblr.com/post/183075654774/how-to-be-a-great-engineer\" class=\"tumblr_blog\">diana</a>:</p>\n<blockquote>\n<ol>\n<li>\n<b>Master the art of being wrong</b>. Be confident in your answer but do not be closed-minded. The person who believes they are the most ignorant in the room will be the one who learns the most. </li>\n<li>\n<b>When you think somebody is wrong, teach them and do not scold them. </b>There are ways to problem-solve that do not require steamrolling others. Powerful engineers are those who help others find the same solution that they did, but letting them do it on their own. </li>\n<li>\n<b>Listen to people</b>. Do not interrupt others when they are talking, no matter how wrong you think they are. Again there are ways to problem-solve without interrupting others.</li>\n<li>\n<b>Ask questions</b>. Instead of saying “you are wrong” ask them the questions that you asked yourself. </li>\n</ol>\n<p>Being a great engineer is not about how fast you come up with a solution or how many times you say “No that’s wrong.” Being a great engineer is about how many people you can lift while you climb, how well you can teach people, and how well you can communicate your concerns without discouraging people. </p>\n</blockquote>"
        },
        "trail": [
          {
            "blog": {
              "name": "diana",
              "active": true,
              "theme": {
                "header_full_width": 456,
                "header_full_height": 810,
                "header_focus_width": 456,
                "header_focus_height": 257,
                "avatar_shape": "square",
                "background_color": "#FAFAFA",
                "body_font": "Helvetica Neue",
                "header_bounds": "382,456,639,0",
                "header_image": "https://static.tumblr.com/4c117670db4bfc54add4c12d83106f29/y4px0ar/BAlphef8l/tumblr_static_.jpg",
                "header_image_focused": "https://static.tumblr.com/4c117670db4bfc54add4c12d83106f29/y4px0ar/0Xxphef8m/tumblr_static_tumblr_static__focused_v3.jpg",
                "header_image_scaled": "https://static.tumblr.com/4c117670db4bfc54add4c12d83106f29/y4px0ar/BAlphef8l/tumblr_static__2048_v2.jpg",
                "header_stretch": true,
                "link_color": "#FFBFBF",
                "show_avatar": true,
                "show_description": true,
                "show_header_image": false,
                "show_title": true,
                "title_color": "#444444",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "183075654774" },
            "content_raw": "<p><ol><li>\n<b>Master the art of being wrong</b>. Be confident in your answer but do not be closed-minded. The person who believes they are the most ignorant in the room will be the one who learns the most. </li>\n<li>\n<b>When you think somebody is wrong, teach them and do not scold them. </b>There are ways to problem-solve that do not require steamrolling others. Powerful engineers are those who help others find the same solution that they did, but letting them do it on their own. </li>\n<li>\n<b>Listen to people</b>. Do not interrupt others when they are talking, no matter how wrong you think they are. Again there are ways to problem-solve without interrupting others.</li>\n<li>\n<b>Ask questions</b>. Instead of saying “you are wrong” ask them the questions that you asked yourself. </li>\n</ol><p>Being a great engineer is not about how fast you come up with a solution or how many times you say “No that’s wrong.” Being a great engineer is about how many people you can lift while you climb, how well you can teach people, and how well you can communicate your concerns without discouraging people. </p></p>",
            "content": "<p><ol><li>\n<b>Master the art of being wrong</b>. Be confident in your answer but do not be closed-minded. The person who believes they are the most ignorant in the room will be the one who learns the most.&nbsp;</li>\n<li>\n<b>When you think somebody is wrong, teach them and do not scold them. </b>There are ways to problem-solve that do not require steamrolling others. Powerful engineers are those who help others find the same solution that they did, but letting them do it on their own.&nbsp;</li>\n<li>\n<b>Listen to people</b>. Do not interrupt others when they are talking, no matter how wrong you think they are. Again there are ways to problem-solve without interrupting others.</li>\n<li>\n<b>Ask questions</b>. Instead of saying&nbsp;&ldquo;you are wrong&rdquo; ask them the questions that you asked yourself.&nbsp;</li>\n</ol><p>Being a great engineer is not about how fast you come up with a solution or how many times you say &ldquo;No that&rsquo;s wrong.&rdquo; Being a great engineer is about how many people you can lift while you climb, how well you can teach people, and how well you can communicate your concerns without discouraging people.&nbsp;</p></p>",
            "is_root_item": true
          },
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "183075992674" },
            "content_raw": "<p>Some wisdom from one of our amazing engineers at Tumblr! 👏</p>",
            "content": "<p>Some wisdom from one of our amazing engineers at Tumblr! &#128079;</p>",
            "is_current_item": true
          }
        ],
        "reblogged_from_id": "183075654774",
        "reblogged_from_url": "https://diana.tumblr.com/post/183075654774/how-to-be-a-great-engineer",
        "reblogged_from_name": "diana",
        "reblogged_from_title": "Hello folks 💭",
        "reblogged_from_uuid": "t:7NRETtqDLxBPGdHB7ZsjbA",
        "reblogged_from_can_message": true,
        "reblogged_root_id": "183075654774",
        "reblogged_root_url": "https://diana.tumblr.com/post/183075654774/how-to-be-a-great-engineer",
        "reblogged_root_name": "diana",
        "reblogged_root_title": "Hello folks 💭",
        "reblogged_root_uuid": "t:7NRETtqDLxBPGdHB7ZsjbA",
        "reblogged_root_can_message": true,
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1572629738,
            "blog_name": "rosecrystallis",
            "blog_uuid": "t:aUsjs75HnJu4S-1ddnWfUw",
            "blog_url": "https://rosecrystallis.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570906121,
            "blog_name": "alainlazarus",
            "blog_uuid": "t:sTZYe2R8IH_ZmD1_J5i4Zg",
            "blog_url": "https://alainlazarus.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1570659705,
            "blog_name": "alex0two",
            "blog_uuid": "t:7VQwPTcur8RLCwixu9q8dw",
            "blog_url": "https://alex0two.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1568172403,
            "blog_name": "milesawayfrmhome",
            "blog_uuid": "t:JaAhdQ3eJWC2HOcWt77B9w",
            "blog_url": "https://milesawayfrmhome.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "187635149785",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1567444611,
            "blog_name": "leonardoos-stuff",
            "blog_uuid": "t:5vU_tHm-I0WjtnXcxLWJJA",
            "blog_url": "https://leonardoos-stuff.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1567362824,
            "blog_name": "slipperyhoneybadger",
            "blog_uuid": "t:eHukUcmM1iriJ_GzU2mP1w",
            "blog_url": "https://slipperyhoneybadger.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1566528217,
            "blog_name": "alittlebitgoesalongway",
            "blog_uuid": "t:xenhaEKbJbOufnID1PlKsQ",
            "blog_url": "https://alittlebitgoesalongway.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "187202445970",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1566528179,
            "blog_name": "alittlebitgoesalongway",
            "blog_uuid": "t:xenhaEKbJbOufnID1PlKsQ",
            "blog_url": "https://alittlebitgoesalongway.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1563338374,
            "blog_name": "kiyohcru",
            "blog_uuid": "t:HyS2tsSDm_j7EVDC8Zd1dQ",
            "blog_url": "https://kiyohcru.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1560935908,
            "blog_name": "michaelsfinest",
            "blog_uuid": "t:_I8-0_fGY1vjFuLtQDV25w",
            "blog_url": "https://michaelsfinest.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1559919348,
            "blog_name": "gold--sparrow",
            "blog_uuid": "t:c5YCxVwzqlUTokSASUQiPw",
            "blog_url": "https://gold--sparrow.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1559024779,
            "blog_name": "100jamesnotjim",
            "blog_uuid": "t:OWO9LvzRtVZCKPIGFcvuvw",
            "blog_url": "https://100jamesnotjim.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1557315302,
            "blog_name": "lookitsaflyingunicorn",
            "blog_uuid": "t:2CcdoTQp6JhdrTXegkQjlA",
            "blog_url": "https://lookitsaflyingunicorn.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1557192444,
            "blog_name": "wartoyo0707",
            "blog_uuid": "t:8JA-r6l7kWHvsRodW58rOA",
            "blog_url": "https://wartoyo0707.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1556958713,
            "blog_name": "nanastevie",
            "blog_uuid": "t:yEUPBAFVCDvifK86QHeRSg",
            "blog_url": "https://nanastevie.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184639273627",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "reblog",
            "timestamp": 1556654767,
            "blog_name": "skacore182",
            "blog_uuid": "t:luHQIxx8O1HGdE3flcH_8A",
            "blog_url": "https://skacore182.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "184557525317",
            "reblog_parent_blog_name": "benjaminikuta"
          },
          {
            "type": "like",
            "timestamp": 1556654766,
            "blog_name": "skacore182",
            "blog_uuid": "t:luHQIxx8O1HGdE3flcH_8A",
            "blog_url": "https://skacore182.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1556624906,
            "blog_name": "benjaminikuta",
            "blog_uuid": "t:TV1BBWqGMpzLdeht0dxiAw",
            "blog_url": "https://benjaminikuta.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184549320404",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "reblog",
            "timestamp": 1556519476,
            "blog_name": "just-fine-t-3",
            "blog_uuid": "t:Ga4GhCdBJdSmXTqpR12-wA",
            "blog_url": "https://just-fine-t-3.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184522258609",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "reblog",
            "timestamp": 1556370695,
            "blog_name": "gloriousllamatoadturkey",
            "blog_uuid": "t:PgRcPlOXZas-ibX7Zf7FWA",
            "blog_url": "https://gloriousllamatoadturkey.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "184479999110",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1556370662,
            "blog_name": "gloriousllamatoadturkey",
            "blog_uuid": "t:PgRcPlOXZas-ibX7Zf7FWA",
            "blog_url": "https://gloriousllamatoadturkey.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1556325033,
            "blog_name": "gmannepalli",
            "blog_uuid": "t:XmSsDbbrR5SZm0BlXEITAQ",
            "blog_url": "https://gmannepalli.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1555754162,
            "blog_name": "johnnyackermann",
            "blog_uuid": "t:_Q_MRyaQeSqzm0rHJzoL-Q",
            "blog_url": "https://johnnyackermann.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "184315147011",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1555754159,
            "blog_name": "johnnyackermann",
            "blog_uuid": "t:_Q_MRyaQeSqzm0rHJzoL-Q",
            "blog_url": "https://johnnyackermann.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1555618840,
            "blog_name": "kevbrinx",
            "blog_uuid": "t:hWKlJa4C5GN9JDcVfiN0Fw",
            "blog_url": "https://markmycomics.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1555308626,
            "blog_name": "atreeone510",
            "blog_uuid": "t:j9nMT_TEWLZ0aVq_rzlvoQ",
            "blog_url": "https://atreeone510.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "184197092772",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1555135407,
            "blog_name": "softboi-in-the-closet",
            "blog_uuid": "t:fzEbmYEu3XKz_5C5adoHng",
            "blog_url": "https://softboi-in-the-closet.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1555095628,
            "blog_name": "emiluvy",
            "blog_uuid": "t:RCMN-KQDMhe4tMjzZdd4NA",
            "blog_url": "https://emiluvy.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1554988890,
            "blog_name": "raptorviolet",
            "blog_uuid": "t:HP_d5aI8c7w8wdsBxm19yQ",
            "blog_url": "https://raptorviolet.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1554570294,
            "blog_name": "mynameisntalfred",
            "blog_uuid": "t:fcbTyt38eyEhdEwfluZChg",
            "blog_url": "https://mynameisntalfred.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "183989663148",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1554532485,
            "blog_name": "awnerd",
            "blog_uuid": "t:ngZnSjoFC4gQtDubARuK5g",
            "blog_url": "https://awnerd.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1554243186,
            "blog_name": "amensutters",
            "blog_uuid": "t:wnmcaVHZIktTwrKhFSPuUQ",
            "blog_url": "https://amensutters.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "183899797266",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1554243181,
            "blog_name": "amensutters",
            "blog_uuid": "t:wnmcaVHZIktTwrKhFSPuUQ",
            "blog_url": "https://amensutters.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1554241877,
            "blog_name": "ishiduca",
            "blog_uuid": "t:8UhK7SI8Gn3GI71okqGxjw",
            "blog_url": "https://ishiduca.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1554098223,
            "blog_name": "deefantasize",
            "blog_uuid": "t:HnsEp62VG3wOFmmhYn0FjA",
            "blog_url": "https://deefantasize.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1553948695,
            "blog_name": "rycevael",
            "blog_uuid": "t:qPA1a084XYiNWJctWU35zQ",
            "blog_url": "https://rycevael.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1553728806,
            "blog_name": "kelebeklerdiyarindabirkarinca",
            "blog_uuid": "t:baNyDAxVnoFlywjdnOUxig",
            "blog_url": "https://kelebeklerdiyarindabirkarinca.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1553525959,
            "blog_name": "androgynouspaperyouth",
            "blog_uuid": "t:inliK4HmXWn3D4RHl6Gcug",
            "blog_url": "https://androgynouspaperyouth.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1553441886,
            "blog_name": "lux-orbisque",
            "blog_uuid": "t:OhePIFgwYVY9Uy8OS42XNQ",
            "blog_url": "https://lux-orbisque.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1553357199,
            "blog_name": "bluethingsandmagic",
            "blog_uuid": "t:BIXhQmXoxBn4j-LGt0ngng",
            "blog_url": "https://bluethingsandmagic.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1553265374,
            "blog_name": "itssamood",
            "blog_uuid": "t:D8RgrTzGaZ1gWBBGuLLduw",
            "blog_url": "https://itssamood.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1553118120,
            "blog_name": "vanesahad",
            "blog_uuid": "t:FKGuebl8CvpKb5fWzhHWyw",
            "blog_url": "https://vanesahad.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 182554757749,
        "post_url": "https://engineering.tumblr.com/post/182554757749/javascript-how-we-wrote-our-own-service",
        "slug": "javascript-how-we-wrote-our-own-service",
        "date": "2019-02-04 16:00:14 GMT",
        "timestamp": 1549296014,
        "state": "published",
        "format": "html",
        "reblog_key": "95wKOgAW",
        "tags": [ "engineering", "javascript" ],
        "short_url": "https://tmblr.co/ZI3nWx2g178fr",
        "summary": "How we wrote our own Service Worker\n\n \n  As we continue the process of\n  reinvigorating Tumblr’s frontend web development, we’re...",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 83,
        "title": null,
        "body": "<p><a href=\"https://javascript.tumblr.com/post/182476050141/how-we-wrote-our-own-service-worker-as-we\" class=\"tumblr_blog\">javascript</a>:</p>\n\n<blockquote>\n<h1>How we wrote our own Service Worker</h1>\n\n<p>\n  As we continue the process of\n  <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\">reinvigorating Tumblr’s frontend web development</a>, we’re always on the lookout for modern web technologies, especially ones that make our mobile\n  site feel faster and more native. You could have guessed that we are making the mobile dashboard\n  into a progressive app when we\n  <a href=\"https://javascript.tumblr.com/post/177492037092/making-a-progressive-web-app-with-webpack-just-got\">open-sourced our webpack plugin to make web app manifests</a>\n  back in August. And you would’ve been right. But to make a high quality progressive web app, you\n  need more than just a web app manifest—you also need a service worker.\n</p>\n\n<h2>What is a service worker?</h2>\n\n<p>\n  A service worker is a helper script that a page registers with the browser. After it is registered\n  (some people like to also call it “installed”), the browser periodically checks the script for\n  changes. If any part of the script contents changes, the browser reinstalls the updated script.\n</p>\n\n<p>\n  Service workers are most commonly used to intercept browser fetches and do various things with\n  them.\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fserviceworke.rs&amp;t=OWJmNDBjNWFiYmU2OTFhMWExNmIyODQ2ZjgzOTAyNjZiYTFiZjZmOSw0NDE3MjIxYzljMzUyZDZiOGI5NzA1ZjMyNzIyOWZhMDVlN2I4YTg2\">https://serviceworke.rs</a>\n  has a lot of great ideas about what you can do with service workers, with code examples. We\n  decided to use our service worker to cache some JS, CSS, and font assets when it is installed, and\n  to respond with those assets when the browser fetches any of them.\n</p>\n\n<h2>Using a service worker to precache assets</h2>\n\n<p>\n  You might be wondering “why would you want to pre-cache assets when the service worker is\n  installed? Isn’t that the same thing that the browser cache does?” While the browser cache does\n  cache assets after they’re requested, our service worker can cache assets <i>before</i> they’re\n  requested. This greatly speeds up parts of the page that we load in asynchronously, like the notes\n  popover, or blogs that you tap into from the mobile dashboard.\n</p>\n\n<p>\n  While there are open-source projects that generate service workers to pre-cache your assets (like,\n  for example,\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2FGoogleChromeLabs%2Fsw-precache&amp;t=YWJkMmU1ZmVlOWMxMTU5MTdiNTVhMWFiYTA0MjE0OGNmMDQ3OTdhOSw1MGFlNWU2ZjM4ZDZhMmI3NzRlYjk0Mzg5MjUyZGM5YWQ2NTc2ZjYz\">sw-precache</a>), we chose to build our own service worker. When I started this project, I didn’t have any idea\n  what service workers were, and I wanted to learn all about them. And what better way to learn\n  about service workers than building one?\n</p>\n\n<h2>How our service worker is built</h2>\n\n<p>\n  Because the service worker needs to know about all of the JS, CSS, and font assets in order to\n  pre-cache them, we build a piece of the service worker during our build phase. This part of the\n  service worker changes whenever our assets are updated. During the build step, we take a list of\n  all of the assets that are output, filter them down into just the ones we want to pre-cache, and\n  write them out to an array in a JS file that we call sw.js.\n</p>\n\n<p>\n  That service worker file importScripts()’s a separate file that contains all of our service worker\n  functionality. All of the service worker functionality is built separately and\n  <a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\">written in TypeScript</a>, but the file that contains all of our assets is plain JavaScript.\n</p>\n\n<p>\n  We decided to serve our service worker directly from our node.js app. Our other assets are served\n  using\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.cloudflare.com%2Flearning%2Fcdn%2Fwhat-is-a-cdn%2F&amp;t=ZWJhODUxMjBiZDU1MzUzMTg3MTJjMzdlNDhiYWNhNThmYWRkMTQ5OCw4YWUyNTc3M2RmZWNlZDdmYjAzZDE4YWE1OGI4YTRmYzE1ZGJmMmUx\">CDNs</a>. Because our CDN servers are often geographically closer to our users, our assets load faster\n  from there than they do from our app. Using CDNs also keeps simple, asset-transfer traffic away\n  from our app, which gives us space us to do more complicated things (like rendering your dashboard\n  with React).\n</p>\n\n<p>\n  To keep asset traffic that reaches our app to a minimum, we tell our CDNs not to check back for\n  updates to our assets for a long time. This is sometimes referred to as caching with a long TTL\n  (time to live). As we know,\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.martinfowler.com%2Fbliki%2FTwoHardThings.html&amp;t=NTgwOTAxN2QyMzFiZWE1MDhkOWI3ZDFkZDE5NjgzMDUxYTJjMDFiMCxiYWNkMmU0YjJlMDVjM2YyZDQ3MTJmNmM1NGYyZmI5YTg4NGYzOGMy\">cache-invalidation</a>\n  is a tough computer science problem, so we generate unique filenames based on the asset contents\n  each time we build our assets. That way, when we request the new asset, we know that we’re going\n  to get it because we use the new file name.\n</p>\n\n<p>\n  Because the browser wants to check back in with the service worker script to see if there are any\n  changes, caching it in our CDNs is not a good fit. We would have to figure out how to do cache\n  invalidation for that file, but none of the other assets. By serving that file directly from our\n  node.js application, we get some additional asset-transfer traffic to our application but we think\n  it’s worth it because it avoids all of the issues with caching.\n</p>\n\n<h2>How does it pre-cache assets?</h2>\n\n<p>\n  When the service worker is installed, it compares the asset list in sw.js to the list of assets\n  that it has in its cache. If an asset is in the cache, but not listed in sw.js, the asset gets\n  deleted from the cache. If an asset is in sw.js, but not in the service worker cache, we download\n  and cache it. If an asset is in sw.js and in the cache, it hasn’t changed, so we don’t need to do\n  anything.\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_ross\">// in sw.js</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">self</span>.ASSETS <span class=\"npf_color_joey\">=</span> [\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    <span class=\"npf_color_monica\">‘main.js’</span>,\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    <span class=\"npf_color_monica\">‘notes-popover.js’</span>,\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    <span class=\"npf_color_monica\">&lsquo;favorit.woff’</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>];</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_ross\">// in service-worker.ts</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">self</span>.<span class=\"npf_color_rachel\">addEventListener</span>(<span class=\"npf_color_monica\">'install’</span>, install);\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">const</span> install <span class=\"npf_color_joey\">=</span> event\n  <span class=\"npf_color_rachel\">=&gt;</span> event.<span class=\"npf_color_chandler\">waitUntil</span>(\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    caches.<span class=\"npf_color_chandler\">open</span>(<span class=\"npf_color_monica\">'tumblr-service-worker-cache’</span>)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n      .<span class=\"npf_color_chandler\">then</span>(cache\n  <span class=\"npf_color_rachel\">=&gt;</span> {\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        <span class=\"npf_color_joey\">const</span> currentAssetList\n  <span class=\"npf_color_joey\">=</span> <span class=\"npf_color_joey\">self</span>.ASSETS;\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        <span class=\"npf_color_joey\">const</span> oldAssets\n  <span class=\"npf_color_joey\">=</span>\n  <span class=\"npf_color_ross\">/* Instead of writing our own array diffing, we use lodash’s */</span>;\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        <span class=\"npf_color_joey\">const</span> newAssets\n  <span class=\"npf_color_joey\">=</span>\n  <span class=\"npf_color_ross\">/* differenceBy() to figure out which assets are old and new */</span>;\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        <span class=\"npf_color_joey\">return</span>\n  <span class=\"npf_color_chandler\"> Promise</span>.<span class=\"npf_color_chandler\">all</span>([\n  …oldAssets.map(oldAsset <span class=\"npf_color_rachel\">=&gt;</span> cache.<span class=\"npf_color_chandler\">delete</span>(oldAsset)), cache.<span class=\"npf_color_chandler\">addAll</span>(newAssets)]);\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>  });</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>);</p>\n\n<h2>We launched 🚀</h2>\n\n<p>\n  Earlier this month, we launched the service worker to all users of our mobile web dashboard. Our\n  performance instrumentation initially found a small performance regression, but we fixed it. Now\n  our mobile web dashboard load time is about the same as before, but asynchronous bundles on the\n  page load much faster.\n</p>\n\n<p>\n  We fixed the performance regression by improving performance of the service worker cache.\n  Initially, we naively opened the service worker cache for every request. But now we only open the\n  cache once, when the service worker starts running. Once the cache is opened, we attach listeners\n  for fetch requests, and those closures capture the open cache in their scope.\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_ross\">// before</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">self</span>.<span class=\"npf_color_rachel\">addEventListener</span>(<span class=\"npf_color_monica\">'fetch’</span>, handleFetch);\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">const</span> handleFetch <span class=\"npf_color_joey\">=</span> event\n  <span class=\"npf_color_rachel\">=&gt;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    event.<span class=\"npf_color_chandler\">respondWith</span>(\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n      caches.<span class=\"npf_color_chandler\">open</span>(<span class=\"npf_color_monica\">'tumblr-service-worker-cache’</span>)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        .<span class=\"npf_color_chandler\">then</span>(cache\n  <span class=\"npf_color_rachel\">=&gt;</span> cache.<span class=\"npf_color_chandler\">match</span>(request)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        .<span class=\"npf_color_chandler\">then</span>(cacheMatch\n  <span class=\"npf_color_rachel\">=&gt;</span> cacheMatch\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n          ?\n  <span class=\"npf_color_chandler\">Promise</span>.<span class=\"npf_color_chandler\">resolve</span>(cacheMatch)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n          <b>:</b> fetch(event.request)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        )\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>    )</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>  );</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_ross\">// now</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  caches.<span class=\"npf_color_chandler\">open</span>(<span class=\"npf_color_monica\">'tumblr-service-worker-cache’</span>)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    .<span class=\"npf_color_chandler\">then</span>(cache\n  <span class=\"npf_color_rachel\">=&gt;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n      <span class=\"npf_color_joey\">self</span>.<span class=\"npf_color_rachel\">addEventListener</span>(<span class=\"npf_color_monica\">'fetch’</span>, handleFetch(cache));\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">const</span> handleFetch\n  <span class=\"npf_color_joey\">=</span> openCache <span class=\"npf_color_rachel\">=&gt;</span> event\n  <span class=\"npf_color_rachel\">=&gt;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    event.<span class=\"npf_color_chandler\">respondWith</span>(\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n      openCache.match(request)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        .<span class=\"npf_color_chandler\">then</span>(cacheMatch\n  <span class=\"npf_color_rachel\">=&gt;</span> cacheMatch\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n          ?\n  <span class=\"npf_color_chandler\">Promise</span>.<span class=\"npf_color_chandler\">resolve</span>(cacheMatch)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n          : fetch(event.request)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        )\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>  );</p>\n\n<h2>Future plans</h2>\n\n<p>\n  We have lots of future plans to make the service worker even better than it is now. In addition to\n  pre-emptive caching, we would also like to do reactive caching, like the browser cache does. Every\n  time an asset is requested that we do not already have in our cache, we could cache it. That will\n  help keep the service worker cache fresh between installations.\n</p>\n\n<p>\n  We would also like to try building an API cache in our service worker, so that users can view some\n  stale content while they’re waiting for new content to load. We could also leverage this cache if\n  we built a service-worker-based offline mode. If you have any interest in service workers or ideas\n  about how Tumblr could use them in the future,\n  <a href=\"https://tumblr.com/jobs\">we would love to have you on our team</a>.\n</p>\n\n<p>\n  - Paul / <a class=\"tumblelog\" href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\">@blistering-pree</a>\n</p>\n</blockquote>",
        "reblog": {
          "comment": "",
          "tree_html": "<p><a href=\"https://javascript.tumblr.com/post/182476050141/how-we-wrote-our-own-service-worker-as-we\" class=\"tumblr_blog\">javascript</a>:</p><blockquote>\n<h1>How we wrote our own Service Worker</h1>\n\n<p>\n  As we continue the process of\n  <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\">reinvigorating Tumblr’s frontend web development</a>, we’re always on the lookout for modern web technologies, especially ones that make our mobile\n  site feel faster and more native. You could have guessed that we are making the mobile dashboard\n  into a progressive app when we\n  <a href=\"https://javascript.tumblr.com/post/177492037092/making-a-progressive-web-app-with-webpack-just-got\">open-sourced our webpack plugin to make web app manifests</a>\n  back in August. And you would’ve been right. But to make a high quality progressive web app, you\n  need more than just a web app manifest—you also need a service worker.\n</p>\n\n<h2>What is a service worker?</h2>\n\n<p>\n  A service worker is a helper script that a page registers with the browser. After it is registered\n  (some people like to also call it “installed”), the browser periodically checks the script for\n  changes. If any part of the script contents changes, the browser reinstalls the updated script.\n</p>\n\n<p>\n  Service workers are most commonly used to intercept browser fetches and do various things with\n  them.\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fserviceworke.rs&amp;t=OWJmNDBjNWFiYmU2OTFhMWExNmIyODQ2ZjgzOTAyNjZiYTFiZjZmOSw0NDE3MjIxYzljMzUyZDZiOGI5NzA1ZjMyNzIyOWZhMDVlN2I4YTg2\">https://serviceworke.rs</a>\n  has a lot of great ideas about what you can do with service workers, with code examples. We\n  decided to use our service worker to cache some JS, CSS, and font assets when it is installed, and\n  to respond with those assets when the browser fetches any of them.\n</p>\n\n<h2>Using a service worker to precache assets</h2>\n\n<p>\n  You might be wondering “why would you want to pre-cache assets when the service worker is\n  installed? Isn’t that the same thing that the browser cache does?” While the browser cache does\n  cache assets after they’re requested, our service worker can cache assets <i>before</i> they’re\n  requested. This greatly speeds up parts of the page that we load in asynchronously, like the notes\n  popover, or blogs that you tap into from the mobile dashboard.\n</p>\n\n<p>\n  While there are open-source projects that generate service workers to pre-cache your assets (like,\n  for example,\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2FGoogleChromeLabs%2Fsw-precache&amp;t=YWJkMmU1ZmVlOWMxMTU5MTdiNTVhMWFiYTA0MjE0OGNmMDQ3OTdhOSw1MGFlNWU2ZjM4ZDZhMmI3NzRlYjk0Mzg5MjUyZGM5YWQ2NTc2ZjYz\">sw-precache</a>), we chose to build our own service worker. When I started this project, I didn’t have any idea\n  what service workers were, and I wanted to learn all about them. And what better way to learn\n  about service workers than building one?\n</p>\n\n<h2>How our service worker is built</h2>\n\n<p>\n  Because the service worker needs to know about all of the JS, CSS, and font assets in order to\n  pre-cache them, we build a piece of the service worker during our build phase. This part of the\n  service worker changes whenever our assets are updated. During the build step, we take a list of\n  all of the assets that are output, filter them down into just the ones we want to pre-cache, and\n  write them out to an array in a JS file that we call sw.js.\n</p>\n\n<p>\n  That service worker file importScripts()’s a separate file that contains all of our service worker\n  functionality. All of the service worker functionality is built separately and\n  <a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\">written in TypeScript</a>, but the file that contains all of our assets is plain JavaScript.\n</p>\n\n<p>\n  We decided to serve our service worker directly from our node.js app. Our other assets are served\n  using\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.cloudflare.com%2Flearning%2Fcdn%2Fwhat-is-a-cdn%2F&amp;t=ZWJhODUxMjBiZDU1MzUzMTg3MTJjMzdlNDhiYWNhNThmYWRkMTQ5OCw4YWUyNTc3M2RmZWNlZDdmYjAzZDE4YWE1OGI4YTRmYzE1ZGJmMmUx\">CDNs</a>. Because our CDN servers are often geographically closer to our users, our assets load faster\n  from there than they do from our app. Using CDNs also keeps simple, asset-transfer traffic away\n  from our app, which gives us space us to do more complicated things (like rendering your dashboard\n  with React).\n</p>\n\n<p>\n  To keep asset traffic that reaches our app to a minimum, we tell our CDNs not to check back for\n  updates to our assets for a long time. This is sometimes referred to as caching with a long TTL\n  (time to live). As we know,\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.martinfowler.com%2Fbliki%2FTwoHardThings.html&amp;t=NTgwOTAxN2QyMzFiZWE1MDhkOWI3ZDFkZDE5NjgzMDUxYTJjMDFiMCxiYWNkMmU0YjJlMDVjM2YyZDQ3MTJmNmM1NGYyZmI5YTg4NGYzOGMy\">cache-invalidation</a>\n  is a tough computer science problem, so we generate unique filenames based on the asset contents\n  each time we build our assets. That way, when we request the new asset, we know that we’re going\n  to get it because we use the new file name.\n</p>\n\n<p>\n  Because the browser wants to check back in with the service worker script to see if there are any\n  changes, caching it in our CDNs is not a good fit. We would have to figure out how to do cache\n  invalidation for that file, but none of the other assets. By serving that file directly from our\n  node.js application, we get some additional asset-transfer traffic to our application but we think\n  it’s worth it because it avoids all of the issues with caching.\n</p>\n\n<h2>How does it pre-cache assets?</h2>\n\n<p>\n  When the service worker is installed, it compares the asset list in sw.js to the list of assets\n  that it has in its cache. If an asset is in the cache, but not listed in sw.js, the asset gets\n  deleted from the cache. If an asset is in sw.js, but not in the service worker cache, we download\n  and cache it. If an asset is in sw.js and in the cache, it hasn’t changed, so we don’t need to do\n  anything.\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_ross\">// in sw.js</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">self</span>.ASSETS <span class=\"npf_color_joey\">=</span> [\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    <span class=\"npf_color_monica\">‘main.js’</span>,\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    <span class=\"npf_color_monica\">‘notes-popover.js’</span>,\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    <span class=\"npf_color_monica\">‘favorit.woff’</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>];</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_ross\">// in service-worker.ts</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">self</span>.<span class=\"npf_color_rachel\">addEventListener</span>(<span class=\"npf_color_monica\">'install’</span>, install);\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">const</span> install <span class=\"npf_color_joey\">=</span> event\n  <span class=\"npf_color_rachel\">=&gt;</span> event.<span class=\"npf_color_chandler\">waitUntil</span>(\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    caches.<span class=\"npf_color_chandler\">open</span>(<span class=\"npf_color_monica\">'tumblr-service-worker-cache’</span>)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n      .<span class=\"npf_color_chandler\">then</span>(cache\n  <span class=\"npf_color_rachel\">=&gt;</span> {\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        <span class=\"npf_color_joey\">const</span> currentAssetList\n  <span class=\"npf_color_joey\">=</span> <span class=\"npf_color_joey\">self</span>.ASSETS;\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        <span class=\"npf_color_joey\">const</span> oldAssets\n  <span class=\"npf_color_joey\">=</span>\n  <span class=\"npf_color_ross\">/* Instead of writing our own array diffing, we use lodash’s */</span>;\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        <span class=\"npf_color_joey\">const</span> newAssets\n  <span class=\"npf_color_joey\">=</span>\n  <span class=\"npf_color_ross\">/* differenceBy() to figure out which assets are old and new */</span>;\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        <span class=\"npf_color_joey\">return</span>\n  <span class=\"npf_color_chandler\"> Promise</span>.<span class=\"npf_color_chandler\">all</span>([\n  …oldAssets.map(oldAsset <span class=\"npf_color_rachel\">=&gt;</span> cache.<span class=\"npf_color_chandler\">delete</span>(oldAsset)), cache.<span class=\"npf_color_chandler\">addAll</span>(newAssets)]);\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>  });</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>);</p>\n\n<h2>We launched 🚀</h2>\n\n<p>\n  Earlier this month, we launched the service worker to all users of our mobile web dashboard. Our\n  performance instrumentation initially found a small performance regression, but we fixed it. Now\n  our mobile web dashboard load time is about the same as before, but asynchronous bundles on the\n  page load much faster.\n</p>\n\n<p>\n  We fixed the performance regression by improving performance of the service worker cache.\n  Initially, we naively opened the service worker cache for every request. But now we only open the\n  cache once, when the service worker starts running. Once the cache is opened, we attach listeners\n  for fetch requests, and those closures capture the open cache in their scope.\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_ross\">// before</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">self</span>.<span class=\"npf_color_rachel\">addEventListener</span>(<span class=\"npf_color_monica\">'fetch’</span>, handleFetch);\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">const</span> handleFetch <span class=\"npf_color_joey\">=</span> event\n  <span class=\"npf_color_rachel\">=&gt;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    event.<span class=\"npf_color_chandler\">respondWith</span>(\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n      caches.<span class=\"npf_color_chandler\">open</span>(<span class=\"npf_color_monica\">'tumblr-service-worker-cache’</span>)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        .<span class=\"npf_color_chandler\">then</span>(cache\n  <span class=\"npf_color_rachel\">=&gt;</span> cache.<span class=\"npf_color_chandler\">match</span>(request)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        .<span class=\"npf_color_chandler\">then</span>(cacheMatch\n  <span class=\"npf_color_rachel\">=&gt;</span> cacheMatch\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n          ?\n  <span class=\"npf_color_chandler\">Promise</span>.<span class=\"npf_color_chandler\">resolve</span>(cacheMatch)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n          <b>:</b> fetch(event.request)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        )\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>    )</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>  );</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_ross\">// now</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  caches.<span class=\"npf_color_chandler\">open</span>(<span class=\"npf_color_monica\">'tumblr-service-worker-cache’</span>)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    .<span class=\"npf_color_chandler\">then</span>(cache\n  <span class=\"npf_color_rachel\">=&gt;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n      <span class=\"npf_color_joey\">self</span>.<span class=\"npf_color_rachel\">addEventListener</span>(<span class=\"npf_color_monica\">'fetch’</span>, handleFetch(cache));\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">const</span> handleFetch\n  <span class=\"npf_color_joey\">=</span> openCache <span class=\"npf_color_rachel\">=&gt;</span> event\n  <span class=\"npf_color_rachel\">=&gt;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    event.<span class=\"npf_color_chandler\">respondWith</span>(\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n      openCache.match(request)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        .<span class=\"npf_color_chandler\">then</span>(cacheMatch\n  <span class=\"npf_color_rachel\">=&gt;</span> cacheMatch\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n          ?\n  <span class=\"npf_color_chandler\">Promise</span>.<span class=\"npf_color_chandler\">resolve</span>(cacheMatch)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n          : fetch(event.request)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        )\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>  );</p>\n\n<h2>Future plans</h2>\n\n<p>\n  We have lots of future plans to make the service worker even better than it is now. In addition to\n  pre-emptive caching, we would also like to do reactive caching, like the browser cache does. Every\n  time an asset is requested that we do not already have in our cache, we could cache it. That will\n  help keep the service worker cache fresh between installations.\n</p>\n\n<p>\n  We would also like to try building an API cache in our service worker, so that users can view some\n  stale content while they’re waiting for new content to load. We could also leverage this cache if\n  we built a service-worker-based offline mode. If you have any interest in service workers or ideas\n  about how Tumblr could use them in the future,\n  <a href=\"https://tumblr.com/jobs\">we would love to have you on our team</a>.\n</p>\n\n<p>\n  - Paul / <a class=\"tumblelog\" href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\">@blistering-pree</a>\n</p>\n</blockquote>"
        },
        "trail": [
          {
            "blog": {
              "name": "javascript",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#fcf11d",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/84c85268abe461ffc10dbb903b7fb00f/9640f1cf5d2277fc-18/s1920x1080/df1e800724c9d16acec6021cb42973a24a67ad76.png",
                "header_image_focused": "https://66.media.tumblr.com/84c85268abe461ffc10dbb903b7fb00f/9640f1cf5d2277fc-18/s2048x3072/a16e81f6427d965a37f713d8bc24a7b7d848a633.png",
                "header_image_scaled": "https://66.media.tumblr.com/84c85268abe461ffc10dbb903b7fb00f/9640f1cf5d2277fc-18/s2048x3072/a16e81f6427d965a37f713d8bc24a7b7d848a633.png",
                "header_stretch": true,
                "link_color": "#000000",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#000000",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "182476050141" },
            "content_raw": "<p><h1>How we wrote our own Service Worker</h1>\n\n<p>\n  As we continue the process of\n  <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\">reinvigorating Tumblr’s frontend web development</a>, we’re always on the lookout for modern web technologies, especially ones that make our mobile\n  site feel faster and more native. You could have guessed that we are making the mobile dashboard\n  into a progressive app when we\n  <a href=\"https://javascript.tumblr.com/post/177492037092/making-a-progressive-web-app-with-webpack-just-got\">open-sourced our webpack plugin to make web app manifests</a>\n  back in August. And you would’ve been right. But to make a high quality progressive web app, you\n  need more than just a web app manifest—you also need a service worker.\n</p>\n\n<h2>What is a service worker?</h2>\n\n<p>\n  A service worker is a helper script that a page registers with the browser. After it is registered\n  (some people like to also call it “installed”), the browser periodically checks the script for\n  changes. If any part of the script contents changes, the browser reinstalls the updated script.\n</p>\n\n<p>\n  Service workers are most commonly used to intercept browser fetches and do various things with\n  them.\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fserviceworke.rs&amp;t=OWJmNDBjNWFiYmU2OTFhMWExNmIyODQ2ZjgzOTAyNjZiYTFiZjZmOSw0NDE3MjIxYzljMzUyZDZiOGI5NzA1ZjMyNzIyOWZhMDVlN2I4YTg2\">https://serviceworke.rs</a>\n  has a lot of great ideas about what you can do with service workers, with code examples. We\n  decided to use our service worker to cache some JS, CSS, and font assets when it is installed, and\n  to respond with those assets when the browser fetches any of them.\n</p>\n\n<h2>Using a service worker to precache assets</h2>\n\n<p>\n  You might be wondering “why would you want to pre-cache assets when the service worker is\n  installed? Isn’t that the same thing that the browser cache does?” While the browser cache does\n  cache assets after they’re requested, our service worker can cache assets <i>before</i> they’re\n  requested. This greatly speeds up parts of the page that we load in asynchronously, like the notes\n  popover, or blogs that you tap into from the mobile dashboard.\n</p>\n\n<p>\n  While there are open-source projects that generate service workers to pre-cache your assets (like,\n  for example,\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2FGoogleChromeLabs%2Fsw-precache&amp;t=YWJkMmU1ZmVlOWMxMTU5MTdiNTVhMWFiYTA0MjE0OGNmMDQ3OTdhOSw1MGFlNWU2ZjM4ZDZhMmI3NzRlYjk0Mzg5MjUyZGM5YWQ2NTc2ZjYz\">sw-precache</a>), we chose to build our own service worker. When I started this project, I didn’t have any idea\n  what service workers were, and I wanted to learn all about them. And what better way to learn\n  about service workers than building one?\n</p>\n\n<h2>How our service worker is built</h2>\n\n<p>\n  Because the service worker needs to know about all of the JS, CSS, and font assets in order to\n  pre-cache them, we build a piece of the service worker during our build phase. This part of the\n  service worker changes whenever our assets are updated. During the build step, we take a list of\n  all of the assets that are output, filter them down into just the ones we want to pre-cache, and\n  write them out to an array in a JS file that we call sw.js.\n</p>\n\n<p>\n  That service worker file importScripts()’s a separate file that contains all of our service worker\n  functionality. All of the service worker functionality is built separately and\n  <a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\">written in TypeScript</a>, but the file that contains all of our assets is plain JavaScript.\n</p>\n\n<p>\n  We decided to serve our service worker directly from our node.js app. Our other assets are served\n  using\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.cloudflare.com%2Flearning%2Fcdn%2Fwhat-is-a-cdn%2F&amp;t=ZWJhODUxMjBiZDU1MzUzMTg3MTJjMzdlNDhiYWNhNThmYWRkMTQ5OCw4YWUyNTc3M2RmZWNlZDdmYjAzZDE4YWE1OGI4YTRmYzE1ZGJmMmUx\">CDNs</a>. Because our CDN servers are often geographically closer to our users, our assets load faster\n  from there than they do from our app. Using CDNs also keeps simple, asset-transfer traffic away\n  from our app, which gives us space us to do more complicated things (like rendering your dashboard\n  with React).\n</p>\n\n<p>\n  To keep asset traffic that reaches our app to a minimum, we tell our CDNs not to check back for\n  updates to our assets for a long time. This is sometimes referred to as caching with a long TTL\n  (time to live). As we know,\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.martinfowler.com%2Fbliki%2FTwoHardThings.html&amp;t=NTgwOTAxN2QyMzFiZWE1MDhkOWI3ZDFkZDE5NjgzMDUxYTJjMDFiMCxiYWNkMmU0YjJlMDVjM2YyZDQ3MTJmNmM1NGYyZmI5YTg4NGYzOGMy\">cache-invalidation</a>\n  is a tough computer science problem, so we generate unique filenames based on the asset contents\n  each time we build our assets. That way, when we request the new asset, we know that we’re going\n  to get it because we use the new file name.\n</p>\n\n<p>\n  Because the browser wants to check back in with the service worker script to see if there are any\n  changes, caching it in our CDNs is not a good fit. We would have to figure out how to do cache\n  invalidation for that file, but none of the other assets. By serving that file directly from our\n  node.js application, we get some additional asset-transfer traffic to our application but we think\n  it’s worth it because it avoids all of the issues with caching.\n</p>\n\n<h2>How does it pre-cache assets?</h2>\n\n<p>\n  When the service worker is installed, it compares the asset list in sw.js to the list of assets\n  that it has in its cache. If an asset is in the cache, but not listed in sw.js, the asset gets\n  deleted from the cache. If an asset is in sw.js, but not in the service worker cache, we download\n  and cache it. If an asset is in sw.js and in the cache, it hasn’t changed, so we don’t need to do\n  anything.\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_ross\">// in sw.js</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">self</span>.ASSETS <span class=\"npf_color_joey\">=</span> [\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    <span class=\"npf_color_monica\">‘main.js’</span>,\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    <span class=\"npf_color_monica\">‘notes-popover.js’</span>,\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    <span class=\"npf_color_monica\">‘favorit.woff’</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>];</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_ross\">// in service-worker.ts</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">self</span>.<span class=\"npf_color_rachel\">addEventListener</span>(<span class=\"npf_color_monica\">'install’</span>, install);\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">const</span> install <span class=\"npf_color_joey\">=</span> event\n  <span class=\"npf_color_rachel\">=&gt;</span> event.<span class=\"npf_color_chandler\">waitUntil</span>(\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    caches.<span class=\"npf_color_chandler\">open</span>(<span class=\"npf_color_monica\">'tumblr-service-worker-cache’</span>)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n      .<span class=\"npf_color_chandler\">then</span>(cache\n  <span class=\"npf_color_rachel\">=&gt;</span> {\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        <span class=\"npf_color_joey\">const</span> currentAssetList\n  <span class=\"npf_color_joey\">=</span> <span class=\"npf_color_joey\">self</span>.ASSETS;\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        <span class=\"npf_color_joey\">const</span> oldAssets\n  <span class=\"npf_color_joey\">=</span>\n  <span class=\"npf_color_ross\">/* Instead of writing our own array diffing, we use lodash’s */</span>;\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        <span class=\"npf_color_joey\">const</span> newAssets\n  <span class=\"npf_color_joey\">=</span>\n  <span class=\"npf_color_ross\">/* differenceBy() to figure out which assets are old and new */</span>;\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        <span class=\"npf_color_joey\">return</span>\n  <span class=\"npf_color_chandler\"> Promise</span>.<span class=\"npf_color_chandler\">all</span>([\n  …oldAssets.map(oldAsset <span class=\"npf_color_rachel\">=&gt;</span> cache.<span class=\"npf_color_chandler\">delete</span>(oldAsset)), cache.<span class=\"npf_color_chandler\">addAll</span>(newAssets)]);\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>  });</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>);</p>\n\n<h2>We launched 🚀</h2>\n\n<p>\n  Earlier this month, we launched the service worker to all users of our mobile web dashboard. Our\n  performance instrumentation initially found a small performance regression, but we fixed it. Now\n  our mobile web dashboard load time is about the same as before, but asynchronous bundles on the\n  page load much faster.\n</p>\n\n<p>\n  We fixed the performance regression by improving performance of the service worker cache.\n  Initially, we naively opened the service worker cache for every request. But now we only open the\n  cache once, when the service worker starts running. Once the cache is opened, we attach listeners\n  for fetch requests, and those closures capture the open cache in their scope.\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_ross\">// before</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">self</span>.<span class=\"npf_color_rachel\">addEventListener</span>(<span class=\"npf_color_monica\">'fetch’</span>, handleFetch);\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">const</span> handleFetch <span class=\"npf_color_joey\">=</span> event\n  <span class=\"npf_color_rachel\">=&gt;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    event.<span class=\"npf_color_chandler\">respondWith</span>(\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n      caches.<span class=\"npf_color_chandler\">open</span>(<span class=\"npf_color_monica\">'tumblr-service-worker-cache’</span>)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        .<span class=\"npf_color_chandler\">then</span>(cache\n  <span class=\"npf_color_rachel\">=&gt;</span> cache.<span class=\"npf_color_chandler\">match</span>(request)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        .<span class=\"npf_color_chandler\">then</span>(cacheMatch\n  <span class=\"npf_color_rachel\">=&gt;</span> cacheMatch\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n          ?\n  <span class=\"npf_color_chandler\">Promise</span>.<span class=\"npf_color_chandler\">resolve</span>(cacheMatch)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n          <b>:</b> fetch(event.request)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        )\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>    )</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>  );</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_ross\">// now</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  caches.<span class=\"npf_color_chandler\">open</span>(<span class=\"npf_color_monica\">'tumblr-service-worker-cache’</span>)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    .<span class=\"npf_color_chandler\">then</span>(cache\n  <span class=\"npf_color_rachel\">=&gt;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n      <span class=\"npf_color_joey\">self</span>.<span class=\"npf_color_rachel\">addEventListener</span>(<span class=\"npf_color_monica\">'fetch’</span>, handleFetch(cache));\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n  <span class=\"npf_color_joey\">const</span> handleFetch\n  <span class=\"npf_color_joey\">=</span> openCache <span class=\"npf_color_rachel\">=&gt;</span> event\n  <span class=\"npf_color_rachel\">=&gt;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n    event.<span class=\"npf_color_chandler\">respondWith</span>(\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n      openCache.match(request)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        .<span class=\"npf_color_chandler\">then</span>(cacheMatch\n  <span class=\"npf_color_rachel\">=&gt;</span> cacheMatch\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n          ?\n  <span class=\"npf_color_chandler\">Promise</span>.<span class=\"npf_color_chandler\">resolve</span>(cacheMatch)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n          : fetch(event.request)\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n        )\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>  );</p>\n\n<h2>Future plans</h2>\n\n<p>\n  We have lots of future plans to make the service worker even better than it is now. In addition to\n  pre-emptive caching, we would also like to do reactive caching, like the browser cache does. Every\n  time an asset is requested that we do not already have in our cache, we could cache it. That will\n  help keep the service worker cache fresh between installations.\n</p>\n\n<p>\n  We would also like to try building an API cache in our service worker, so that users can view some\n  stale content while they’re waiting for new content to load. We could also leverage this cache if\n  we built a service-worker-based offline mode. If you have any interest in service workers or ideas\n  about how Tumblr could use them in the future,\n  <a href=\"https://tumblr.com/jobs\">we would love to have you on our team</a>.\n</p>\n\n<p>\n  - Paul / <a class=\"tumblelog\" href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\">@blistering-pree</a>\n</p></p>",
            "content": "<p><h1>How we wrote our own Service Worker</h1>\n\n<p>\n  As we continue the process of\n  <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\">reinvigorating Tumblr&rsquo;s frontend web development</a>, we&rsquo;re always on the lookout for modern web technologies, especially ones that make our mobile\n  site feel faster and more native. You could have guessed that we are making the mobile dashboard\n  into a progressive app when we\n  <a href=\"https://javascript.tumblr.com/post/177492037092/making-a-progressive-web-app-with-webpack-just-got\">open-sourced our webpack plugin to make web app manifests</a>\n  back in August. And you would&rsquo;ve been right. But to make a high quality progressive web app, you\n  need more than just a web app manifest&mdash;you also need a service worker.\n</p>\n\n<h2>What is a service worker?</h2>\n\n<p>\n  A service worker is a helper script that a page registers with the browser. After it is registered\n  (some people like to also call it &ldquo;installed&rdquo;), the browser periodically checks the script for\n  changes. If any part of the script contents changes, the browser reinstalls the updated script.\n</p>\n\n<p>\n  Service workers are most commonly used to intercept browser fetches and do various things with\n  them.\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fserviceworke.rs&amp;t=OWJmNDBjNWFiYmU2OTFhMWExNmIyODQ2ZjgzOTAyNjZiYTFiZjZmOSw0NDE3MjIxYzljMzUyZDZiOGI5NzA1ZjMyNzIyOWZhMDVlN2I4YTg2\">https://serviceworke.rs</a>\n  has a lot of great ideas about what you can do with service workers, with code examples. We\n  decided to use our service worker to cache some JS, CSS, and font assets when it is installed, and\n  to respond with those assets when the browser fetches any of them.\n</p>\n\n<h2>Using a service worker to precache assets</h2>\n\n<p>\n  You might be wondering &ldquo;why would you want to pre-cache assets when the service worker is\n  installed? Isn&rsquo;t that the same thing that the browser cache does?&rdquo; While the browser cache does\n  cache assets after they&rsquo;re requested, our service worker can cache assets <i>before</i> they&rsquo;re\n  requested. This greatly speeds up parts of the page that we load in asynchronously, like the notes\n  popover, or blogs that you tap into from the mobile dashboard.\n</p>\n\n<p>\n  While there are open-source projects that generate service workers to pre-cache your assets (like,\n  for example,\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2FGoogleChromeLabs%2Fsw-precache&amp;t=YWJkMmU1ZmVlOWMxMTU5MTdiNTVhMWFiYTA0MjE0OGNmMDQ3OTdhOSw1MGFlNWU2ZjM4ZDZhMmI3NzRlYjk0Mzg5MjUyZGM5YWQ2NTc2ZjYz\">sw-precache</a>), we chose to build our own service worker. When I started this project, I didn&rsquo;t have any idea\n  what service workers were, and I wanted to learn all about them. And what better way to learn\n  about service workers than building one?\n</p>\n\n<h2>How our service worker is built</h2>\n\n<p>\n  Because the service worker needs to know about all of the JS, CSS, and font assets in order to\n  pre-cache them, we build a piece of the service worker during our build phase. This part of the\n  service worker changes whenever our assets are updated. During the build step, we take a list of\n  all of the assets that are output, filter them down into just the ones we want to pre-cache, and\n  write them out to an array in a JS file that we call sw.js.\n</p>\n\n<p>\n  That service worker file importScripts()&rsquo;s a separate file that contains all of our service worker\n  functionality. All of the service worker functionality is built separately and\n  <a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\">written in TypeScript</a>, but the file that contains all of our assets is plain JavaScript.\n</p>\n\n<p>\n  We decided to serve our service worker directly from our node.js app. Our other assets are served\n  using\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.cloudflare.com%2Flearning%2Fcdn%2Fwhat-is-a-cdn%2F&amp;t=ZWJhODUxMjBiZDU1MzUzMTg3MTJjMzdlNDhiYWNhNThmYWRkMTQ5OCw4YWUyNTc3M2RmZWNlZDdmYjAzZDE4YWE1OGI4YTRmYzE1ZGJmMmUx\">CDNs</a>. Because our CDN servers are often geographically closer to our users, our assets load faster\n  from there than they do from our app. Using CDNs also keeps simple, asset-transfer traffic away\n  from our app, which gives us space us to do more complicated things (like rendering your dashboard\n  with React).\n</p>\n\n<p>\n  To keep asset traffic that reaches our app to a minimum, we tell our CDNs not to check back for\n  updates to our assets for a long time. This is sometimes referred to as caching with a long TTL\n  (time to live). As we know,\n  <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.martinfowler.com%2Fbliki%2FTwoHardThings.html&amp;t=NTgwOTAxN2QyMzFiZWE1MDhkOWI3ZDFkZDE5NjgzMDUxYTJjMDFiMCxiYWNkMmU0YjJlMDVjM2YyZDQ3MTJmNmM1NGYyZmI5YTg4NGYzOGMy\">cache-invalidation</a>\n  is a tough computer science problem, so we generate unique filenames based on the asset contents\n  each time we build our assets. That way, when we request the new asset, we know that we&rsquo;re going\n  to get it because we use the new file name.\n</p>\n\n<p>\n  Because the browser wants to check back in with the service worker script to see if there are any\n  changes, caching it in our CDNs is not a good fit. We would have to figure out how to do cache\n  invalidation for that file, but none of the other assets. By serving that file directly from our\n  node.js application, we get some additional asset-transfer traffic to our application but we think\n  it&rsquo;s worth it because it avoids all of the issues with caching.\n</p>\n\n<h2>How does it pre-cache assets?</h2>\n\n<p>\n  When the service worker is installed, it compares the asset list in sw.js to the list of assets\n  that it has in its cache. If an asset is in the cache, but not listed in sw.js, the asset gets\n  deleted from the cache. If an asset is in sw.js, but not in the service worker cache, we download\n  and cache it. If an asset is in sw.js and in the cache, it hasn&rsquo;t changed, so we don&rsquo;t need to do\n  anything.\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  <span class=\"npf_color_ross\">// in sw.js</span>\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  <span class=\"npf_color_joey\">self</span>.ASSETS <span class=\"npf_color_joey\">=</span> [\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;<span class=\"npf_color_monica\">&lsquo;main.js&rsquo;</span>,\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;<span class=\"npf_color_monica\">&lsquo;notes-popover.js&rsquo;</span>,\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;<span class=\"npf_color_monica\">&lsquo;favorit.woff&rsquo;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">];</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  <span class=\"npf_color_ross\">// in service-worker.ts</span>\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  <span class=\"npf_color_joey\">self</span>.<span class=\"npf_color_rachel\">addEventListener</span>(<span class=\"npf_color_monica\">'install&rsquo;</span>, install);\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  <span class=\"npf_color_joey\">const</span> install <span class=\"npf_color_joey\">=</span> event\n  <span class=\"npf_color_rachel\">=&gt;</span> event.<span class=\"npf_color_chandler\">waitUntil</span>(\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;caches.<span class=\"npf_color_chandler\">open</span>(<span class=\"npf_color_monica\">'tumblr-service-worker-cache&rsquo;</span>)\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;.<span class=\"npf_color_chandler\">then</span>(cache\n  <span class=\"npf_color_rachel\">=&gt;</span> {\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_joey\">const</span> currentAssetList\n  <span class=\"npf_color_joey\">=</span> <span class=\"npf_color_joey\">self</span>.ASSETS;\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_joey\">const</span> oldAssets\n  <span class=\"npf_color_joey\">=</span>\n  <span class=\"npf_color_ross\">/* Instead of writing our own array diffing, we use lodash&rsquo;s */</span>;\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_joey\">const</span> newAssets\n  <span class=\"npf_color_joey\">=</span>\n  <span class=\"npf_color_ross\">/* differenceBy() to figure out which assets are old and new */</span>;\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_joey\">return</span>\n  <span class=\"npf_color_chandler\"> Promise</span>.<span class=\"npf_color_chandler\">all</span>([\n  &hellip;oldAssets.map(oldAsset <span class=\"npf_color_rachel\">=&gt;</span> cache.<span class=\"npf_color_chandler\">delete</span>(oldAsset)), cache.<span class=\"npf_color_chandler\">addAll</span>(newAssets)]);\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">&nbsp;&nbsp;});</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">);</p>\n\n<h2>We launched &#128640;</h2>\n\n<p>\n  Earlier this month, we launched the service worker to all users of our mobile web dashboard. Our\n  performance instrumentation initially found a small performance regression, but we fixed it. Now\n  our mobile web dashboard load time is about the same as before, but asynchronous bundles on the\n  page load much faster.\n</p>\n\n<p>\n  We fixed the performance regression by improving performance of the service worker cache.\n  Initially, we naively opened the service worker cache for every request. But now we only open the\n  cache once, when the service worker starts running. Once the cache is opened, we attach listeners\n  for fetch requests, and those closures capture the open cache in their scope.\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  <span class=\"npf_color_ross\">// before</span>\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  <span class=\"npf_color_joey\">self</span>.<span class=\"npf_color_rachel\">addEventListener</span>(<span class=\"npf_color_monica\">'fetch&rsquo;</span>, handleFetch);\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  <span class=\"npf_color_joey\">const</span> handleFetch <span class=\"npf_color_joey\">=</span> event\n  <span class=\"npf_color_rachel\">=&gt;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;event.<span class=\"npf_color_chandler\">respondWith</span>(\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;caches.<span class=\"npf_color_chandler\">open</span>(<span class=\"npf_color_monica\">'tumblr-service-worker-cache&rsquo;</span>)\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span class=\"npf_color_chandler\">then</span>(cache\n  <span class=\"npf_color_rachel\">=&gt;</span> cache.<span class=\"npf_color_chandler\">match</span>(request)\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span class=\"npf_color_chandler\">then</span>(cacheMatch\n  <span class=\"npf_color_rachel\">=&gt;</span> cacheMatch\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?\n  <span class=\"npf_color_chandler\">Promise</span>.<span class=\"npf_color_chandler\">resolve</span>(cacheMatch)\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>:</b> fetch(event.request)\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">&nbsp;&nbsp;&nbsp;&nbsp;)</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">&nbsp;&nbsp;);</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  <span class=\"npf_color_ross\">// now</span>\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  caches.<span class=\"npf_color_chandler\">open</span>(<span class=\"npf_color_monica\">'tumblr-service-worker-cache&rsquo;</span>)\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;.<span class=\"npf_color_chandler\">then</span>(cache\n  <span class=\"npf_color_rachel\">=&gt;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_joey\">self</span>.<span class=\"npf_color_rachel\">addEventListener</span>(<span class=\"npf_color_monica\">'fetch&rsquo;</span>, handleFetch(cache));\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  <span class=\"npf_color_joey\">const</span> handleFetch\n  <span class=\"npf_color_joey\">=</span> openCache <span class=\"npf_color_rachel\">=&gt;</span> event\n  <span class=\"npf_color_rachel\">=&gt;</span>\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;event.<span class=\"npf_color_chandler\">respondWith</span>(\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;openCache.match(request)\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span class=\"npf_color_chandler\">then</span>(cacheMatch\n  <span class=\"npf_color_rachel\">=&gt;</span> cacheMatch\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?\n  <span class=\"npf_color_chandler\">Promise</span>.<span class=\"npf_color_chandler\">resolve</span>(cacheMatch)\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: fetch(event.request)\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">&nbsp;&nbsp;);</p>\n\n<h2>Future plans</h2>\n\n<p>\n  We have lots of future plans to make the service worker even better than it is now. In addition to\n  pre-emptive caching, we would also like to do reactive caching, like the browser cache does. Every\n  time an asset is requested that we do not already have in our cache, we could cache it. That will\n  help keep the service worker cache fresh between installations.\n</p>\n\n<p>\n  We would also like to try building an API cache in our service worker, so that users can view some\n  stale content while they&rsquo;re waiting for new content to load. We could also leverage this cache if\n  we built a service-worker-based offline mode. If you have any interest in service workers or ideas\n  about how Tumblr could use them in the future,\n  <a href=\"https://tumblr.com/jobs\">we would love to have you on our team</a>.\n</p>\n\n<p>\n  - Paul / <a href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\">@blistering-pree</a>\n</p></p>",
            "is_root_item": true
          }
        ],
        "reblogged_from_id": "182476050141",
        "reblogged_from_url": "https://javascript.tumblr.com/post/182476050141/how-we-wrote-our-own-service-worker-as-we",
        "reblogged_from_name": "javascript",
        "reblogged_from_title": "JavaScript on Tumblr",
        "reblogged_from_uuid": "t:E3JWSmG5IINX0s4eBqC2TQ",
        "reblogged_from_can_message": false,
        "reblogged_root_id": "182476050141",
        "reblogged_root_url": "https://javascript.tumblr.com/post/182476050141/how-we-wrote-our-own-service-worker-as-we",
        "reblogged_root_name": "javascript",
        "reblogged_root_title": "JavaScript on Tumblr",
        "reblogged_root_uuid": "t:E3JWSmG5IINX0s4eBqC2TQ",
        "reblogged_root_can_message": false,
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1572086996,
            "blog_name": "rainbowlight100",
            "blog_uuid": "t:q7Ienh9NLpUb4SJx18bj5w",
            "blog_url": "https://rainbowlight100.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570659710,
            "blog_name": "alex0two",
            "blog_uuid": "t:7VQwPTcur8RLCwixu9q8dw",
            "blog_url": "https://alex0two.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1567444605,
            "blog_name": "leonardoos-stuff",
            "blog_uuid": "t:5vU_tHm-I0WjtnXcxLWJJA",
            "blog_url": "https://leonardoos-stuff.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1557192454,
            "blog_name": "wartoyo0707",
            "blog_uuid": "t:8JA-r6l7kWHvsRodW58rOA",
            "blog_url": "https://wartoyo0707.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1556325102,
            "blog_name": "gmannepalli",
            "blog_uuid": "t:XmSsDbbrR5SZm0BlXEITAQ",
            "blog_url": "https://gmannepalli.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1552558524,
            "blog_name": "stupendousbeardcomputer",
            "blog_uuid": "t:1sp5SXrAiundrjpA5ZEYbA",
            "blog_url": "https://stupendousbeardcomputer.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1551938465,
            "blog_name": "raiders034",
            "blog_uuid": "t:FywhPBWILbkHNQCFJNLpAA",
            "blog_url": "https://raiders034.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1551263725,
            "blog_name": "panoramasworld",
            "blog_uuid": "t:3xkywYIGhsfLuW9iRbjPog",
            "blog_url": "https://panoramasworld.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1551093677,
            "blog_name": "k-onfan-ua",
            "blog_uuid": "t:75ssBls2s6iFRW1G7OFmVA",
            "blog_url": "https://k-onfan-ua.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1550817657,
            "blog_name": "lifeloveangels",
            "blog_uuid": "t:AWOqXGjp8nYQgam97Tu4KA",
            "blog_url": "https://lifeloveangels.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1550624599,
            "blog_name": "albertoicg01",
            "blog_uuid": "t:iDWrh4SH4WpCIQj4xpKK1g",
            "blog_url": "https://albertoicg01.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "182925837087",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1550243843,
            "blog_name": "lanelemill",
            "blog_uuid": "t:qtGDtYMc21fkXw0otmCIQQ",
            "blog_url": "https://lanelemill.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1550187221,
            "blog_name": "izlyici",
            "blog_uuid": "t:L3NZFbATV8axswZZ8nPVtw",
            "blog_url": "https://izlyici.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1549619331,
            "blog_name": "vladyn",
            "blog_uuid": "t:kphUmq8pRmKazIenfUCF3w",
            "blog_url": "https://vladyn.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1549552778,
            "blog_name": "z911empire",
            "blog_uuid": "t:F7yyu01RRDE08Y0_0tqjww",
            "blog_url": "https://z911empire.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1549488611,
            "blog_name": "ericsalerno",
            "blog_uuid": "t:x65nIWi9U7LqVq9EI4vrAw",
            "blog_url": "https://ericsalerno.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "182614106623",
            "reblog_parent_blog_name": "javascript"
          },
          {
            "type": "like",
            "timestamp": 1549469399,
            "blog_name": "chbchb55",
            "blog_uuid": "t:Mzlpn42ejh-Hk8nyu2EWUw",
            "blog_url": "https://chbchb55.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1549405963,
            "blog_name": "fevangelou",
            "blog_uuid": "t:hXB_x4_7POwygfZDLHCeIg",
            "blog_url": "https://fevangelou.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1549384213,
            "blog_name": "anonymusbosch",
            "blog_uuid": "t:m09d5L_pAhk4nVShcWzCeg",
            "blog_url": "https://anonymusbosch.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1549373093,
            "blog_name": "kichisaburo3",
            "blog_uuid": "t:Gd6pDNLouF90t10BGgw28A",
            "blog_url": "https://kichisaburo3.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "dd 04 FEB 2019 https://engineering.tumblr.com/post/182554757749/javascript-how-we-wrote-our-own-service Reblogged As My Notice By kichisaburo3",
            "post_id": "182578505432",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1549345144,
            "blog_name": "fictionfreakazoid",
            "blog_uuid": "t:iMhdIlGkZIL3VlzKlq_5Yw",
            "blog_url": "https://fictionfreakazoid.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reply",
            "timestamp": 1549331456,
            "blog_name": "scatter-gather",
            "blog_uuid": "t:EdLg5qr3FJjGmw7lDAabGg",
            "blog_url": "https://scatter-gather.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "reply_text": "this is excellent, now the unbanned porn bot spam and literal Nazi content loads 34% faster in Firefox Mobile, which I use because the app has about 70% uptime and 30% \"something fizzled. try again?\" Soooo all in all very pleased, be sure to tell your managers.",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1549331136,
            "blog_name": "wizardsofweb",
            "blog_uuid": "t:yliRzPEUGhGKrJ4YrnyFdw",
            "blog_url": "https://wizardsofweb.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reply",
            "timestamp": 1549318628,
            "blog_name": "itsmejop",
            "blog_uuid": "t:C3Ajf_OwmbTC2FoaxHlSHw",
            "blog_url": "https://itsmejop.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "reply_text": "Thank you engineering team I know the parts of the site y'all are actually in charge of are doin their best",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "reply",
            "timestamp": 1549313605,
            "blog_name": "sile-really",
            "blog_uuid": "t:dUJRCOZVPmgnstR_uXJVsg",
            "blog_url": "https://sile-really.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "Will caching the nazis allow you guys to remove them or what",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1549309800,
            "blog_name": "youthsdreams",
            "blog_uuid": "t:yaVnmFKgSl9dctr8fcscjQ",
            "blog_url": "https://youthsdreams.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1549304731,
            "blog_name": "kittiesandapples",
            "blog_uuid": "t:SOm-zTmVdu70OH19pk4qGg",
            "blog_url": "https://kittiesandapples.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1549303582,
            "blog_name": "billydalto",
            "blog_uuid": "t:5N9N6St3iKW1rGbTAY9QyA",
            "blog_url": "https://diatomparty.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1549302226,
            "blog_name": "ahabwesworld",
            "blog_uuid": "t:E5ffgQI48PmOaDIYENIaxQ",
            "blog_url": "https://ahabwesworld.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1549302225,
            "blog_name": "ahabwesworld",
            "blog_uuid": "t:E5ffgQI48PmOaDIYENIaxQ",
            "blog_url": "https://ahabwesworld.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "182556739699",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "reply",
            "timestamp": 1549302063,
            "blog_name": "kellyclowers",
            "blog_uuid": "t:vScOwrWSXX7GZlsphMIU_Q",
            "blog_url": "https://kellyclowers.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "not being able to at mention someone on mobile sucks",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "reply",
            "timestamp": 1549302020,
            "blog_name": "kellyclowers",
            "blog_uuid": "t:vScOwrWSXX7GZlsphMIU_Q",
            "blog_url": "https://kellyclowers.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "ok, but can you make the new color scheme an option, and give us a proper mobile post editor?",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "reblog",
            "timestamp": 1549301794,
            "blog_name": "kellyclowers",
            "blog_uuid": "t:vScOwrWSXX7GZlsphMIU_Q",
            "blog_url": "https://kellyclowers.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "182556595277",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1549301781,
            "blog_name": "kellyclowers",
            "blog_uuid": "t:vScOwrWSXX7GZlsphMIU_Q",
            "blog_url": "https://kellyclowers.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1549300332,
            "blog_name": "cherrynlime23",
            "blog_uuid": "t:8VsJ_QUdmML0niIy8nwN6Q",
            "blog_url": "https://cherrynlime23.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1549299501,
            "blog_name": "breadstyx",
            "blog_uuid": "t:I4AIgflpBs0pHeYlowWAaA",
            "blog_url": "https://breadstyx.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1549298447,
            "blog_name": "darnellclayton",
            "blog_uuid": "t:STvDWeJHltpCJ7EaIlqZzw",
            "blog_url": "https://www.darnellclayton.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1549298149,
            "blog_name": "facebook-reality",
            "blog_uuid": "t:O6_nmOBmhzEfSd5K9QCOTg",
            "blog_url": "https://facebook-reality.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "added_text": "Delete the porn bots",
            "post_id": "182555426824",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1549297236,
            "blog_name": "nightpool",
            "blog_uuid": "t:CVEqXVtH4qit2A7hVNy5DA",
            "blog_url": "https://nightpool.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 182191949110,
        "post_url": "https://engineering.tumblr.com/post/182191949110/were-making-tumblr-more-accessible",
        "slug": "were-making-tumblr-more-accessible",
        "date": "2019-01-21 16:00:25 GMT",
        "timestamp": 1548086425,
        "state": "published",
        "format": "html",
        "reblog_key": "XHWGgJ4K",
        "tags": [ "javascript", "react", "accessibility" ],
        "short_url": "https://tmblr.co/ZI3nWx2fhV8Ks",
        "summary": "We’re making Tumblr more accessible!",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 417,
        "title": "We’re making Tumblr more accessible!",
        "body": "<p><a href=\"https://javascript.tumblr.com/post/182090529587/were-making-tumblr-more-accessible\" class=\"tumblr_blog\">javascript</a>:</p><blockquote>\n<p>If you’re an avid user of Tumblr on mobile web, then you might’ve noticed some improvements we made. Bigger font sizes and higher contrast text? Your screen reader actually reads what you hope it would? You’ve guessed it, we’re making Tumblr ✨accessible✨.</p>\n<h2>Why?</h2>\n<p><a href=\"https://javascript.tumblr.com/post/176747072462/a-breath-of-life-welcome-the-brand-new-mobile-web\">Since we’re rewriting the web</a>, we wanted to make sure we did so with accessibility in mind. I could give you a long description why, but <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fmedium.com%2Ffbdevclagos%2Fwhy-web-accessibility-is-important-and-how-you-can-accomplish-it-4f59fda7859c&amp;t=ODkzNDI5NmQxNzJjNTBiMzVlNzkzMGZmZGM4ZjFhNThlZjY0Zjk2ZCxiYjY2MTY5OWJmZDUyMDU3Zjg2YTc3ZWQxNjZjN2FiMTEwODU5Nzc1\">plenty of articles explain</a> better than I can. Put simply: the web should be made useable for everyone.</p>\n<p>We began with using the accessibility auditing tool in <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ftools%2Flighthouse%2F&amp;t=ZjAwMWU3ODJjOWJlOWIxODFjYmJjZDE3YWI4ZDc0YmZlNTNkYTdjNixjMzZmNTU0ZjhjMmRkNWI3MjIwZWNjYWM3NTE4NDNhZGY4OWExNWE2\">Google Lighthouse</a> to check the improvements that could be made. Initially, our score wasn’t that great: 62. If you factored in areas that need to be manually checked then our score would have been abysmal. However, we’ve made great strides since then and are on our way to achieving that coveted 💯</p>\n<p>We had inaccessible menus and poorly described elements, among other things. Using a tool like <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.apple.com%2Faccessibility%2Fiphone%2Fvision%2F&amp;t=YTc3OGU0NzYzNDY5MDRkNjY1NDI5ZGZiNzM4ZTk4MTAyNmRhMjY1ZSxlMzAwYWEwZjQ5M2FlMTM5MzU4NzQ2OGVjZmMwNDFmMjg2NmIwODdh\">VoiceOver</a> or <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fsupport.google.com%2Faccessibility%2Fandroid%2Fanswer%2F6283677%3Fhl%3Den&amp;t=MThiMWQ3OTYwNjUzMDI1MzdmMzNhZDg3MWFkYjQ1Y2IzZGY2NTU2YSw2MzZiODY2Y2Y3Yjc3YWI1NTU5YTJjMWQ4OThiN2UwOTcyZDMyYWU0\">TalkBalk</a> you can see what experiencing Tumblr on mobile web with a screen reader was like. Here’s a gif showing what the mobile web experience on Tumblr was like prior to the changes.</p>\n<figure class=\"tmblr-full\" data-orig-height=\"981\" data-orig-width=\"1460\"><img src=\"https://66.media.tumblr.com/41fb7ea67d3818a49750bdde0ffdf649/tumblr_inline_plhk4gUGTs1qfncuy_540.gif\" data-orig-height=\"981\" data-orig-width=\"1460\"/></figure><figure class=\"tmblr-full\" data-orig-height=\"768\" data-orig-width=\"361\"><img src=\"https://66.media.tumblr.com/e4e54dd8558b5b1597fc438a35e97270/tumblr_inline_plhk5oce8u1qfncuy_540.gif\" data-orig-height=\"768\" data-orig-width=\"361\"/></figure><h2>What we did</h2>\n<p>Some of the more noticeable improvements we made were introducing design changes to increase readability and making improvements following <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FAccessibility%2FWAI-ARIA_basics&amp;t=YTkwMWZmODIxMDE1ZWZkZmE4NWE3ZDJiOWUwNjcyNmIxNzcxNTRhNyw5NWUzMzJkYTQzZDRmZTU1ZjU1NGQ3OTU1NzRjZjY0MjEwNGNjMjZh\">WAI-ARIA</a> guidelines. We’ll walk through a few other changes we made using React.</p>\n<p><b>Visual order on the page follows DOM order</b></p>\n<p>One of the larger changes we made was to revamp modals and popovers (e.g., the post activity screen). Originally we used <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Freactjs.org%2Fdocs%2Fportals.html&amp;t=NmEwYjNmZTlkNzVlNjNlYzJmZTNiODkxOWYxZTMzOTg0MTgzMTU0ZiwyOGQ0OGViYzE1MDJlYmY4YTkyZTA5MzU2YTE5YTRkMjc2OTg0ODNj\">React Portals</a> but it isn’t always the most friendly for accessibility. Ideally you want to have elements appear in logical DOM order and Portals provides a way to circumvent that. So, no more Portals!</p>\n<p><b>The user’s focus is directed to new content added to the page</b></p>\n<p>Next step was to provide a way to manage focus. We want to a) direct focus to the modal when it’s opened and b) return focus to the element that opened the fullscreen modal. Using React’s lifecycle methods and <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Freactjs.org%2Fdocs%2Frefs-and-the-dom.html&amp;t=OWQxNzAyNmFiZGFhMDNhYWMzNGIzZjk0MmE4YTg0NDQ1MGM0ZThkNyxjNTIxMjQwYzMxNWYxMDk2YTI0ZThmNmRmNGVlODEzYmY3MmMyMWRm\">refs</a>, this is simple enough to implement. In your modal component:</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> targetEl: <span class=\"npf_color_rachel\">HTMLElement</span>; <span class=\"npf_color_ross\">// The element used to open the modal</span>\n<br/><span class=\"npf_color_niles\">public</span> buttonEl: <span class=\"npf_color_rachel\">HTMLElement</span>;</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">componentDidMount</span>() {<br/>\n  <span class=\"npf_color_ross\">// We add an event listener to get the element that opened the modal</span><br/>\n  <span class=\"npf_color_rachel\">document</span>.addEventListener(‘focus’, <span class=\"npf_color_rachel\">this</span>.setOriginalTargetEl, <span class=\"npf_color_rachel\">true</span>);<br/>\n  <span class=\"npf_color_ross\">// We set focus to some element inside your modal</span><br/>\n  <span class=\"npf_color_rachel\">this</span>.buttonEl.<span class=\"npf_color_rachel\">focus</span>();<br/>\n}\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">componentWillUnmount</span>() {<br/>\n  <span class=\"npf_color_ross\">// Return focus to the element that opened the modal</span><br/>\n  <span class=\"npf_color_niles\">if</span> (<span class=\"npf_color_rachel\">this</span>.targetEl) {<br/>\n    <span class=\"npf_color_rachel\">this</span>.targetEl.<span class=\"npf_color_rachel\">focus</span>();<br/>\n  }<br/>\n}\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">setOriginalTargetEl</span> <span class=\"npf_color_niles\">=</span> event <span class=\"npf_color_niles\">=&gt;</span> {<br/>\n  <span class=\"npf_color_ross\">// Only set it once to get the initial target</span><br/>\n  <span class=\"npf_color_niles\">if</span> (!<span class=\"npf_color_rachel\">this</span>.targetEl) {<br/>\n    <span class=\"npf_color_rachel\">this</span>.targetEl = event.relatedTarget;<br/>\n    <span class=\"npf_color_rachel\">document</span>.removeEventListener(&lsquo;focus’, <span class=\"npf_color_rachel\">this</span>.setOriginalTargetEl, <span class=\"npf_color_rachel\">true</span>);<br/>\n  }<br/>\n};\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">render</span>() {<br/>\n  <span class=\"npf_color_niles\">return</span> (<br/>\n    <span class=\"npf_color_niles\">&lt;</span>div<span class=\"npf_color_niles\">&gt;</span><br/>\n      <span class=\"npf_color_niles\">&lt;</span>button ref<span class=\"npf_color_niles\">=</span>{(el) <span class=\"npf_color_niles\">=&gt;</span> <span class=\"npf_color_rachel\">this</span>.buttonEl <span class=\"npf_color_niles\">=</span> el}<span class=\"npf_color_niles\">&gt;</span><br/>\n        Back<br/>\n      <span class=\"npf_color_niles\">&lt;</span>/button<span class=\"npf_color_niles\">&gt;</span><br/>\n      <span class=\"npf_color_niles\">&lt;</span>div<span class=\"npf_color_niles\">&gt;</span>Your content<span class=\"npf_color_niles\">&lt;</span>/div<span class=\"npf_color_niles\">&gt;</span><br/>\n    <span class=\"npf_color_niles\">&lt;</span>/div<span class=\"npf_color_niles\">&gt;</span><br/>\n  );<br/>\n}\n</p>\n\n<p>This can make navigation a lot easier.</p>\n<h2>Tada!</h2>\n<figure class=\"tmblr-full\" data-orig-height=\"768\" data-orig-width=\"361\"><img src=\"https://66.media.tumblr.com/031a13a0a3679d628d233e6c5a604723/tumblr_inline_plhk7ciekT1qfncuy_540.gif\" data-orig-height=\"768\" data-orig-width=\"361\"/></figure><figure class=\"tmblr-full\" data-orig-height=\"348\" data-orig-width=\"358\"><img src=\"https://66.media.tumblr.com/cc7f0029e775a57d163611a6a320562b/tumblr_inline_plhk7uO99F1qfncuy_540.gif\" data-orig-height=\"348\" data-orig-width=\"358\"/></figure><p>Of course, we’re still fine-tuning different elements of the site since accessibility is more than just a number. A lot of these changes will be even more noticeable when the new Tumblr dashboard comes to your desktop. There’s still more to come, so keep your eyes open!</p>\n<p>Think there’s a way to make Tumblr more accessible? Hit us up at <a href=\"https://www.tumblr.com/jobs\">tumblr.com/jobs</a> and come work with us!</p>\n<p>\n    - Nora Mohamed / <a href=\"https://nomo.tumblr.com\">@nomo</a></p>\n</blockquote>\n<p>More amazing work from our Core Web team here at Tumblr!</p>",
        "reblog": {
          "comment": "<p>More amazing work from our Core Web team here at Tumblr!</p>",
          "tree_html": "<p><a href=\"https://javascript.tumblr.com/post/182090529587/were-making-tumblr-more-accessible\" class=\"tumblr_blog\">javascript</a>:</p>\n<blockquote>\n<p>If you’re an avid user of Tumblr on mobile web, then you might’ve noticed some improvements we made. Bigger font sizes and higher contrast text? Your screen reader actually reads what you hope it would? You’ve guessed it, we’re making Tumblr ✨accessible✨.</p>\n<h2>Why?</h2>\n<p><a href=\"https://javascript.tumblr.com/post/176747072462/a-breath-of-life-welcome-the-brand-new-mobile-web\">Since we’re rewriting the web</a>, we wanted to make sure we did so with accessibility in mind. I could give you a long description why, but <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fmedium.com%2Ffbdevclagos%2Fwhy-web-accessibility-is-important-and-how-you-can-accomplish-it-4f59fda7859c&amp;t=ODkzNDI5NmQxNzJjNTBiMzVlNzkzMGZmZGM4ZjFhNThlZjY0Zjk2ZCxiYjY2MTY5OWJmZDUyMDU3Zjg2YTc3ZWQxNjZjN2FiMTEwODU5Nzc1\">plenty of articles explain</a> better than I can. Put simply: the web should be made useable for everyone.</p>\n<p>We began with using the accessibility auditing tool in <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ftools%2Flighthouse%2F&amp;t=ZjAwMWU3ODJjOWJlOWIxODFjYmJjZDE3YWI4ZDc0YmZlNTNkYTdjNixjMzZmNTU0ZjhjMmRkNWI3MjIwZWNjYWM3NTE4NDNhZGY4OWExNWE2\">Google Lighthouse</a> to check the improvements that could be made. Initially, our score wasn’t that great: 62. If you factored in areas that need to be manually checked then our score would have been abysmal. However, we’ve made great strides since then and are on our way to achieving that coveted 💯</p>\n<p>We had inaccessible menus and poorly described elements, among other things. Using a tool like <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.apple.com%2Faccessibility%2Fiphone%2Fvision%2F&amp;t=YTc3OGU0NzYzNDY5MDRkNjY1NDI5ZGZiNzM4ZTk4MTAyNmRhMjY1ZSxlMzAwYWEwZjQ5M2FlMTM5MzU4NzQ2OGVjZmMwNDFmMjg2NmIwODdh\">VoiceOver</a> or <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fsupport.google.com%2Faccessibility%2Fandroid%2Fanswer%2F6283677%3Fhl%3Den&amp;t=MThiMWQ3OTYwNjUzMDI1MzdmMzNhZDg3MWFkYjQ1Y2IzZGY2NTU2YSw2MzZiODY2Y2Y3Yjc3YWI1NTU5YTJjMWQ4OThiN2UwOTcyZDMyYWU0\">TalkBalk</a> you can see what experiencing Tumblr on mobile web with a screen reader was like. Here’s a gif showing what the mobile web experience on Tumblr was like prior to the changes.</p>\n<figure class=\"tmblr-full\" data-orig-height=\"981\" data-orig-width=\"1460\"><img src=\"https://66.media.tumblr.com/41fb7ea67d3818a49750bdde0ffdf649/tumblr_inline_plhk4gUGTs1qfncuy_540.gif\" data-orig-height=\"981\" data-orig-width=\"1460\"></figure><figure class=\"tmblr-full\" data-orig-height=\"768\" data-orig-width=\"361\"><img src=\"https://66.media.tumblr.com/e4e54dd8558b5b1597fc438a35e97270/tumblr_inline_plhk5oce8u1qfncuy_540.gif\" data-orig-height=\"768\" data-orig-width=\"361\"></figure><h2>What we did</h2>\n<p>Some of the more noticeable improvements we made were introducing design changes to increase readability and making improvements following <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FAccessibility%2FWAI-ARIA_basics&amp;t=YTkwMWZmODIxMDE1ZWZkZmE4NWE3ZDJiOWUwNjcyNmIxNzcxNTRhNyw5NWUzMzJkYTQzZDRmZTU1ZjU1NGQ3OTU1NzRjZjY0MjEwNGNjMjZh\">WAI-ARIA</a> guidelines. We’ll walk through a few other changes we made using React.</p>\n<p><b>Visual order on the page follows DOM order</b></p>\n<p>One of the larger changes we made was to revamp modals and popovers (e.g., the post activity screen). Originally we used <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Freactjs.org%2Fdocs%2Fportals.html&amp;t=NmEwYjNmZTlkNzVlNjNlYzJmZTNiODkxOWYxZTMzOTg0MTgzMTU0ZiwyOGQ0OGViYzE1MDJlYmY4YTkyZTA5MzU2YTE5YTRkMjc2OTg0ODNj\">React Portals</a> but it isn’t always the most friendly for accessibility. Ideally you want to have elements appear in logical DOM order and Portals provides a way to circumvent that. So, no more Portals!</p>\n<p><b>The user’s focus is directed to new content added to the page</b></p>\n<p>Next step was to provide a way to manage focus. We want to a) direct focus to the modal when it’s opened and b) return focus to the element that opened the fullscreen modal. Using React’s lifecycle methods and <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Freactjs.org%2Fdocs%2Frefs-and-the-dom.html&amp;t=OWQxNzAyNmFiZGFhMDNhYWMzNGIzZjk0MmE4YTg0NDQ1MGM0ZThkNyxjNTIxMjQwYzMxNWYxMDk2YTI0ZThmNmRmNGVlODEzYmY3MmMyMWRm\">refs</a>, this is simple enough to implement. In your modal component:</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> targetEl: <span class=\"npf_color_rachel\">HTMLElement</span>; <span class=\"npf_color_ross\">// The element used to open the modal</span>\n<br><span class=\"npf_color_niles\">public</span> buttonEl: <span class=\"npf_color_rachel\">HTMLElement</span>;</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">componentDidMount</span>() {<br>\n  <span class=\"npf_color_ross\">// We add an event listener to get the element that opened the modal</span><br>\n  <span class=\"npf_color_rachel\">document</span>.addEventListener(‘focus’, <span class=\"npf_color_rachel\">this</span>.setOriginalTargetEl, <span class=\"npf_color_rachel\">true</span>);<br>\n  <span class=\"npf_color_ross\">// We set focus to some element inside your modal</span><br>\n  <span class=\"npf_color_rachel\">this</span>.buttonEl.<span class=\"npf_color_rachel\">focus</span>();<br>\n}\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">componentWillUnmount</span>() {<br>\n  <span class=\"npf_color_ross\">// Return focus to the element that opened the modal</span><br>\n  <span class=\"npf_color_niles\">if</span> (<span class=\"npf_color_rachel\">this</span>.targetEl) {<br>\n    <span class=\"npf_color_rachel\">this</span>.targetEl.<span class=\"npf_color_rachel\">focus</span>();<br>\n  }<br>\n}\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">setOriginalTargetEl</span> <span class=\"npf_color_niles\">=</span> event <span class=\"npf_color_niles\">=&gt;</span> {<br>\n  <span class=\"npf_color_ross\">// Only set it once to get the initial target</span><br>\n  <span class=\"npf_color_niles\">if</span> (!<span class=\"npf_color_rachel\">this</span>.targetEl) {<br>\n    <span class=\"npf_color_rachel\">this</span>.targetEl = event.relatedTarget;<br>\n    <span class=\"npf_color_rachel\">document</span>.removeEventListener(‘focus’, <span class=\"npf_color_rachel\">this</span>.setOriginalTargetEl, <span class=\"npf_color_rachel\">true</span>);<br>\n  }<br>\n};\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">render</span>() {<br>\n  <span class=\"npf_color_niles\">return</span> (<br>\n    <span class=\"npf_color_niles\">&lt;</span>div<span class=\"npf_color_niles\">&gt;</span><br>\n      <span class=\"npf_color_niles\">&lt;</span>button ref<span class=\"npf_color_niles\">=</span>{(el) <span class=\"npf_color_niles\">=&gt;</span> <span class=\"npf_color_rachel\">this</span>.buttonEl <span class=\"npf_color_niles\">=</span> el}<span class=\"npf_color_niles\">&gt;</span><br>\n        Back<br>\n      <span class=\"npf_color_niles\">&lt;</span>/button<span class=\"npf_color_niles\">&gt;</span><br>\n      <span class=\"npf_color_niles\">&lt;</span>div<span class=\"npf_color_niles\">&gt;</span>Your content<span class=\"npf_color_niles\">&lt;</span>/div<span class=\"npf_color_niles\">&gt;</span><br>\n    <span class=\"npf_color_niles\">&lt;</span>/div<span class=\"npf_color_niles\">&gt;</span><br>\n  );<br>\n}\n</p>\n\n<p>This can make navigation a lot easier.</p>\n<h2>Tada!</h2>\n<figure class=\"tmblr-full\" data-orig-height=\"768\" data-orig-width=\"361\"><img src=\"https://66.media.tumblr.com/031a13a0a3679d628d233e6c5a604723/tumblr_inline_plhk7ciekT1qfncuy_540.gif\" data-orig-height=\"768\" data-orig-width=\"361\"></figure><figure class=\"tmblr-full\" data-orig-height=\"348\" data-orig-width=\"358\"><img src=\"https://66.media.tumblr.com/cc7f0029e775a57d163611a6a320562b/tumblr_inline_plhk7uO99F1qfncuy_540.gif\" data-orig-height=\"348\" data-orig-width=\"358\"></figure><p>Of course, we’re still fine-tuning different elements of the site since accessibility is more than just a number. A lot of these changes will be even more noticeable when the new Tumblr dashboard comes to your desktop. There’s still more to come, so keep your eyes open!</p>\n<p>Think there’s a way to make Tumblr more accessible? Hit us up at <a href=\"https://www.tumblr.com/jobs\">tumblr.com/jobs</a> and come work with us!</p>\n<p>\n    - Nora Mohamed / <a href=\"https://nomo.tumblr.com\">@nomo</a></p>\n</blockquote>"
        },
        "trail": [
          {
            "blog": {
              "name": "javascript",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#fcf11d",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/84c85268abe461ffc10dbb903b7fb00f/9640f1cf5d2277fc-18/s1920x1080/df1e800724c9d16acec6021cb42973a24a67ad76.png",
                "header_image_focused": "https://66.media.tumblr.com/84c85268abe461ffc10dbb903b7fb00f/9640f1cf5d2277fc-18/s2048x3072/a16e81f6427d965a37f713d8bc24a7b7d848a633.png",
                "header_image_scaled": "https://66.media.tumblr.com/84c85268abe461ffc10dbb903b7fb00f/9640f1cf5d2277fc-18/s2048x3072/a16e81f6427d965a37f713d8bc24a7b7d848a633.png",
                "header_stretch": true,
                "link_color": "#000000",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#000000",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "182090529587" },
            "content_raw": "<p>If you’re an avid user of Tumblr on mobile web, then you might’ve noticed some improvements we made. Bigger font sizes and higher contrast text? Your screen reader actually reads what you hope it would? You’ve guessed it, we’re making Tumblr ✨accessible✨.</p>\n<h2>Why?</h2>\n<p><a href=\"https://javascript.tumblr.com/post/176747072462/a-breath-of-life-welcome-the-brand-new-mobile-web\">Since we’re rewriting the web</a>, we wanted to make sure we did so with accessibility in mind. I could give you a long description why, but <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fmedium.com%2Ffbdevclagos%2Fwhy-web-accessibility-is-important-and-how-you-can-accomplish-it-4f59fda7859c&amp;t=ODkzNDI5NmQxNzJjNTBiMzVlNzkzMGZmZGM4ZjFhNThlZjY0Zjk2ZCxiYjY2MTY5OWJmZDUyMDU3Zjg2YTc3ZWQxNjZjN2FiMTEwODU5Nzc1\">plenty of articles explain</a> better than I can. Put simply: the web should be made useable for everyone.</p>\n<p>We began with using the accessibility auditing tool in <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ftools%2Flighthouse%2F&amp;t=ZjAwMWU3ODJjOWJlOWIxODFjYmJjZDE3YWI4ZDc0YmZlNTNkYTdjNixjMzZmNTU0ZjhjMmRkNWI3MjIwZWNjYWM3NTE4NDNhZGY4OWExNWE2\">Google Lighthouse</a> to check the improvements that could be made. Initially, our score wasn’t that great: 62. If you factored in areas that need to be manually checked then our score would have been abysmal. However, we’ve made great strides since then and are on our way to achieving that coveted 💯</p>\n<p>We had inaccessible menus and poorly described elements, among other things. Using a tool like <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.apple.com%2Faccessibility%2Fiphone%2Fvision%2F&amp;t=YTc3OGU0NzYzNDY5MDRkNjY1NDI5ZGZiNzM4ZTk4MTAyNmRhMjY1ZSxlMzAwYWEwZjQ5M2FlMTM5MzU4NzQ2OGVjZmMwNDFmMjg2NmIwODdh\">VoiceOver</a> or <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fsupport.google.com%2Faccessibility%2Fandroid%2Fanswer%2F6283677%3Fhl%3Den&amp;t=MThiMWQ3OTYwNjUzMDI1MzdmMzNhZDg3MWFkYjQ1Y2IzZGY2NTU2YSw2MzZiODY2Y2Y3Yjc3YWI1NTU5YTJjMWQ4OThiN2UwOTcyZDMyYWU0\">TalkBalk</a> you can see what experiencing Tumblr on mobile web with a screen reader was like. Here’s a gif showing what the mobile web experience on Tumblr was like prior to the changes.</p>\n<figure class=\"tmblr-full\" data-orig-height=\"981\" data-orig-width=\"1460\"><img src=\"https://66.media.tumblr.com/41fb7ea67d3818a49750bdde0ffdf649/tumblr_inline_plhk4gUGTs1qfncuy_540.gif\" data-orig-height=\"981\" data-orig-width=\"1460\"></figure><figure class=\"tmblr-full\" data-orig-height=\"768\" data-orig-width=\"361\"><img src=\"https://66.media.tumblr.com/e4e54dd8558b5b1597fc438a35e97270/tumblr_inline_plhk5oce8u1qfncuy_540.gif\" data-orig-height=\"768\" data-orig-width=\"361\"></figure><h2>What we did</h2>\n<p>Some of the more noticeable improvements we made were introducing design changes to increase readability and making improvements following <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FAccessibility%2FWAI-ARIA_basics&amp;t=YTkwMWZmODIxMDE1ZWZkZmE4NWE3ZDJiOWUwNjcyNmIxNzcxNTRhNyw5NWUzMzJkYTQzZDRmZTU1ZjU1NGQ3OTU1NzRjZjY0MjEwNGNjMjZh\">WAI-ARIA</a> guidelines. We’ll walk through a few other changes we made using React.</p>\n<p><b>Visual order on the page follows DOM order</b></p>\n<p>One of the larger changes we made was to revamp modals and popovers (e.g., the post activity screen). Originally we used <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Freactjs.org%2Fdocs%2Fportals.html&amp;t=NmEwYjNmZTlkNzVlNjNlYzJmZTNiODkxOWYxZTMzOTg0MTgzMTU0ZiwyOGQ0OGViYzE1MDJlYmY4YTkyZTA5MzU2YTE5YTRkMjc2OTg0ODNj\">React Portals</a> but it isn’t always the most friendly for accessibility. Ideally you want to have elements appear in logical DOM order and Portals provides a way to circumvent that. So, no more Portals!</p>\n<p><b>The user’s focus is directed to new content added to the page</b></p>\n<p>Next step was to provide a way to manage focus. We want to a) direct focus to the modal when it’s opened and b) return focus to the element that opened the fullscreen modal. Using React’s lifecycle methods and <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Freactjs.org%2Fdocs%2Frefs-and-the-dom.html&amp;t=OWQxNzAyNmFiZGFhMDNhYWMzNGIzZjk0MmE4YTg0NDQ1MGM0ZThkNyxjNTIxMjQwYzMxNWYxMDk2YTI0ZThmNmRmNGVlODEzYmY3MmMyMWRm\">refs</a>, this is simple enough to implement. In your modal component:</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> targetEl: <span class=\"npf_color_rachel\">HTMLElement</span>; <span class=\"npf_color_ross\">// The element used to open the modal</span>\n<br><span class=\"npf_color_niles\">public</span> buttonEl: <span class=\"npf_color_rachel\">HTMLElement</span>;</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">componentDidMount</span>() {<br>\n  <span class=\"npf_color_ross\">// We add an event listener to get the element that opened the modal</span><br>\n  <span class=\"npf_color_rachel\">document</span>.addEventListener(‘focus’, <span class=\"npf_color_rachel\">this</span>.setOriginalTargetEl, <span class=\"npf_color_rachel\">true</span>);<br>\n  <span class=\"npf_color_ross\">// We set focus to some element inside your modal</span><br>\n  <span class=\"npf_color_rachel\">this</span>.buttonEl.<span class=\"npf_color_rachel\">focus</span>();<br>\n}\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">componentWillUnmount</span>() {<br>\n  <span class=\"npf_color_ross\">// Return focus to the element that opened the modal</span><br>\n  <span class=\"npf_color_niles\">if</span> (<span class=\"npf_color_rachel\">this</span>.targetEl) {<br>\n    <span class=\"npf_color_rachel\">this</span>.targetEl.<span class=\"npf_color_rachel\">focus</span>();<br>\n  }<br>\n}\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">setOriginalTargetEl</span> <span class=\"npf_color_niles\">=</span> event <span class=\"npf_color_niles\">=&gt;</span> {<br>\n  <span class=\"npf_color_ross\">// Only set it once to get the initial target</span><br>\n  <span class=\"npf_color_niles\">if</span> (!<span class=\"npf_color_rachel\">this</span>.targetEl) {<br>\n    <span class=\"npf_color_rachel\">this</span>.targetEl = event.relatedTarget;<br>\n    <span class=\"npf_color_rachel\">document</span>.removeEventListener(‘focus’, <span class=\"npf_color_rachel\">this</span>.setOriginalTargetEl, <span class=\"npf_color_rachel\">true</span>);<br>\n  }<br>\n};\n</p>\n\n<p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'>\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">render</span>() {<br>\n  <span class=\"npf_color_niles\">return</span> (<br>\n    <span class=\"npf_color_niles\">&lt;</span>div<span class=\"npf_color_niles\">&gt;</span><br>\n      <span class=\"npf_color_niles\">&lt;</span>button ref<span class=\"npf_color_niles\">=</span>{(el) <span class=\"npf_color_niles\">=&gt;</span> <span class=\"npf_color_rachel\">this</span>.buttonEl <span class=\"npf_color_niles\">=</span> el}<span class=\"npf_color_niles\">&gt;</span><br>\n        Back<br>\n      <span class=\"npf_color_niles\">&lt;</span>/button<span class=\"npf_color_niles\">&gt;</span><br>\n      <span class=\"npf_color_niles\">&lt;</span>div<span class=\"npf_color_niles\">&gt;</span>Your content<span class=\"npf_color_niles\">&lt;</span>/div<span class=\"npf_color_niles\">&gt;</span><br>\n    <span class=\"npf_color_niles\">&lt;</span>/div<span class=\"npf_color_niles\">&gt;</span><br>\n  );<br>\n}\n</p>\n\n<p>This can make navigation a lot easier.</p>\n<h2>Tada!</h2>\n<figure class=\"tmblr-full\" data-orig-height=\"768\" data-orig-width=\"361\"><img src=\"https://66.media.tumblr.com/031a13a0a3679d628d233e6c5a604723/tumblr_inline_plhk7ciekT1qfncuy_540.gif\" data-orig-height=\"768\" data-orig-width=\"361\"></figure><figure class=\"tmblr-full\" data-orig-height=\"348\" data-orig-width=\"358\"><img src=\"https://66.media.tumblr.com/cc7f0029e775a57d163611a6a320562b/tumblr_inline_plhk7uO99F1qfncuy_540.gif\" data-orig-height=\"348\" data-orig-width=\"358\"></figure><p>Of course, we’re still fine-tuning different elements of the site since accessibility is more than just a number. A lot of these changes will be even more noticeable when the new Tumblr dashboard comes to your desktop. There’s still more to come, so keep your eyes open!</p>\n<p>Think there’s a way to make Tumblr more accessible? Hit us up at <a href=\"https://www.tumblr.com/jobs\">tumblr.com/jobs</a> and come work with us!</p>\n<p>\n    - Nora Mohamed / <a href=\"https://nomo.tumblr.com\">@nomo</a></p>",
            "content": "<p>If you&rsquo;re an avid user of Tumblr on mobile web, then you might&rsquo;ve noticed some improvements we made. Bigger font sizes and higher contrast text? Your screen reader actually reads what you hope it would? You&rsquo;ve guessed it, we&rsquo;re making Tumblr &#10024;accessible&#10024;.</p>\n<h2>Why?</h2>\n<p><a href=\"https://javascript.tumblr.com/post/176747072462/a-breath-of-life-welcome-the-brand-new-mobile-web\">Since we&rsquo;re rewriting the web</a>, we wanted to make sure we did so with accessibility in mind. I could give you a long description why, but <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fmedium.com%2Ffbdevclagos%2Fwhy-web-accessibility-is-important-and-how-you-can-accomplish-it-4f59fda7859c&amp;t=ODkzNDI5NmQxNzJjNTBiMzVlNzkzMGZmZGM4ZjFhNThlZjY0Zjk2ZCxiYjY2MTY5OWJmZDUyMDU3Zjg2YTc3ZWQxNjZjN2FiMTEwODU5Nzc1\">plenty of articles explain</a> better than I can. Put simply: the web should be made useable for everyone.</p>\n<p>We began with using the accessibility auditing tool in <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ftools%2Flighthouse%2F&amp;t=ZjAwMWU3ODJjOWJlOWIxODFjYmJjZDE3YWI4ZDc0YmZlNTNkYTdjNixjMzZmNTU0ZjhjMmRkNWI3MjIwZWNjYWM3NTE4NDNhZGY4OWExNWE2\">Google Lighthouse</a> to check the improvements that could be made. Initially, our score wasn&rsquo;t that great: 62. If you factored in areas that need to be manually checked then our score would have been abysmal. However, we&rsquo;ve made great strides since then and are on our way to achieving that coveted &#128175;</p>\n<p>We had inaccessible menus and poorly described elements, among other things. Using a tool like <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.apple.com%2Faccessibility%2Fiphone%2Fvision%2F&amp;t=YTc3OGU0NzYzNDY5MDRkNjY1NDI5ZGZiNzM4ZTk4MTAyNmRhMjY1ZSxlMzAwYWEwZjQ5M2FlMTM5MzU4NzQ2OGVjZmMwNDFmMjg2NmIwODdh\">VoiceOver</a> or <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fsupport.google.com%2Faccessibility%2Fandroid%2Fanswer%2F6283677%3Fhl%3Den&amp;t=MThiMWQ3OTYwNjUzMDI1MzdmMzNhZDg3MWFkYjQ1Y2IzZGY2NTU2YSw2MzZiODY2Y2Y3Yjc3YWI1NTU5YTJjMWQ4OThiN2UwOTcyZDMyYWU0\">TalkBalk</a> you can see what experiencing Tumblr on mobile web with a screen reader was like. Here&rsquo;s a gif showing what the mobile web experience on Tumblr was like prior to the changes.</p>\n<figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/41fb7ea67d3818a49750bdde0ffdf649/tumblr_inline_plhk4gUGTs1qfncuy_540.gif\" alt=\"image\" class=\"\"/></figure><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/e4e54dd8558b5b1597fc438a35e97270/tumblr_inline_plhk5oce8u1qfncuy_540.gif\" alt=\"image\" class=\"\"/></figure><h2>What we did</h2>\n<p>Some of the more noticeable improvements we made were introducing design changes to increase readability and making improvements following <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FAccessibility%2FWAI-ARIA_basics&amp;t=YTkwMWZmODIxMDE1ZWZkZmE4NWE3ZDJiOWUwNjcyNmIxNzcxNTRhNyw5NWUzMzJkYTQzZDRmZTU1ZjU1NGQ3OTU1NzRjZjY0MjEwNGNjMjZh\">WAI-ARIA</a> guidelines. We&rsquo;ll walk through a few other changes we made using React.</p>\n<p><b>Visual order on the page follows DOM order</b></p>\n<p>One of the larger changes we made was to revamp modals and popovers (e.g., the post activity screen). Originally we used <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Freactjs.org%2Fdocs%2Fportals.html&amp;t=NmEwYjNmZTlkNzVlNjNlYzJmZTNiODkxOWYxZTMzOTg0MTgzMTU0ZiwyOGQ0OGViYzE1MDJlYmY4YTkyZTA5MzU2YTE5YTRkMjc2OTg0ODNj\">React Portals</a> but it isn&rsquo;t always the most friendly for accessibility. Ideally you want to have elements appear in logical DOM order and Portals provides a way to circumvent that. So, no more Portals!</p>\n<p><b>The user&rsquo;s focus is directed to new content added to the page</b></p>\n<p>Next step was to provide a way to manage focus. We want to a) direct focus to the modal when it&rsquo;s opened and b) return focus to the element that opened the fullscreen modal. Using React&rsquo;s lifecycle methods and <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Freactjs.org%2Fdocs%2Frefs-and-the-dom.html&amp;t=OWQxNzAyNmFiZGFhMDNhYWMzNGIzZjk0MmE4YTg0NDQ1MGM0ZThkNyxjNTIxMjQwYzMxNWYxMDk2YTI0ZThmNmRmNGVlODEzYmY3MmMyMWRm\">refs</a>, this is simple enough to implement. In your modal component:</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n<span class=\"npf_color_niles\">public</span> targetEl: <span class=\"npf_color_rachel\">HTMLElement</span>; <span class=\"npf_color_ross\">// The element used to open the modal</span>\n<br /><span class=\"npf_color_niles\">public</span> buttonEl: <span class=\"npf_color_rachel\">HTMLElement</span>;</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">componentDidMount</span>() {<br />\n&nbsp;&nbsp;<span class=\"npf_color_ross\">// We add an event listener to get the element that opened the modal</span><br />\n&nbsp;&nbsp;<span class=\"npf_color_rachel\">document</span>.addEventListener(&lsquo;focus&rsquo;, <span class=\"npf_color_rachel\">this</span>.setOriginalTargetEl, <span class=\"npf_color_rachel\">true</span>);<br />\n&nbsp;&nbsp;<span class=\"npf_color_ross\">// We set focus to some element inside your modal</span><br />\n&nbsp;&nbsp;<span class=\"npf_color_rachel\">this</span>.buttonEl.<span class=\"npf_color_rachel\">focus</span>();<br />\n}\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">componentWillUnmount</span>() {<br />\n&nbsp;&nbsp;<span class=\"npf_color_ross\">// Return focus to the element that opened the modal</span><br />\n&nbsp;&nbsp;<span class=\"npf_color_niles\">if</span> (<span class=\"npf_color_rachel\">this</span>.targetEl) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_rachel\">this</span>.targetEl.<span class=\"npf_color_rachel\">focus</span>();<br />\n&nbsp;&nbsp;}<br />\n}\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">setOriginalTargetEl</span> <span class=\"npf_color_niles\">=</span> event <span class=\"npf_color_niles\">=&gt;</span> {<br />\n&nbsp;&nbsp;<span class=\"npf_color_ross\">// Only set it once to get the initial target</span><br />\n&nbsp;&nbsp;<span class=\"npf_color_niles\">if</span> (!<span class=\"npf_color_rachel\">this</span>.targetEl) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_rachel\">this</span>.targetEl = event.relatedTarget;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_rachel\">document</span>.removeEventListener(&lsquo;focus&rsquo;, <span class=\"npf_color_rachel\">this</span>.setOriginalTargetEl, <span class=\"npf_color_rachel\">true</span>);<br />\n&nbsp;&nbsp;}<br />\n};\n</p>\n\n<p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\">\n<span class=\"npf_color_niles\">public</span> <span class=\"npf_color_chandler\">render</span>() {<br />\n&nbsp;&nbsp;<span class=\"npf_color_niles\">return</span> (<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_niles\">&lt;</span>div<span class=\"npf_color_niles\">&gt;</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_niles\">&lt;</span>button ref<span class=\"npf_color_niles\">=</span>{(el) <span class=\"npf_color_niles\">=&gt;</span> <span class=\"npf_color_rachel\">this</span>.buttonEl <span class=\"npf_color_niles\">=</span> el}<span class=\"npf_color_niles\">&gt;</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Back<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_niles\">&lt;</span>/button<span class=\"npf_color_niles\">&gt;</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_niles\">&lt;</span>div<span class=\"npf_color_niles\">&gt;</span>Your content<span class=\"npf_color_niles\">&lt;</span>/div<span class=\"npf_color_niles\">&gt;</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"npf_color_niles\">&lt;</span>/div<span class=\"npf_color_niles\">&gt;</span><br />\n&nbsp;&nbsp;);<br />\n}\n</p>\n\n<p>This can make navigation a lot easier.</p>\n<h2>Tada!</h2>\n<figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/031a13a0a3679d628d233e6c5a604723/tumblr_inline_plhk7ciekT1qfncuy_540.gif\" alt=\"image\" class=\"\"/></figure><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/cc7f0029e775a57d163611a6a320562b/tumblr_inline_plhk7uO99F1qfncuy_540.gif\" alt=\"image\" class=\"\"/></figure><p>Of course, we&rsquo;re still fine-tuning different elements of the site since accessibility is more than just a number. A lot of these changes will be even more noticeable when the new Tumblr dashboard comes to your desktop. There&rsquo;s still more to come, so keep your eyes open!</p>\n<p>Think there&rsquo;s a way to make Tumblr more accessible? Hit us up at <a href=\"https://www.tumblr.com/jobs\">tumblr.com/jobs</a> and come work with us!</p>\n<p>\n&nbsp;&nbsp;&nbsp;&nbsp;- Nora Mohamed / <a href=\"https://nomo.tumblr.com\">@nomo</a></p>",
            "is_root_item": true
          },
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "182191949110" },
            "content_raw": "<p>More amazing work from our Core Web team here at Tumblr!</p>",
            "content": "<p>More amazing work from our Core Web team here at Tumblr!</p>",
            "is_current_item": true
          }
        ],
        "reblogged_from_id": "182090529587",
        "reblogged_from_url": "https://javascript.tumblr.com/post/182090529587/were-making-tumblr-more-accessible",
        "reblogged_from_name": "javascript",
        "reblogged_from_title": "JavaScript on Tumblr",
        "reblogged_from_uuid": "t:E3JWSmG5IINX0s4eBqC2TQ",
        "reblogged_from_can_message": false,
        "reblogged_root_id": "182090529587",
        "reblogged_root_url": "https://javascript.tumblr.com/post/182090529587/were-making-tumblr-more-accessible",
        "reblogged_root_name": "javascript",
        "reblogged_root_title": "JavaScript on Tumblr",
        "reblogged_root_uuid": "t:E3JWSmG5IINX0s4eBqC2TQ",
        "reblogged_root_can_message": false,
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1573337315,
            "blog_name": "isaiahduty-blog",
            "blog_uuid": "t:mPnfNbHBhkokEtnnYVvWxQ",
            "blog_url": "https://isaiahduty-blog.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1572087009,
            "blog_name": "rainbowlight100",
            "blog_uuid": "t:q7Ienh9NLpUb4SJx18bj5w",
            "blog_url": "https://rainbowlight100.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570659716,
            "blog_name": "alex0two",
            "blog_uuid": "t:7VQwPTcur8RLCwixu9q8dw",
            "blog_url": "https://alex0two.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1569953077,
            "blog_name": "hhhhhhhbees",
            "blog_uuid": "t:xZ2ZTKRDBMZz9B8Hvs-mtQ",
            "blog_url": "https://hhhhhhhbees.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "188068864835",
            "reblog_parent_blog_name": "gemkids"
          },
          {
            "type": "like",
            "timestamp": 1569953072,
            "blog_name": "hhhhhhhbees",
            "blog_uuid": "t:xZ2ZTKRDBMZz9B8Hvs-mtQ",
            "blog_url": "https://hhhhhhhbees.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1568739845,
            "blog_name": "invaderzami",
            "blog_uuid": "t:QefjRejlnC3XkL0HLpbE4Q",
            "blog_url": "https://invaderzami.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1566812273,
            "blog_name": "meshetheotherone",
            "blog_uuid": "t:GM8POUTWYREFUiX8IEVckg",
            "blog_url": "https://meshetheotherone.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1564103540,
            "blog_name": "bananasnbagels",
            "blog_uuid": "t:AL8eMB0O1abj-udVrNx59Q",
            "blog_url": "https://bananasnbagels.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "186551375757",
            "reblog_parent_blog_name": "gemkids"
          },
          {
            "type": "like",
            "timestamp": 1564103528,
            "blog_name": "bananasnbagels",
            "blog_uuid": "t:AL8eMB0O1abj-udVrNx59Q",
            "blog_url": "https://bananasnbagels.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1563482670,
            "blog_name": "luxlier",
            "blog_uuid": "t:fJd4Pocr0qwA5N_AQnHRTw",
            "blog_url": "https://luxlier.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1562773534,
            "blog_name": "welcometothehoodlife14",
            "blog_uuid": "t:Yl0EODtQkvbT1eXjgfD8bA",
            "blog_url": "https://welcometothehoodlife14.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1562700633,
            "blog_name": "marynx-the-meme",
            "blog_uuid": "t:7rpkeFwTJxqjr-75BPPYtw",
            "blog_url": "https://marynx-the-meme.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1561330405,
            "blog_name": "thej13579",
            "blog_uuid": "t:LWhrC3tJPf5L5lAY-BuAyA",
            "blog_url": "https://thej13579.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "185802618580",
            "reblog_parent_blog_name": "javascript"
          },
          {
            "type": "like",
            "timestamp": 1561330383,
            "blog_name": "thej13579",
            "blog_uuid": "t:LWhrC3tJPf5L5lAY-BuAyA",
            "blog_url": "https://thej13579.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reply",
            "timestamp": 1559979969,
            "blog_name": "ricardelo",
            "blog_uuid": "t:bNUoFLJtPqAMZZm1KVWtfQ",
            "blog_url": "https://ricardelo.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "reply_text": "Please, when I reblog something Tumblr rolls back to the beginning. . .so I have to scroll down miles to catch up with where I was.",
            "formatting": [],
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1559577144,
            "blog_name": "abakapeach",
            "blog_uuid": "t:bksRJYKbVoE50WcqMZzvFg",
            "blog_url": "https://abakapeach.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1557192530,
            "blog_name": "wartoyo0707",
            "blog_uuid": "t:8JA-r6l7kWHvsRodW58rOA",
            "blog_url": "https://wartoyo0707.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1555671121,
            "blog_name": "kevbrinx",
            "blog_uuid": "t:hWKlJa4C5GN9JDcVfiN0Fw",
            "blog_url": "https://markmycomics.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1553774445,
            "blog_name": "bardbarovia",
            "blog_uuid": "t:O561SZWxoOtzdFBk-cpyBA",
            "blog_url": "https://bardbarovia.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "183768617406",
            "reblog_parent_blog_name": "guusbremer"
          },
          {
            "type": "like",
            "timestamp": 1553625858,
            "blog_name": "dadjustmessagedyou",
            "blog_uuid": "t:IRyq6JykNRpwUs7gIzTwBw",
            "blog_url": "https://dadjustmessagedyou.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1553622459,
            "blog_name": "bardbarovia",
            "blog_uuid": "t:O561SZWxoOtzdFBk-cpyBA",
            "blog_url": "https://bardbarovia.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1553383504,
            "blog_name": "tragicbutinnocent",
            "blog_uuid": "t:bx2Y_BVu-BQ40qMT27KAnA",
            "blog_url": "https://tragicbutinnocent.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1553087333,
            "blog_name": "acesavalon",
            "blog_uuid": "t:veiYbnQBJDzzVTtv5IV-7A",
            "blog_url": "https://acesavalon.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1552684553,
            "blog_name": "momosaurus-hex",
            "blog_uuid": "t:UudYs3f2SslHSV36q70ToQ",
            "blog_url": "https://momosaurus-hex.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "183479786563",
            "reblog_parent_blog_name": "nomo"
          },
          {
            "type": "like",
            "timestamp": 1552666589,
            "blog_name": "porch-gremlin",
            "blog_uuid": "t:7BiIUNicDizbIkBR66Yelw",
            "blog_url": "https://porch-gremlin.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1552613840,
            "blog_name": "nastergirl13",
            "blog_uuid": "t:VmBhqfvsBrf-bCahHqi5cA",
            "blog_url": "https://nastergirl13.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1552540999,
            "blog_name": "clement1a",
            "blog_uuid": "t:1vvc2ajD-ntq40VNnaYn8g",
            "blog_url": "https://clement1a.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1552278177,
            "blog_name": "apocalypsuite",
            "blog_uuid": "t:HUmtor_V-J0htCRRiNJtrg",
            "blog_url": "https://apocalypsuite.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1552246744,
            "blog_name": "collarka",
            "blog_uuid": "t:r37LJOLEUtnImBJngUyV6g",
            "blog_url": "https://collarka.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1552170273,
            "blog_name": "benjaminikuta",
            "blog_uuid": "t:TV1BBWqGMpzLdeht0dxiAw",
            "blog_url": "https://benjaminikuta.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "183342991740",
            "reblog_parent_blog_name": "javascript"
          },
          {
            "type": "like",
            "timestamp": 1552015698,
            "blog_name": "sebastiaorelson",
            "blog_uuid": "t:8Kmt0YmXEQdpRyeR0xF9ew",
            "blog_url": "https://sebastiaorelson.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1551938480,
            "blog_name": "raiders034",
            "blog_uuid": "t:FywhPBWILbkHNQCFJNLpAA",
            "blog_url": "https://raiders034.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1551811494,
            "blog_name": "dch",
            "blog_uuid": "t:2EokVHEMLwS9tgYMJv00lA",
            "blog_url": "https://dch.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1551228133,
            "blog_name": "sparrowlings",
            "blog_uuid": "t:84n9jJM4RhCuEz5Ure6Alw",
            "blog_url": "https://sparrowlings.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1551189297,
            "blog_name": "youcannotnotbereal",
            "blog_uuid": "t:7vI0-t6K9eQCnpF2srdkNg",
            "blog_url": "https://youcannotnotbereal.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "183070838043",
            "reblog_parent_blog_name": "nerdstrings"
          },
          {
            "type": "like",
            "timestamp": 1551013349,
            "blog_name": "battlecatsvevo",
            "blog_uuid": "t:_L8JadR2FuDPITe3T_GOTg",
            "blog_url": "https://battlecatsvevo.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1550996437,
            "blog_name": "dj4mile",
            "blog_uuid": "t:PWb_vfxpgodu_7aJrXjCWQ",
            "blog_url": "https://dj4mile.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "183019952221",
            "reblog_parent_blog_name": "cyle"
          },
          {
            "type": "like",
            "timestamp": 1550996434,
            "blog_name": "dj4mile",
            "blog_uuid": "t:PWb_vfxpgodu_7aJrXjCWQ",
            "blog_url": "https://dj4mile.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1550973507,
            "blog_name": "thoughtfulflapzinepanda",
            "blog_uuid": "t:hx7D8ZWiwDRxCyA8npYPvA",
            "blog_url": "https://thoughtfulflapzinepanda.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1550597381,
            "blog_name": "etucker",
            "blog_uuid": "t:-zulXd6oSW1TZHpnehAA_w",
            "blog_url": "https://etucker.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1550569832,
            "blog_name": "omitoboy",
            "blog_uuid": "t:Oig_jI6jPPEoqozdsSPJqA",
            "blog_url": "https://omitoboy.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1550547550,
            "blog_name": "jmp-m2",
            "blog_uuid": "t:wJw2gxb1UQ3Lhn5FmtEXAQ",
            "blog_url": "https://jmp-m2.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "182906352650",
            "reblog_parent_blog_name": "gemkids"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 182013497734,
        "post_url": "https://engineering.tumblr.com/post/182013497734/open-sourcing-our-kubernetes-tools",
        "slug": "open-sourcing-our-kubernetes-tools",
        "date": "2019-01-14 21:22:00 GMT",
        "timestamp": 1547500920,
        "state": "published",
        "format": "html",
        "reblog_key": "x2GBeAkg",
        "tags": [ "engineering", "kubernetes", "open source" ],
        "short_url": "https://tmblr.co/ZI3nWx2fWsP66",
        "summary": "Open Sourcing our Kubernetes Tools",
        "should_open_in_legacy": true,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 83,
        "title": "Open Sourcing our Kubernetes Tools",
        "body": "<p>At Tumblr, we are avid fans of <a href=\"https://kubernetes.io/\">Kubernetes</a>. We have been using Kubernetes for all manner of workloads, like critical-path web requests handling <a href=\"https://engineering.tumblr.com/post/172794619972/a-big-new-beautiful-future-for-the-web-at-tumblr\">for tumblr.com</a>, background task executions like sending queued posts and push notifications, and scheduled jobs for spam detection and content moderation. Throughout our journey to move our 11 year old (almost 12! 🎂) platform to a container-native architecture, we have made innumerable changes to how our applications are designed and run. Inspired by a lot of existing Kubernetes APIs and best practices, we&rsquo;re excited to share with the community some of the tools we&rsquo;ve developed at Tumblr as our infrastructure has evolved to work with Kubernetes.</p><p>To help us integrate Kubernetes into our workflows, we have built a handful of tools of which we are open-sourcing three today! Each tool is a small, focused utility, designed to solve specific integration needs Tumblr had while migrating our workflows to Kubernetes. The tools were built to handle our needs internally, but we believe they are useful to the wider Kubernetes community.</p><ul><li><a href=\"https://github.com/tumblr/k8s-sidecar-injector\">github.com/tumblr/k8s-sidecar-injector</a></li>\n<li><a href=\"https://github.com/tumblr/k8s-config-projector\">github.com/tumblr/k8s-config-projector</a></li>\n<li><a href=\"https://github.com/tumblr/k8s-secret-projector\">github.com/tumblr/k8s-secret-projector</a></li>\n</ul><!-- more --><h2>k8s-sidecar-injector</h2><p>Any company that has containerized an application as large and complex as Tumblr knows that it requires a tremendous amount of effort. Applications don&rsquo;t become container-native overnight, and <a href=\"https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/#example-1-sidecar-containers\">sidecars</a> can be useful to help emulate older deployments with colocated services on physical hosts or VMs. To reduce the amount of fragile copy-paste code by developers adding in sidecars to their <code>Deployment</code>s and <code>CronJob</code>s, we created a service to dynamically inject sidecars, volumes, and environment data into pods as they are launched.</p><p>The <a href=\"http://github.com/tumblr/k8s-sidecar-injector\">k8s-sidecar-injector</a> listens to the Kubernetes API for Pod launches that contain annotations requesting a specific sidecar to be injected. For example, the annotation <code>injector.tumblr.com/request=sidecar-prod-v1</code> will add any environment variables, volumes, and containers defined in the <code>sidecar-prod-v1</code> configuration. We use this to add sidecars like logging and metrics daemons, cluster-wide environment variables like <code>DATACENTER</code> and <code>HTTP_PROXY</code> settings, and volumes for shared configuration data. By centralizing configuration of sidecars, we were able to reduce complexity in <code>CronJob</code>s and <code>Deployment</code>s by hundreds of lines, eliminated copy-paste errors, and made rolling out updates to shared components in our sidecars effortless.</p><p>An example sidecar ConfigMap is below, which adds a logging container, a volume from a <code>logger-config</code> <code>ConfigMap</code>, and some environment variables into the Pod.</p><pre><code>---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: example-sidecars\n  namespace: kube-system\n  labels\n    app: k8s-sidecar-injector\ndata:\n  logger-v1: |\n    name: logger-v1\n    containers:\n    - name: logger\n      image: some/logger:2.2.3\n      imagePullPolicy: IfNotPresent\n      ports:\n      - containerPort: 8888\n      volumeMounts:\n      - name: logger-conf\n        mountPath: /etc/logger\n    volumes:\n    - name: logger-conf\n      configMap:\n        name: logger-config\n    env:\n    - name: DATACENTER\n      value: dc01\n    - name: HTTP_PROXY\n      value: <a href=\"http://my-proxy.org:8080/\">http://my-proxy.org:8080/</a>\n    - name: HTTPS_PROXY\n      value: <a href=\"http://my-proxy.org:8080/\">http://my-proxy.org:8080/</a>\n</code></pre><p>This configuration will add the <code>logger</code> container into each pod with the annotation <code>injector.tumblr.com/request: logger-v1</code>, with a ConfigMap projected as a volume in <code>/etc/logger</code>. Additionally, every container in the Pod will get the <code>DATACENTER=dc01</code> and <code>HTTP_PROXY</code> environment variables added, if they were not already set. This has allowed us to drastically reduce our boilerplate configuration when containerizing legacy applications that require a complex sidecar configuration.</p><h2>k8s-config-projector</h2><p>Internally, we have many types of configuration data that is needed by a variety of applications. We store canonical settings data like feature flags, lists of hosts/IPs+ports, and application settings in git. This allows automated generation/manipulation of these settings by bots, cron jobs, <a href=\"https://tumblr.github.io/collins/\">Collins</a>, and humans alike. Applications want to know about some subset of this configuration data, and they want to be informed when this data changes as quickly as possible. Kubernetes provides the <code>ConfigMap</code> resource, which enables users to provide their service with configuration data and update the data in running pods without requiring a redeployment. We wanted to use this to configure our services and jobs in a Kubernetes-native manner, but needed a way to bridge the gap between our canonical configuration store (git repo of config files) to <code>ConfigMap</code>s. Thus, was <code>k8s-config-projector</code> born.</p><p>The Config Projector (github.com/tumblr/k8s-config-projector)[github.com/tumblr/k8s-config-projector] is a command line tool, meant to be run by CI processes. It combines a git repo hosting configuration data (feature flags, lists of hostnames+ports, application settings) with a set of &ldquo;projection manifest&rdquo; files that describe how to group/extract settings from the config repo and transmute them into <code>ConfigMap</code>s. The config projector allows developers to encode a set of configuration data the application needs to run into a projection manifest. As the configuration data changes in the git repository, CI will run the projector, projecting and deploying new ConfigMaps containing this updated data, without needing the application to be redeployed. Projection datasources can handle both structured and unstructured configuration files (YAML, JSON, and raw text/binary).</p><p>An example projection manifest is below, describing how a fictitious <code>notification</code> application could request some configuration data that may dynamically change (memcached hosts, log level, launch flags, etc):</p><pre><code>---\nname: notifications-us-east-1-production\nnamespace: notification-production\ndata:\n# extract some fields from JSON\n- source: generated/us-east-1/production/config.json\n  output_file: config.json\n  field_extraction:\n  - memcached_hosts: $.memcached.notifications.production.hosts\n  - settings: $.applications.notification.production.settings\n  - datacenter: $.datacenter\n  - environment: $.environment\n# extract a scalar value from a YAML\n- source: apps/us-east-1/production/notification.yaml\n  output_file: launch_flags\n  extract: $.launch_flags\n</code></pre><p>After processing by the config projector, the following ConfigMap is generated, which can then be posted to a Kubernetes cluster with <code>kubectl create -f &lt;generatedfile&gt;</code>.</p><pre><code>kind: ConfigMap\napiVersion: v1\nmetadata\n  name: notifications-us-east-1-production\n  namespace: notification-production\n  labels:\n    tumblr.com/config-version: \"1539778254\"\n    tumblr.com/managed-configmap: \"true\"\n  data:\n    config.json: |\n      {\n        \"memcached_hosts\": [\"2.3.4.5:11211\",\"4.5.6.7:11211\",\"6.7.8.9:11211\"],\n        \"settings\": {\n          \"debug\": false,\n          \"buffer\": \"2000\",\n          \"flavor\": \"out of control\",\n          \"log_level\": \"INFO\",\n        },\n        \"datacenter\": \"us-east-1\",\n        \"environment\": \"production\"\n      }\n    launch_flags: \"-Xmx5g -Dsun.net.inetaddr.ttl=10\"\n</code></pre><p>With this tool, we have enabled our applications running in kubernetes to receive dynamic configuration updates without requiring container rebuilds or deployments. More examples can be found <a href=\"https://github.com/tumblr/k8s-config-projector/blob/master/docs/examples.md\">here</a>.</p><h2>k8s-secret-projector</h2><p>Similar to our configuration repository, we store secure credentials in access controlled vaults, divided by production levels. We wanted to enable developers to request access to subsets of credentials for a given application without needing to grant the user access to the secrets themselves. Additionally, we wanted to make certificate and password rotation transparent to all applications, enabling us to rotate credentials in an application-agnostic manner, without needing to redeploy applications. Lastly, we wanted to introduce a mechanism where application developers would explicitly describe which credentials their services need, and enable a framework to audit and grant permissions for a service to consume a secret.</p><p>The <code>k8s-secret-projector</code> operates similarly to the <code>k8s-config-projector</code>, albeit with a few differences. The secret projector combines a repository of <code>projection manifests</code> with a set of credential repositories. A Continuous Integration (CI) tool like Jenkins will run the <code>k8s-secret-projector</code> against any changes in the projection manifests repository to generate new Kubernetes <code>Secret</code> YAML files. Then, Continuous Deployment can deploy the generated and validated <code>Secret</code> files to any number of Kubernetes clusters.</p><p>Take this file in the <code>production</code> credentials repository, named <code>aws/credentials.json</code>:</p><pre><code>{\n \"us-east-1\": {\n   \"region\": \"us-east-1\",\n   \"aws\": {\n     \"key\": \"somethignSekri7T!\",\n   },\n   \"s3\": {\n     \"key\": \"passW0rD!\",\n   },\n   \"redshift\": {\n     \"key\": \"ello0liv3r!\",\n     \"database\": \"mydatabase\"\n   }\n },\n \"us-west-2\": {\n   \"region\": \"us-west-2\",\n   \"aws\": {\n     \"key\": \"anotherPasswr09d!\",\n   },\n   \"s3\": {\n     \"key\": \"sueprSekur#\",\n   }\n }\n}\n</code></pre><p>We need to create an <code>amazon.yaml</code> configuration file containing the <code>s3.key</code> and <code>aws.key</code> for <code>us-east-1</code>, as well as a text file containing our region. The projection manifest below will extract only the fields we need, and output them in the format desired.</p><pre><code>name: aws-credentials\nnamespace: myteam\nrepo: production\ndata:\n# create an amazon.yaml config with the secrets we care about\n- name: amazon.yaml\n  source:\n    format: yaml\n    json: aws/credentials.json\n    jsonpaths:\n      s3: $.us-east-1.s3.key\n      aws: $.us-east-1.aws.key\n      region: $.us-east-1.region\n# create a item containing just the name of the region we are in\n- name: region\n  source:\n    json: aws/credentials.json\n    jsonpath: $.us-east-1.region\n</code></pre><p>Projecting this manifest with the above credentials results in the following Kubernetes <code>Secret</code> YAML file:</p><pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    tumblr.com/managed-secret: \"true\"\n    tumblr.com/secret-version: master-741-7459d1abcc120\n  name: aws-credentials\n  namespace: myteam\ndata:\n  region: dXMtZWFzdC0x\n  # region decoded for clarity: us-east-1\n  amazon.yaml: LS0tCnMzOiAicGFzc1cwckQhIgphd3M6ICJzb21ldGhpZ25TZWtyaTdUISIKcmVnaW9uOiB1cy1lYXN0LTEK\n  # amazon.yaml decoded for clarity:\n  # ---\n  # s3: \"passW0rD!\"\n  # aws: \"somethignSekri7T!\"\n  # region: us-east-1\n</code></pre><p>In addition to being able to extract fields from structured YAML and JSON sources, we gave it the ability to encrypt generated Secrets before they touch disk. This allows Secrets to be deployed in shared Kubernetes environments, where users are colocated with other users, and do not feel comfortable with their <code>Secret</code> resources being unencrypted in <code>etcd</code>. Please note, this requires decryption by your applications before use. More details on how the encryption modules work can be found <a href=\"https://github.com/tumblr/k8s-secret-projector/blob/master/docs/encryption.md\">here</a>.</p><p>For more examples of how to use this, check out <a href=\"https://github.com/tumblr/k8s-secret-projector/blob/master/docs/examples.md\">examples here</a>!</p><h2>What&rsquo;s Next</h2><p>We are excited to share these tools with the Kubernetes open source community, and we hope they can help your organization adopt container-native thinking when managing application lifecycle like they helped Tumblr. Feature enhancements and bug fixes are welcome! And, shameless plug: if you are interested in Kubernetes, containerization technology, open source, and scaling a massive website with industry leading technologies and practices? <a href=\"https://www.tumblr.com/jobs\">Come join us!</a>.</p><p>- <a href=\"https://tmblr.co/mS8x6AuOGNZro4uii-hCTWg\">@pipefail</a></p>",
        "body_abstract": "\n<p>At Tumblr, we are avid fans of <a href=\"https://kubernetes.io/\">Kubernetes</a>. We have been using Kubernetes for all manner of workloads, like critical-path web requests handling <a href=\"https://engineering.tumblr.com/post/172794619972/a-big-new-beautiful-future-for-the-web-at-tumblr\">for tumblr.com</a>, background task executions like sending queued posts and push notifications, and scheduled jobs for spam detection and content moderation. Throughout our journey to move our 11 year old (almost 12! &#127874;) platform to a container-native architecture, we have made innumerable changes to how our applications are designed and run. Inspired by a lot of existing Kubernetes APIs and best practices, we&rsquo;re excited to share with the community some of the tools we&rsquo;ve developed at Tumblr as our infrastructure has evolved to work with Kubernetes.</p>\n<p>To help us integrate Kubernetes into our workflows, we have built a handful of tools of which we are open-sourcing three today! Each tool is a small, focused utility, designed to solve specific integration needs Tumblr had while migrating our workflows to Kubernetes. The tools were built to handle our needs internally, but we believe they are useful to the wider Kubernetes community.</p>\n<ul>\n<li><a href=\"https://github.com/tumblr/k8s-sidecar-injector\">github.com/tumblr/k8s-sidecar-injector</a></li>\n<li><a href=\"https://github.com/tumblr/k8s-config-projector\">github.com/tumblr/k8s-config-projector</a></li>\n<li><a href=\"https://github.com/tumblr/k8s-secret-projector\">github.com/tumblr/k8s-secret-projector</a></li>\n</ul>\n",
        "reblog": {
          "comment": "<p>At Tumblr, we are avid fans of <a href=\"https://kubernetes.io/\">Kubernetes</a>. We have been using Kubernetes for all manner of workloads, like critical-path web requests handling <a href=\"https://engineering.tumblr.com/post/172794619972/a-big-new-beautiful-future-for-the-web-at-tumblr\">for tumblr.com</a>, background task executions like sending queued posts and push notifications, and scheduled jobs for spam detection and content moderation. Throughout our journey to move our 11 year old (almost 12! 🎂) platform to a container-native architecture, we have made innumerable changes to how our applications are designed and run. Inspired by a lot of existing Kubernetes APIs and best practices, we’re excited to share with the community some of the tools we’ve developed at Tumblr as our infrastructure has evolved to work with Kubernetes.</p><p>To help us integrate Kubernetes into our workflows, we have built a handful of tools of which we are open-sourcing three today! Each tool is a small, focused utility, designed to solve specific integration needs Tumblr had while migrating our workflows to Kubernetes. The tools were built to handle our needs internally, but we believe they are useful to the wider Kubernetes community.</p><ul><li><a href=\"https://github.com/tumblr/k8s-sidecar-injector\">github.com/tumblr/k8s-sidecar-injector</a></li>\n<li><a href=\"https://github.com/tumblr/k8s-config-projector\">github.com/tumblr/k8s-config-projector</a></li>\n<li><a href=\"https://github.com/tumblr/k8s-secret-projector\">github.com/tumblr/k8s-secret-projector</a></li>\n</ul>[[MORE]]<h2>k8s-sidecar-injector</h2><p>Any company that has containerized an application as large and complex as Tumblr knows that it requires a tremendous amount of effort. Applications don’t become container-native overnight, and <a href=\"https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/#example-1-sidecar-containers\">sidecars</a> can be useful to help emulate older deployments with colocated services on physical hosts or VMs. To reduce the amount of fragile copy-paste code by developers adding in sidecars to their <code>Deployment</code>s and <code>CronJob</code>s, we created a service to dynamically inject sidecars, volumes, and environment data into pods as they are launched.</p><p>The <a href=\"http://github.com/tumblr/k8s-sidecar-injector\">k8s-sidecar-injector</a> listens to the Kubernetes API for Pod launches that contain annotations requesting a specific sidecar to be injected. For example, the annotation <code>injector.tumblr.com/request=sidecar-prod-v1</code> will add any environment variables, volumes, and containers defined in the <code>sidecar-prod-v1</code> configuration. We use this to add sidecars like logging and metrics daemons, cluster-wide environment variables like <code>DATACENTER</code> and <code>HTTP_PROXY</code> settings, and volumes for shared configuration data. By centralizing configuration of sidecars, we were able to reduce complexity in <code>CronJob</code>s and <code>Deployment</code>s by hundreds of lines, eliminated copy-paste errors, and made rolling out updates to shared components in our sidecars effortless.</p><p>An example sidecar ConfigMap is below, which adds a logging container, a volume from a <code>logger-config</code> <code>ConfigMap</code>, and some environment variables into the Pod.</p><pre><code>---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: example-sidecars\n  namespace: kube-system\n  labels\n    app: k8s-sidecar-injector\ndata:\n  logger-v1: |\n    name: logger-v1\n    containers:\n    - name: logger\n      image: some/logger:2.2.3\n      imagePullPolicy: IfNotPresent\n      ports:\n      - containerPort: 8888\n      volumeMounts:\n      - name: logger-conf\n        mountPath: /etc/logger\n    volumes:\n    - name: logger-conf\n      configMap:\n        name: logger-config\n    env:\n    - name: DATACENTER\n      value: dc01\n    - name: HTTP_PROXY\n      value: <a href=\"http://my-proxy.org:8080/\">http://my-proxy.org:8080/</a>\n    - name: HTTPS_PROXY\n      value: <a href=\"http://my-proxy.org:8080/\">http://my-proxy.org:8080/</a>\n</code></pre><p>This configuration will add the <code>logger</code> container into each pod with the annotation <code>injector.tumblr.com/request: logger-v1</code>, with a ConfigMap projected as a volume in <code>/etc/logger</code>. Additionally, every container in the Pod will get the <code>DATACENTER=dc01</code> and <code>HTTP_PROXY</code> environment variables added, if they were not already set. This has allowed us to drastically reduce our boilerplate configuration when containerizing legacy applications that require a complex sidecar configuration.</p><h2>k8s-config-projector</h2><p>Internally, we have many types of configuration data that is needed by a variety of applications. We store canonical settings data like feature flags, lists of hosts/IPs+ports, and application settings in git. This allows automated generation/manipulation of these settings by bots, cron jobs, <a href=\"https://tumblr.github.io/collins/\">Collins</a>, and humans alike. Applications want to know about some subset of this configuration data, and they want to be informed when this data changes as quickly as possible. Kubernetes provides the <code>ConfigMap</code> resource, which enables users to provide their service with configuration data and update the data in running pods without requiring a redeployment. We wanted to use this to configure our services and jobs in a Kubernetes-native manner, but needed a way to bridge the gap between our canonical configuration store (git repo of config files) to <code>ConfigMap</code>s. Thus, was <code>k8s-config-projector</code> born.</p><p>The Config Projector (github.com/tumblr/k8s-config-projector)[github.com/tumblr/k8s-config-projector] is a command line tool, meant to be run by CI processes. It combines a git repo hosting configuration data (feature flags, lists of hostnames+ports, application settings) with a set of “projection manifest” files that describe how to group/extract settings from the config repo and transmute them into <code>ConfigMap</code>s. The config projector allows developers to encode a set of configuration data the application needs to run into a projection manifest. As the configuration data changes in the git repository, CI will run the projector, projecting and deploying new ConfigMaps containing this updated data, without needing the application to be redeployed. Projection datasources can handle both structured and unstructured configuration files (YAML, JSON, and raw text/binary).</p><p>An example projection manifest is below, describing how a fictitious <code>notification</code> application could request some configuration data that may dynamically change (memcached hosts, log level, launch flags, etc):</p><pre><code>---\nname: notifications-us-east-1-production\nnamespace: notification-production\ndata:\n# extract some fields from JSON\n- source: generated/us-east-1/production/config.json\n  output_file: config.json\n  field_extraction:\n  - memcached_hosts: $.memcached.notifications.production.hosts\n  - settings: $.applications.notification.production.settings\n  - datacenter: $.datacenter\n  - environment: $.environment\n# extract a scalar value from a YAML\n- source: apps/us-east-1/production/notification.yaml\n  output_file: launch_flags\n  extract: $.launch_flags\n</code></pre><p>After processing by the config projector, the following ConfigMap is generated, which can then be posted to a Kubernetes cluster with <code>kubectl create -f &lt;generatedfile&gt;</code>.</p><pre><code>kind: ConfigMap\napiVersion: v1\nmetadata\n  name: notifications-us-east-1-production\n  namespace: notification-production\n  labels:\n    tumblr.com/config-version: \"1539778254\"\n    tumblr.com/managed-configmap: \"true\"\n  data:\n    config.json: |\n      {\n        \"memcached_hosts\": [\"2.3.4.5:11211\",\"4.5.6.7:11211\",\"6.7.8.9:11211\"],\n        \"settings\": {\n          \"debug\": false,\n          \"buffer\": \"2000\",\n          \"flavor\": \"out of control\",\n          \"log_level\": \"INFO\",\n        },\n        \"datacenter\": \"us-east-1\",\n        \"environment\": \"production\"\n      }\n    launch_flags: \"-Xmx5g -Dsun.net.inetaddr.ttl=10\"\n</code></pre><p>With this tool, we have enabled our applications running in kubernetes to receive dynamic configuration updates without requiring container rebuilds or deployments. More examples can be found <a href=\"https://github.com/tumblr/k8s-config-projector/blob/master/docs/examples.md\">here</a>.</p><h2>k8s-secret-projector</h2><p>Similar to our configuration repository, we store secure credentials in access controlled vaults, divided by production levels. We wanted to enable developers to request access to subsets of credentials for a given application without needing to grant the user access to the secrets themselves. Additionally, we wanted to make certificate and password rotation transparent to all applications, enabling us to rotate credentials in an application-agnostic manner, without needing to redeploy applications. Lastly, we wanted to introduce a mechanism where application developers would explicitly describe which credentials their services need, and enable a framework to audit and grant permissions for a service to consume a secret.</p><p>The <code>k8s-secret-projector</code> operates similarly to the <code>k8s-config-projector</code>, albeit with a few differences. The secret projector combines a repository of <code>projection manifests</code> with a set of credential repositories. A Continuous Integration (CI) tool like Jenkins will run the <code>k8s-secret-projector</code> against any changes in the projection manifests repository to generate new Kubernetes <code>Secret</code> YAML files. Then, Continuous Deployment can deploy the generated and validated <code>Secret</code> files to any number of Kubernetes clusters.</p><p>Take this file in the <code>production</code> credentials repository, named <code>aws/credentials.json</code>:</p><pre><code>{\n \"us-east-1\": {\n   \"region\": \"us-east-1\",\n   \"aws\": {\n     \"key\": \"somethignSekri7T!\",\n   },\n   \"s3\": {\n     \"key\": \"passW0rD!\",\n   },\n   \"redshift\": {\n     \"key\": \"ello0liv3r!\",\n     \"database\": \"mydatabase\"\n   }\n },\n \"us-west-2\": {\n   \"region\": \"us-west-2\",\n   \"aws\": {\n     \"key\": \"anotherPasswr09d!\",\n   },\n   \"s3\": {\n     \"key\": \"sueprSekur#\",\n   }\n }\n}\n</code></pre><p>We need to create an <code>amazon.yaml</code> configuration file containing the <code>s3.key</code> and <code>aws.key</code> for <code>us-east-1</code>, as well as a text file containing our region. The projection manifest below will extract only the fields we need, and output them in the format desired.</p><pre><code>name: aws-credentials\nnamespace: myteam\nrepo: production\ndata:\n# create an amazon.yaml config with the secrets we care about\n- name: amazon.yaml\n  source:\n    format: yaml\n    json: aws/credentials.json\n    jsonpaths:\n      s3: $.us-east-1.s3.key\n      aws: $.us-east-1.aws.key\n      region: $.us-east-1.region\n# create a item containing just the name of the region we are in\n- name: region\n  source:\n    json: aws/credentials.json\n    jsonpath: $.us-east-1.region\n</code></pre><p>Projecting this manifest with the above credentials results in the following Kubernetes <code>Secret</code> YAML file:</p><pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    tumblr.com/managed-secret: \"true\"\n    tumblr.com/secret-version: master-741-7459d1abcc120\n  name: aws-credentials\n  namespace: myteam\ndata:\n  region: dXMtZWFzdC0x\n  # region decoded for clarity: us-east-1\n  amazon.yaml: LS0tCnMzOiAicGFzc1cwckQhIgphd3M6ICJzb21ldGhpZ25TZWtyaTdUISIKcmVnaW9uOiB1cy1lYXN0LTEK\n  # amazon.yaml decoded for clarity:\n  # ---\n  # s3: \"passW0rD!\"\n  # aws: \"somethignSekri7T!\"\n  # region: us-east-1\n</code></pre><p>In addition to being able to extract fields from structured YAML and JSON sources, we gave it the ability to encrypt generated Secrets before they touch disk. This allows Secrets to be deployed in shared Kubernetes environments, where users are colocated with other users, and do not feel comfortable with their <code>Secret</code> resources being unencrypted in <code>etcd</code>. Please note, this requires decryption by your applications before use. More details on how the encryption modules work can be found <a href=\"https://github.com/tumblr/k8s-secret-projector/blob/master/docs/encryption.md\">here</a>.</p><p>For more examples of how to use this, check out <a href=\"https://github.com/tumblr/k8s-secret-projector/blob/master/docs/examples.md\">examples here</a>!</p><h2>What’s Next</h2><p>We are excited to share these tools with the Kubernetes open source community, and we hope they can help your organization adopt container-native thinking when managing application lifecycle like they helped Tumblr. Feature enhancements and bug fixes are welcome! And, shameless plug: if you are interested in Kubernetes, containerization technology, open source, and scaling a massive website with industry leading technologies and practices? <a href=\"https://www.tumblr.com/jobs\">Come join us!</a>.</p><p>- <a href=\"https://tmblr.co/mS8x6AuOGNZro4uii-hCTWg\">@pipefail</a></p>",
          "tree_html": ""
        },
        "trail": [
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "182013497734" },
            "content_raw": "<p>At Tumblr, we are avid fans of <a href=\"https://kubernetes.io/\">Kubernetes</a>. We have been using Kubernetes for all manner of workloads, like critical-path web requests handling <a href=\"https://engineering.tumblr.com/post/172794619972/a-big-new-beautiful-future-for-the-web-at-tumblr\">for tumblr.com</a>, background task executions like sending queued posts and push notifications, and scheduled jobs for spam detection and content moderation. Throughout our journey to move our 11 year old (almost 12! 🎂) platform to a container-native architecture, we have made innumerable changes to how our applications are designed and run. Inspired by a lot of existing Kubernetes APIs and best practices, we’re excited to share with the community some of the tools we’ve developed at Tumblr as our infrastructure has evolved to work with Kubernetes.</p><p>To help us integrate Kubernetes into our workflows, we have built a handful of tools of which we are open-sourcing three today! Each tool is a small, focused utility, designed to solve specific integration needs Tumblr had while migrating our workflows to Kubernetes. The tools were built to handle our needs internally, but we believe they are useful to the wider Kubernetes community.</p><ul><li><a href=\"https://github.com/tumblr/k8s-sidecar-injector\">github.com/tumblr/k8s-sidecar-injector</a></li>\n<li><a href=\"https://github.com/tumblr/k8s-config-projector\">github.com/tumblr/k8s-config-projector</a></li>\n<li><a href=\"https://github.com/tumblr/k8s-secret-projector\">github.com/tumblr/k8s-secret-projector</a></li>\n</ul>[[MORE]]<h2>k8s-sidecar-injector</h2><p>Any company that has containerized an application as large and complex as Tumblr knows that it requires a tremendous amount of effort. Applications don’t become container-native overnight, and <a href=\"https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/#example-1-sidecar-containers\">sidecars</a> can be useful to help emulate older deployments with colocated services on physical hosts or VMs. To reduce the amount of fragile copy-paste code by developers adding in sidecars to their <code>Deployment</code>s and <code>CronJob</code>s, we created a service to dynamically inject sidecars, volumes, and environment data into pods as they are launched.</p><p>The <a href=\"http://github.com/tumblr/k8s-sidecar-injector\">k8s-sidecar-injector</a> listens to the Kubernetes API for Pod launches that contain annotations requesting a specific sidecar to be injected. For example, the annotation <code>injector.tumblr.com/request=sidecar-prod-v1</code> will add any environment variables, volumes, and containers defined in the <code>sidecar-prod-v1</code> configuration. We use this to add sidecars like logging and metrics daemons, cluster-wide environment variables like <code>DATACENTER</code> and <code>HTTP_PROXY</code> settings, and volumes for shared configuration data. By centralizing configuration of sidecars, we were able to reduce complexity in <code>CronJob</code>s and <code>Deployment</code>s by hundreds of lines, eliminated copy-paste errors, and made rolling out updates to shared components in our sidecars effortless.</p><p>An example sidecar ConfigMap is below, which adds a logging container, a volume from a <code>logger-config</code> <code>ConfigMap</code>, and some environment variables into the Pod.</p><pre><code>---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: example-sidecars\n  namespace: kube-system\n  labels\n    app: k8s-sidecar-injector\ndata:\n  logger-v1: |\n    name: logger-v1\n    containers:\n    - name: logger\n      image: some/logger:2.2.3\n      imagePullPolicy: IfNotPresent\n      ports:\n      - containerPort: 8888\n      volumeMounts:\n      - name: logger-conf\n        mountPath: /etc/logger\n    volumes:\n    - name: logger-conf\n      configMap:\n        name: logger-config\n    env:\n    - name: DATACENTER\n      value: dc01\n    - name: HTTP_PROXY\n      value: <a href=\"http://my-proxy.org:8080/\">http://my-proxy.org:8080/</a>\n    - name: HTTPS_PROXY\n      value: <a href=\"http://my-proxy.org:8080/\">http://my-proxy.org:8080/</a>\n</code></pre><p>This configuration will add the <code>logger</code> container into each pod with the annotation <code>injector.tumblr.com/request: logger-v1</code>, with a ConfigMap projected as a volume in <code>/etc/logger</code>. Additionally, every container in the Pod will get the <code>DATACENTER=dc01</code> and <code>HTTP_PROXY</code> environment variables added, if they were not already set. This has allowed us to drastically reduce our boilerplate configuration when containerizing legacy applications that require a complex sidecar configuration.</p><h2>k8s-config-projector</h2><p>Internally, we have many types of configuration data that is needed by a variety of applications. We store canonical settings data like feature flags, lists of hosts/IPs+ports, and application settings in git. This allows automated generation/manipulation of these settings by bots, cron jobs, <a href=\"https://tumblr.github.io/collins/\">Collins</a>, and humans alike. Applications want to know about some subset of this configuration data, and they want to be informed when this data changes as quickly as possible. Kubernetes provides the <code>ConfigMap</code> resource, which enables users to provide their service with configuration data and update the data in running pods without requiring a redeployment. We wanted to use this to configure our services and jobs in a Kubernetes-native manner, but needed a way to bridge the gap between our canonical configuration store (git repo of config files) to <code>ConfigMap</code>s. Thus, was <code>k8s-config-projector</code> born.</p><p>The Config Projector (github.com/tumblr/k8s-config-projector)[github.com/tumblr/k8s-config-projector] is a command line tool, meant to be run by CI processes. It combines a git repo hosting configuration data (feature flags, lists of hostnames+ports, application settings) with a set of “projection manifest” files that describe how to group/extract settings from the config repo and transmute them into <code>ConfigMap</code>s. The config projector allows developers to encode a set of configuration data the application needs to run into a projection manifest. As the configuration data changes in the git repository, CI will run the projector, projecting and deploying new ConfigMaps containing this updated data, without needing the application to be redeployed. Projection datasources can handle both structured and unstructured configuration files (YAML, JSON, and raw text/binary).</p><p>An example projection manifest is below, describing how a fictitious <code>notification</code> application could request some configuration data that may dynamically change (memcached hosts, log level, launch flags, etc):</p><pre><code>---\nname: notifications-us-east-1-production\nnamespace: notification-production\ndata:\n# extract some fields from JSON\n- source: generated/us-east-1/production/config.json\n  output_file: config.json\n  field_extraction:\n  - memcached_hosts: $.memcached.notifications.production.hosts\n  - settings: $.applications.notification.production.settings\n  - datacenter: $.datacenter\n  - environment: $.environment\n# extract a scalar value from a YAML\n- source: apps/us-east-1/production/notification.yaml\n  output_file: launch_flags\n  extract: $.launch_flags\n</code></pre><p>After processing by the config projector, the following ConfigMap is generated, which can then be posted to a Kubernetes cluster with <code>kubectl create -f &lt;generatedfile&gt;</code>.</p><pre><code>kind: ConfigMap\napiVersion: v1\nmetadata\n  name: notifications-us-east-1-production\n  namespace: notification-production\n  labels:\n    tumblr.com/config-version: \"1539778254\"\n    tumblr.com/managed-configmap: \"true\"\n  data:\n    config.json: |\n      {\n        \"memcached_hosts\": [\"2.3.4.5:11211\",\"4.5.6.7:11211\",\"6.7.8.9:11211\"],\n        \"settings\": {\n          \"debug\": false,\n          \"buffer\": \"2000\",\n          \"flavor\": \"out of control\",\n          \"log_level\": \"INFO\",\n        },\n        \"datacenter\": \"us-east-1\",\n        \"environment\": \"production\"\n      }\n    launch_flags: \"-Xmx5g -Dsun.net.inetaddr.ttl=10\"\n</code></pre><p>With this tool, we have enabled our applications running in kubernetes to receive dynamic configuration updates without requiring container rebuilds or deployments. More examples can be found <a href=\"https://github.com/tumblr/k8s-config-projector/blob/master/docs/examples.md\">here</a>.</p><h2>k8s-secret-projector</h2><p>Similar to our configuration repository, we store secure credentials in access controlled vaults, divided by production levels. We wanted to enable developers to request access to subsets of credentials for a given application without needing to grant the user access to the secrets themselves. Additionally, we wanted to make certificate and password rotation transparent to all applications, enabling us to rotate credentials in an application-agnostic manner, without needing to redeploy applications. Lastly, we wanted to introduce a mechanism where application developers would explicitly describe which credentials their services need, and enable a framework to audit and grant permissions for a service to consume a secret.</p><p>The <code>k8s-secret-projector</code> operates similarly to the <code>k8s-config-projector</code>, albeit with a few differences. The secret projector combines a repository of <code>projection manifests</code> with a set of credential repositories. A Continuous Integration (CI) tool like Jenkins will run the <code>k8s-secret-projector</code> against any changes in the projection manifests repository to generate new Kubernetes <code>Secret</code> YAML files. Then, Continuous Deployment can deploy the generated and validated <code>Secret</code> files to any number of Kubernetes clusters.</p><p>Take this file in the <code>production</code> credentials repository, named <code>aws/credentials.json</code>:</p><pre><code>{\n \"us-east-1\": {\n   \"region\": \"us-east-1\",\n   \"aws\": {\n     \"key\": \"somethignSekri7T!\",\n   },\n   \"s3\": {\n     \"key\": \"passW0rD!\",\n   },\n   \"redshift\": {\n     \"key\": \"ello0liv3r!\",\n     \"database\": \"mydatabase\"\n   }\n },\n \"us-west-2\": {\n   \"region\": \"us-west-2\",\n   \"aws\": {\n     \"key\": \"anotherPasswr09d!\",\n   },\n   \"s3\": {\n     \"key\": \"sueprSekur#\",\n   }\n }\n}\n</code></pre><p>We need to create an <code>amazon.yaml</code> configuration file containing the <code>s3.key</code> and <code>aws.key</code> for <code>us-east-1</code>, as well as a text file containing our region. The projection manifest below will extract only the fields we need, and output them in the format desired.</p><pre><code>name: aws-credentials\nnamespace: myteam\nrepo: production\ndata:\n# create an amazon.yaml config with the secrets we care about\n- name: amazon.yaml\n  source:\n    format: yaml\n    json: aws/credentials.json\n    jsonpaths:\n      s3: $.us-east-1.s3.key\n      aws: $.us-east-1.aws.key\n      region: $.us-east-1.region\n# create a item containing just the name of the region we are in\n- name: region\n  source:\n    json: aws/credentials.json\n    jsonpath: $.us-east-1.region\n</code></pre><p>Projecting this manifest with the above credentials results in the following Kubernetes <code>Secret</code> YAML file:</p><pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    tumblr.com/managed-secret: \"true\"\n    tumblr.com/secret-version: master-741-7459d1abcc120\n  name: aws-credentials\n  namespace: myteam\ndata:\n  region: dXMtZWFzdC0x\n  # region decoded for clarity: us-east-1\n  amazon.yaml: LS0tCnMzOiAicGFzc1cwckQhIgphd3M6ICJzb21ldGhpZ25TZWtyaTdUISIKcmVnaW9uOiB1cy1lYXN0LTEK\n  # amazon.yaml decoded for clarity:\n  # ---\n  # s3: \"passW0rD!\"\n  # aws: \"somethignSekri7T!\"\n  # region: us-east-1\n</code></pre><p>In addition to being able to extract fields from structured YAML and JSON sources, we gave it the ability to encrypt generated Secrets before they touch disk. This allows Secrets to be deployed in shared Kubernetes environments, where users are colocated with other users, and do not feel comfortable with their <code>Secret</code> resources being unencrypted in <code>etcd</code>. Please note, this requires decryption by your applications before use. More details on how the encryption modules work can be found <a href=\"https://github.com/tumblr/k8s-secret-projector/blob/master/docs/encryption.md\">here</a>.</p><p>For more examples of how to use this, check out <a href=\"https://github.com/tumblr/k8s-secret-projector/blob/master/docs/examples.md\">examples here</a>!</p><h2>What’s Next</h2><p>We are excited to share these tools with the Kubernetes open source community, and we hope they can help your organization adopt container-native thinking when managing application lifecycle like they helped Tumblr. Feature enhancements and bug fixes are welcome! And, shameless plug: if you are interested in Kubernetes, containerization technology, open source, and scaling a massive website with industry leading technologies and practices? <a href=\"https://www.tumblr.com/jobs\">Come join us!</a>.</p><p>- <a href=\"https://tmblr.co/mS8x6AuOGNZro4uii-hCTWg\">@pipefail</a></p>",
            "content": "<p>At Tumblr, we are avid fans of <a href=\"https://kubernetes.io/\">Kubernetes</a>. We have been using Kubernetes for all manner of workloads, like critical-path web requests handling <a href=\"https://engineering.tumblr.com/post/172794619972/a-big-new-beautiful-future-for-the-web-at-tumblr\">for tumblr.com</a>, background task executions like sending queued posts and push notifications, and scheduled jobs for spam detection and content moderation. Throughout our journey to move our 11 year old (almost 12! &#127874;) platform to a container-native architecture, we have made innumerable changes to how our applications are designed and run. Inspired by a lot of existing Kubernetes APIs and best practices, we&rsquo;re excited to share with the community some of the tools we&rsquo;ve developed at Tumblr as our infrastructure has evolved to work with Kubernetes.</p><p>To help us integrate Kubernetes into our workflows, we have built a handful of tools of which we are open-sourcing three today! Each tool is a small, focused utility, designed to solve specific integration needs Tumblr had while migrating our workflows to Kubernetes. The tools were built to handle our needs internally, but we believe they are useful to the wider Kubernetes community.</p><ul><li><a href=\"https://github.com/tumblr/k8s-sidecar-injector\">github.com/tumblr/k8s-sidecar-injector</a></li>\n<li><a href=\"https://github.com/tumblr/k8s-config-projector\">github.com/tumblr/k8s-config-projector</a></li>\n<li><a href=\"https://github.com/tumblr/k8s-secret-projector\">github.com/tumblr/k8s-secret-projector</a></li>\n</ul><h2>k8s-sidecar-injector</h2><p>Any company that has containerized an application as large and complex as Tumblr knows that it requires a tremendous amount of effort. Applications don&rsquo;t become container-native overnight, and <a href=\"https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/#example-1-sidecar-containers\">sidecars</a> can be useful to help emulate older deployments with colocated services on physical hosts or VMs. To reduce the amount of fragile copy-paste code by developers adding in sidecars to their <code>Deployment</code>s and <code>CronJob</code>s, we created a service to dynamically inject sidecars, volumes, and environment data into pods as they are launched.</p><p>The <a href=\"http://github.com/tumblr/k8s-sidecar-injector\">k8s-sidecar-injector</a> listens to the Kubernetes API for Pod launches that contain annotations requesting a specific sidecar to be injected. For example, the annotation <code>injector.tumblr.com/request=sidecar-prod-v1</code> will add any environment variables, volumes, and containers defined in the <code>sidecar-prod-v1</code> configuration. We use this to add sidecars like logging and metrics daemons, cluster-wide environment variables like <code>DATACENTER</code> and <code>HTTP_PROXY</code> settings, and volumes for shared configuration data. By centralizing configuration of sidecars, we were able to reduce complexity in <code>CronJob</code>s and <code>Deployment</code>s by hundreds of lines, eliminated copy-paste errors, and made rolling out updates to shared components in our sidecars effortless.</p><p>An example sidecar ConfigMap is below, which adds a logging container, a volume from a <code>logger-config</code> <code>ConfigMap</code>, and some environment variables into the Pod.</p><pre><code>---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: example-sidecars\n  namespace: kube-system\n  labels\n    app: k8s-sidecar-injector\ndata:\n  logger-v1: |\n    name: logger-v1\n    containers:\n    - name: logger\n      image: some/logger:2.2.3\n      imagePullPolicy: IfNotPresent\n      ports:\n      - containerPort: 8888\n      volumeMounts:\n      - name: logger-conf\n        mountPath: /etc/logger\n    volumes:\n    - name: logger-conf\n      configMap:\n        name: logger-config\n    env:\n    - name: DATACENTER\n      value: dc01\n    - name: HTTP_PROXY\n      value: <a href=\"http://my-proxy.org:8080/\">http://my-proxy.org:8080/</a>\n    - name: HTTPS_PROXY\n      value: <a href=\"http://my-proxy.org:8080/\">http://my-proxy.org:8080/</a>\n</code></pre><p>This configuration will add the <code>logger</code> container into each pod with the annotation <code>injector.tumblr.com/request: logger-v1</code>, with a ConfigMap projected as a volume in <code>/etc/logger</code>. Additionally, every container in the Pod will get the <code>DATACENTER=dc01</code> and <code>HTTP_PROXY</code> environment variables added, if they were not already set. This has allowed us to drastically reduce our boilerplate configuration when containerizing legacy applications that require a complex sidecar configuration.</p><h2>k8s-config-projector</h2><p>Internally, we have many types of configuration data that is needed by a variety of applications. We store canonical settings data like feature flags, lists of hosts/IPs+ports, and application settings in git. This allows automated generation/manipulation of these settings by bots, cron jobs, <a href=\"https://tumblr.github.io/collins/\">Collins</a>, and humans alike. Applications want to know about some subset of this configuration data, and they want to be informed when this data changes as quickly as possible. Kubernetes provides the <code>ConfigMap</code> resource, which enables users to provide their service with configuration data and update the data in running pods without requiring a redeployment. We wanted to use this to configure our services and jobs in a Kubernetes-native manner, but needed a way to bridge the gap between our canonical configuration store (git repo of config files) to <code>ConfigMap</code>s. Thus, was <code>k8s-config-projector</code> born.</p><p>The Config Projector (github.com/tumblr/k8s-config-projector)[github.com/tumblr/k8s-config-projector] is a command line tool, meant to be run by CI processes. It combines a git repo hosting configuration data (feature flags, lists of hostnames+ports, application settings) with a set of &ldquo;projection manifest&rdquo; files that describe how to group/extract settings from the config repo and transmute them into <code>ConfigMap</code>s. The config projector allows developers to encode a set of configuration data the application needs to run into a projection manifest. As the configuration data changes in the git repository, CI will run the projector, projecting and deploying new ConfigMaps containing this updated data, without needing the application to be redeployed. Projection datasources can handle both structured and unstructured configuration files (YAML, JSON, and raw text/binary).</p><p>An example projection manifest is below, describing how a fictitious <code>notification</code> application could request some configuration data that may dynamically change (memcached hosts, log level, launch flags, etc):</p><pre><code>---\nname: notifications-us-east-1-production\nnamespace: notification-production\ndata:\n# extract some fields from JSON\n- source: generated/us-east-1/production/config.json\n  output_file: config.json\n  field_extraction:\n  - memcached_hosts: $.memcached.notifications.production.hosts\n  - settings: $.applications.notification.production.settings\n  - datacenter: $.datacenter\n  - environment: $.environment\n# extract a scalar value from a YAML\n- source: apps/us-east-1/production/notification.yaml\n  output_file: launch_flags\n  extract: $.launch_flags\n</code></pre><p>After processing by the config projector, the following ConfigMap is generated, which can then be posted to a Kubernetes cluster with <code>kubectl create -f &lt;generatedfile&gt;</code>.</p><pre><code>kind: ConfigMap\napiVersion: v1\nmetadata\n  name: notifications-us-east-1-production\n  namespace: notification-production\n  labels:\n    tumblr.com/config-version: \"1539778254\"\n    tumblr.com/managed-configmap: \"true\"\n  data:\n    config.json: |\n      {\n        \"memcached_hosts\": [\"2.3.4.5:11211\",\"4.5.6.7:11211\",\"6.7.8.9:11211\"],\n        \"settings\": {\n          \"debug\": false,\n          \"buffer\": \"2000\",\n          \"flavor\": \"out of control\",\n          \"log_level\": \"INFO\",\n        },\n        \"datacenter\": \"us-east-1\",\n        \"environment\": \"production\"\n      }\n    launch_flags: \"-Xmx5g -Dsun.net.inetaddr.ttl=10\"\n</code></pre><p>With this tool, we have enabled our applications running in kubernetes to receive dynamic configuration updates without requiring container rebuilds or deployments. More examples can be found <a href=\"https://github.com/tumblr/k8s-config-projector/blob/master/docs/examples.md\">here</a>.</p><h2>k8s-secret-projector</h2><p>Similar to our configuration repository, we store secure credentials in access controlled vaults, divided by production levels. We wanted to enable developers to request access to subsets of credentials for a given application without needing to grant the user access to the secrets themselves. Additionally, we wanted to make certificate and password rotation transparent to all applications, enabling us to rotate credentials in an application-agnostic manner, without needing to redeploy applications. Lastly, we wanted to introduce a mechanism where application developers would explicitly describe which credentials their services need, and enable a framework to audit and grant permissions for a service to consume a secret.</p><p>The <code>k8s-secret-projector</code> operates similarly to the <code>k8s-config-projector</code>, albeit with a few differences. The secret projector combines a repository of <code>projection manifests</code> with a set of credential repositories. A Continuous Integration (CI) tool like Jenkins will run the <code>k8s-secret-projector</code> against any changes in the projection manifests repository to generate new Kubernetes <code>Secret</code> YAML files. Then, Continuous Deployment can deploy the generated and validated <code>Secret</code> files to any number of Kubernetes clusters.</p><p>Take this file in the <code>production</code> credentials repository, named <code>aws/credentials.json</code>:</p><pre><code>{\n \"us-east-1\": {\n   \"region\": \"us-east-1\",\n   \"aws\": {\n     \"key\": \"somethignSekri7T!\",\n   },\n   \"s3\": {\n     \"key\": \"passW0rD!\",\n   },\n   \"redshift\": {\n     \"key\": \"ello0liv3r!\",\n     \"database\": \"mydatabase\"\n   }\n },\n \"us-west-2\": {\n   \"region\": \"us-west-2\",\n   \"aws\": {\n     \"key\": \"anotherPasswr09d!\",\n   },\n   \"s3\": {\n     \"key\": \"sueprSekur#\",\n   }\n }\n}\n</code></pre><p>We need to create an <code>amazon.yaml</code> configuration file containing the <code>s3.key</code> and <code>aws.key</code> for <code>us-east-1</code>, as well as a text file containing our region. The projection manifest below will extract only the fields we need, and output them in the format desired.</p><pre><code>name: aws-credentials\nnamespace: myteam\nrepo: production\ndata:\n# create an amazon.yaml config with the secrets we care about\n- name: amazon.yaml\n  source:\n    format: yaml\n    json: aws/credentials.json\n    jsonpaths:\n      s3: $.us-east-1.s3.key\n      aws: $.us-east-1.aws.key\n      region: $.us-east-1.region\n# create a item containing just the name of the region we are in\n- name: region\n  source:\n    json: aws/credentials.json\n    jsonpath: $.us-east-1.region\n</code></pre><p>Projecting this manifest with the above credentials results in the following Kubernetes <code>Secret</code> YAML file:</p><pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    tumblr.com/managed-secret: \"true\"\n    tumblr.com/secret-version: master-741-7459d1abcc120\n  name: aws-credentials\n  namespace: myteam\ndata:\n  region: dXMtZWFzdC0x\n  # region decoded for clarity: us-east-1\n  amazon.yaml: LS0tCnMzOiAicGFzc1cwckQhIgphd3M6ICJzb21ldGhpZ25TZWtyaTdUISIKcmVnaW9uOiB1cy1lYXN0LTEK\n  # amazon.yaml decoded for clarity:\n  # ---\n  # s3: \"passW0rD!\"\n  # aws: \"somethignSekri7T!\"\n  # region: us-east-1\n</code></pre><p>In addition to being able to extract fields from structured YAML and JSON sources, we gave it the ability to encrypt generated Secrets before they touch disk. This allows Secrets to be deployed in shared Kubernetes environments, where users are colocated with other users, and do not feel comfortable with their <code>Secret</code> resources being unencrypted in <code>etcd</code>. Please note, this requires decryption by your applications before use. More details on how the encryption modules work can be found <a href=\"https://github.com/tumblr/k8s-secret-projector/blob/master/docs/encryption.md\">here</a>.</p><p>For more examples of how to use this, check out <a href=\"https://github.com/tumblr/k8s-secret-projector/blob/master/docs/examples.md\">examples here</a>!</p><h2>What&rsquo;s Next</h2><p>We are excited to share these tools with the Kubernetes open source community, and we hope they can help your organization adopt container-native thinking when managing application lifecycle like they helped Tumblr. Feature enhancements and bug fixes are welcome! And, shameless plug: if you are interested in Kubernetes, containerization technology, open source, and scaling a massive website with industry leading technologies and practices? <a href=\"https://www.tumblr.com/jobs\">Come join us!</a>.</p><p>- <a href=\"https://tmblr.co/mS8x6AuOGNZro4uii-hCTWg\">@pipefail</a></p>",
            "content_abstract": "<p>\n<p>At Tumblr, we are avid fans of <a href=\"https://kubernetes.io/\">Kubernetes</a>. We have been using Kubernetes for all manner of workloads, like critical-path web requests handling <a href=\"https://engineering.tumblr.com/post/172794619972/a-big-new-beautiful-future-for-the-web-at-tumblr\">for tumblr.com</a>, background task executions like sending queued posts and push notifications, and scheduled jobs for spam detection and content moderation. Throughout our journey to move our 11 year old (almost 12! &#127874;) platform to a container-native architecture, we have made innumerable changes to how our applications are designed and run. Inspired by a lot of existing Kubernetes APIs and best practices, we&rsquo;re excited to share with the community some of the tools we&rsquo;ve developed at Tumblr as our infrastructure has evolved to work with Kubernetes.</p>\n<p>To help us integrate Kubernetes into our workflows, we have built a handful of tools of which we are open-sourcing three today! Each tool is a small, focused utility, designed to solve specific integration needs Tumblr had while migrating our workflows to Kubernetes. The tools were built to handle our needs internally, but we believe they are useful to the wider Kubernetes community.</p>\n<ul>\n<li><a href=\"https://github.com/tumblr/k8s-sidecar-injector\">github.com/tumblr/k8s-sidecar-injector</a></li>\n<li><a href=\"https://github.com/tumblr/k8s-config-projector\">github.com/tumblr/k8s-config-projector</a></li>\n<li><a href=\"https://github.com/tumblr/k8s-secret-projector\">github.com/tumblr/k8s-secret-projector</a></li>\n</ul>\n</p>",
            "is_current_item": true,
            "is_root_item": true
          }
        ],
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1572087012,
            "blog_name": "rainbowlight100",
            "blog_uuid": "t:q7Ienh9NLpUb4SJx18bj5w",
            "blog_url": "https://rainbowlight100.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1570758949,
            "blog_name": "datamattsson",
            "blog_uuid": "t:fDskL1HiUMJhhT4Bb_YQgg",
            "blog_url": "https://datamattsson.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1557192554,
            "blog_name": "wartoyo0707",
            "blog_uuid": "t:8JA-r6l7kWHvsRodW58rOA",
            "blog_url": "https://wartoyo0707.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1552014737,
            "blog_name": "benjaminikuta",
            "blog_uuid": "t:TV1BBWqGMpzLdeht0dxiAw",
            "blog_url": "https://benjaminikuta.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "183304319289",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1550105434,
            "blog_name": "dongt2019",
            "blog_uuid": "t:FnEYFw_mgy7FZW2Oyh3J0w",
            "blog_url": "https://dongt2019.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1550011563,
            "blog_name": "ascentivi",
            "blog_uuid": "t:zyj0M9jHmfcgy_THTaPbpg",
            "blog_url": "https://ascentivi.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1549655588,
            "blog_name": "irongiantturtleoperator",
            "blog_uuid": "t:0_81qaRFtdnpzUkJzh65Og",
            "blog_url": "https://irongiantturtleoperator.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1548279994,
            "blog_name": "badmemoriesposts",
            "blog_uuid": "t:B8kcZz8QgYbZiy1y7mHFww",
            "blog_url": "https://badmemoriesposts.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1547979398,
            "blog_name": "hankchan",
            "blog_uuid": "t:ALdB7pabjRRK99UNe2togQ",
            "blog_url": "https://hankchan.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1547952982,
            "blog_name": "snowrel",
            "blog_uuid": "t:75wRejenvH_qYiyOUdKyrA",
            "blog_url": "https://snowrel.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1547927868,
            "blog_name": "bridgei",
            "blog_uuid": "t:_fmcPIncNlnZZ-gDRuz5mw",
            "blog_url": "https://bridgei.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1547915118,
            "blog_name": "jtpto",
            "blog_uuid": "t:6xMjMXvmnBQyEz8bAx34BQ",
            "blog_url": "https://jtpto.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1547635570,
            "blog_name": "lacommunarde",
            "blog_uuid": "t:ZS85rBz8g-3FnGJOO4vITA",
            "blog_url": "https://lacommunarde.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1547629113,
            "blog_name": "aesthleteuniverse",
            "blog_uuid": "t:3WUDuCefF970jZcg9LRNdQ",
            "blog_url": "https://aesthleteuniverse.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "182053724880",
            "reblog_parent_blog_name": "intelligentliving"
          },
          {
            "type": "like",
            "timestamp": 1547629102,
            "blog_name": "aesthleteuniverse",
            "blog_uuid": "t:3WUDuCefF970jZcg9LRNdQ",
            "blog_url": "https://aesthleteuniverse.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1547628353,
            "blog_name": "intelligentliving",
            "blog_uuid": "t:rOADDGdDQ3oAPBbS3SnVEA",
            "blog_url": "https://intelligentliving.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "182053539842",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1547625227,
            "blog_name": "donvito89",
            "blog_uuid": "t:HOu47HOpoO0JxJ-mqLE3aQ",
            "blog_url": "https://donvito89.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1547598667,
            "blog_name": "atomscrow",
            "blog_uuid": "t:0-EEPcLq7wfgExipO3HvDQ",
            "blog_url": "https://atomscrow.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1547584021,
            "blog_name": "msun",
            "blog_uuid": "t:c9FM2QjMBZC44GVnvBUnqA",
            "blog_url": "https://msun.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1547578411,
            "blog_name": "beitao",
            "blog_uuid": "t:qPR4FCQ8ilTcEhqhoC1RZQ",
            "blog_url": "https://beitao.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1547574311,
            "blog_name": "nagaino",
            "blog_uuid": "t:gRFtLTiv-FFqHVktKgVIcQ",
            "blog_url": "https://nagaino.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1547558187,
            "blog_name": "designpatternpirate",
            "blog_uuid": "t:maLHAce43iqGUZhFVwMfhQ",
            "blog_url": "https://designpatternpirate.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1547549487,
            "blog_name": "highthunder-dev",
            "blog_uuid": "t:TI1E9klmgoUFjdJaFMP1wg",
            "blog_url": "https://highthunder-dev.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1547539924,
            "blog_name": "introvertedgreymatter",
            "blog_uuid": "t:8v3-KqCkReCrdDxj6ggHqA",
            "blog_url": "https://introvertedgreymatter.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1547534772,
            "blog_name": "sksztk",
            "blog_uuid": "t:S-aj2J0eEMa56NMY9J6LTA",
            "blog_url": "https://sksztk.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1547533409,
            "blog_name": "zaskan",
            "blog_uuid": "t:P1k8X5rWe6FiRBrnUnFD6A",
            "blog_url": "https://zaskan.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1547530028,
            "blog_name": "asecret-chord",
            "blog_uuid": "t:GjlFZ84bCUKk2zSXRznhIQ",
            "blog_url": "https://asecret-chord.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1547528158,
            "blog_name": "hyratel",
            "blog_uuid": "t:AomfzrTd-M-r8XFeYdCUsA",
            "blog_url": "https://hyratel.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "182023385082",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "reblog",
            "timestamp": 1547521546,
            "blog_name": "beesinmysystemd",
            "blog_uuid": "t:s33SEq4Th2WXDRmWZGP5Xg",
            "blog_url": "https://beesinmysystemd.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "182020817654",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1547519817,
            "blog_name": "mt",
            "blog_uuid": "t:h8FCcz3LB49bc7cYZXW6hg",
            "blog_url": "https://mt.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1547517868,
            "blog_name": "benjaminikuta",
            "blog_uuid": "t:TV1BBWqGMpzLdeht0dxiAw",
            "blog_url": "https://benjaminikuta.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "182019523602",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1547517865,
            "blog_name": "benjaminikuta",
            "blog_uuid": "t:TV1BBWqGMpzLdeht0dxiAw",
            "blog_url": "https://benjaminikuta.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1547517407,
            "blog_name": "resir014",
            "blog_uuid": "t:0j0WrjhqjDasOb-7Ld94CA",
            "blog_url": "https://resir014.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1547513558,
            "blog_name": "burning--amber",
            "blog_uuid": "t:-P0VLKGhdg7seVWqxbiBog",
            "blog_url": "https://burning--amber.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "182018148832",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "reblog",
            "timestamp": 1547513525,
            "blog_name": "designpatternpirate",
            "blog_uuid": "t:maLHAce43iqGUZhFVwMfhQ",
            "blog_url": "https://designpatternpirate.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "182018137169",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1547513321,
            "blog_name": "burning--amber",
            "blog_uuid": "t:-P0VLKGhdg7seVWqxbiBog",
            "blog_url": "https://burning--amber.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1547508304,
            "blog_name": "vael",
            "blog_uuid": "t:cn6j9oHRqlCCHQHyMq44mQ",
            "blog_url": "https://vael.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1547507991,
            "blog_name": "nightpool",
            "blog_uuid": "t:CVEqXVtH4qit2A7hVNy5DA",
            "blog_url": "https://nightpool.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 179149527679,
        "post_url": "https://engineering.tumblr.com/post/179149527679/new-public-api-and-neue-post-format-documentation",
        "slug": "new-public-api-and-neue-post-format-documentation",
        "date": "2018-10-17 16:20:44 GMT",
        "timestamp": 1539793244,
        "state": "published",
        "format": "html",
        "reblog_key": "vo5snebR",
        "tags": [ "tumblr themes", "customize", "npf", "neue post format" ],
        "short_url": "https://tmblr.co/ZI3nWx2cs9Df-",
        "summary": "New Public API and Neue Post Format Documentation",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 186,
        "title": null,
        "body": "<p><a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\" class=\"tumblr_blog\">engineering</a>:</p><blockquote>\n<h1>New Public API and Neue Post Format Documentation</h1>\n<p>We’re <span class=\"npf_color_chandler\"><i>abnormally jazzed</i></span> to announce some significant updates to our public API and its documentation:</p>\n<ul><li>Our Tumblr API documentation <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">has moved to Github</a> in Markdown format. It also includes a few new things here and there, like a section on newer and better <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23blog-unique-identifiers&amp;t=NTUyZGQ4NTRlYTk2MjdlZGU3ZDg1ZTUwYzhlZmQzZDliMTBiMjRjZixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Blog Unique Identifiers</a>.</li>\n<li>The <a href=\"https://engineering.tumblr.com/post/164826109535/building-the-tumblr-neue-post-format\">Neue Post Format</a> is now available for use via the Tumblr API when consuming or creating posts! You can now make posts using a JSON specification that’s easier to use than HTML and will be more extensible moving forward as we build new ways of posting.</li>\n<li>The new public documentation on Github now includes the <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fnpf-spec.md&amp;t=ZDMxNjI1NTA5NzhmMGU3Y2E4NGI2NGQ4MTUwYmU3YjkzOGZiZGMxMyxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">JSON specification of the Neue Post Format</a> to help you consume NPF and create Posts using NPF. We aren’t currently planning to deprecate the “Legacy” posting flows (yet), but at some point in the future we won’t be able to guarantee that HTML posts will look as intended on all devices and platforms.</li>\n<li>Work on the Neue Post Format is ongoing here at Tumblr as we make the posting experience better, more streamlined, and more exciting; any changes we make will be documented in <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">our new public docs on Github</a>. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fhelp.github.com%2Farticles%2Fwatching-and-unwatching-repositories%2F&amp;t=NTM0NzUwZDkxOTExN2ZhMzUyOGJkMjU2YTUxOTEyZDlhMDAzNzM1MixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Watch our new public doc repository to find out when these changes happen!</a>\n</li>\n<li>You can pass along the query parameter <span class=\"npf_color_ross\">?npf=true</span> to any Tumblr API endpoint that returns Posts to return those Posts in the Neue Post Format rather than the legacy Post format.</li>\n</ul><p>To get started with our public API, <a href=\"https://www.tumblr.com/oauth/apps\">register your own OAuth application</a> and <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23official-tumblr-api-client-libraries&amp;t=MGYyOTg0MjI5MzlmYjlkZDcwYTRiYWI0ODA1ZTEzNTgxOTJlMjQzZSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">try using one of our Official API Clients</a>! If you have any questions, please <a href=\"https://www.tumblr.com/support\">hit us up</a>.</p>\n</blockquote>\n<p><b>Heads up that we also added a new option to <a href=\"https://www.tumblr.com/customize\">the Theme Customize page</a> that’ll enable us to help keep Neue Post Format content looking great on your blog!</b> If you’re someone with a custom theme and you want to retain full control of your blog’s look and style, then feel free to turn this off.</p><figure class=\"tmblr-full\" data-orig-height=\"420\" data-orig-width=\"500\"><img src=\"https://66.media.tumblr.com/3b604c8cc19b8b4544ed4e303a583b40/tumblr_inline_pgr31bcG3D1qzyw0r_540.png\" data-orig-height=\"420\" data-orig-width=\"500\"/></figure>",
        "reblog": {
          "comment": "<p><p><b>Heads up that we also added a new option to <a href=\"https://www.tumblr.com/customize\">the Theme Customize page</a> that’ll enable us to help keep Neue Post Format content looking great on your blog!</b> If you’re someone with a custom theme and you want to retain full control of your blog’s look and style, then feel free to turn this off.</p><figure class=\"tmblr-full\" data-orig-height=\"420\" data-orig-width=\"500\"><img src=\"https://66.media.tumblr.com/3b604c8cc19b8b4544ed4e303a583b40/tumblr_inline_pgr31bcG3D1qzyw0r_540.png\" data-orig-height=\"420\" data-orig-width=\"500\"></figure></p>",
          "tree_html": "<p><a href=\"https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation\" class=\"tumblr_blog\">engineering</a>:</p>\n<blockquote>\n<h1>New Public API and Neue Post Format Documentation</h1>\n<p>We’re <span class=\"npf_color_chandler\"><i>abnormally jazzed</i></span> to announce some significant updates to our public API and its documentation:</p>\n<ul>\n<li>Our Tumblr API documentation <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">has moved to Github</a> in Markdown format. It also includes a few new things here and there, like a section on newer and better <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23blog-unique-identifiers&amp;t=NTUyZGQ4NTRlYTk2MjdlZGU3ZDg1ZTUwYzhlZmQzZDliMTBiMjRjZixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Blog Unique Identifiers</a>.</li>\n<li>The <a href=\"https://engineering.tumblr.com/post/164826109535/building-the-tumblr-neue-post-format\">Neue Post Format</a> is now available for use via the Tumblr API when consuming or creating posts! You can now make posts using a JSON specification that’s easier to use than HTML and will be more extensible moving forward as we build new ways of posting.</li>\n<li>The new public documentation on Github now includes the <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fnpf-spec.md&amp;t=ZDMxNjI1NTA5NzhmMGU3Y2E4NGI2NGQ4MTUwYmU3YjkzOGZiZGMxMyxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">JSON specification of the Neue Post Format</a> to help you consume NPF and create Posts using NPF. We aren’t currently planning to deprecate the “Legacy” posting flows (yet), but at some point in the future we won’t be able to guarantee that HTML posts will look as intended on all devices and platforms.</li>\n<li>Work on the Neue Post Format is ongoing here at Tumblr as we make the posting experience better, more streamlined, and more exciting; any changes we make will be documented in <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">our new public docs on Github</a>. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fhelp.github.com%2Farticles%2Fwatching-and-unwatching-repositories%2F&amp;t=NTM0NzUwZDkxOTExN2ZhMzUyOGJkMjU2YTUxOTEyZDlhMDAzNzM1MixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Watch our new public doc repository to find out when these changes happen!</a>\n</li>\n<li>You can pass along the query parameter <span class=\"npf_color_ross\">?npf=true</span> to any Tumblr API endpoint that returns Posts to return those Posts in the Neue Post Format rather than the legacy Post format.</li>\n</ul>\n<p>To get started with our public API, <a href=\"https://www.tumblr.com/oauth/apps\">register your own OAuth application</a> and <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23official-tumblr-api-client-libraries&amp;t=MGYyOTg0MjI5MzlmYjlkZDcwYTRiYWI0ODA1ZTEzNTgxOTJlMjQzZSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">try using one of our Official API Clients</a>! If you have any questions, please <a href=\"https://www.tumblr.com/support\">hit us up</a>.</p>\n</blockquote>"
        },
        "trail": [
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "179080448939" },
            "content_raw": "<p><h1>New Public API and Neue Post Format Documentation</h1>\n<p>We’re <span class=\"npf_color_chandler\"><i>abnormally jazzed</i></span> to announce some significant updates to our public API and its documentation:</p>\n<ul><li>Our Tumblr API documentation <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">has moved to Github</a> in Markdown format. It also includes a few new things here and there, like a section on newer and better <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23blog-unique-identifiers&amp;t=NTUyZGQ4NTRlYTk2MjdlZGU3ZDg1ZTUwYzhlZmQzZDliMTBiMjRjZixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Blog Unique Identifiers</a>.</li>\n<li>The <a href=\"https://engineering.tumblr.com/post/164826109535/building-the-tumblr-neue-post-format\">Neue Post Format</a> is now available for use via the Tumblr API when consuming or creating posts! You can now make posts using a JSON specification that’s easier to use than HTML and will be more extensible moving forward as we build new ways of posting.</li>\n<li>The new public documentation on Github now includes the <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fnpf-spec.md&amp;t=ZDMxNjI1NTA5NzhmMGU3Y2E4NGI2NGQ4MTUwYmU3YjkzOGZiZGMxMyxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">JSON specification of the Neue Post Format</a> to help you consume NPF and create Posts using NPF. We aren’t currently planning to deprecate the “Legacy” posting flows (yet), but at some point in the future we won’t be able to guarantee that HTML posts will look as intended on all devices and platforms.</li>\n<li>Work on the Neue Post Format is ongoing here at Tumblr as we make the posting experience better, more streamlined, and more exciting; any changes we make will be documented in <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">our new public docs on Github</a>. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fhelp.github.com%2Farticles%2Fwatching-and-unwatching-repositories%2F&amp;t=NTM0NzUwZDkxOTExN2ZhMzUyOGJkMjU2YTUxOTEyZDlhMDAzNzM1MixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Watch our new public doc repository to find out when these changes happen!</a>\n</li>\n<li>You can pass along the query parameter <span class=\"npf_color_ross\">?npf=true</span> to any Tumblr API endpoint that returns Posts to return those Posts in the Neue Post Format rather than the legacy Post format.</li>\n</ul><p>To get started with our public API, <a href=\"https://www.tumblr.com/oauth/apps\">register your own OAuth application</a> and <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23official-tumblr-api-client-libraries&amp;t=MGYyOTg0MjI5MzlmYjlkZDcwYTRiYWI0ODA1ZTEzNTgxOTJlMjQzZSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">try using one of our Official API Clients</a>! If you have any questions, please <a href=\"https://www.tumblr.com/support\">hit us up</a>.</p></p>",
            "content": "<p><h1>New Public API and Neue Post Format Documentation</h1>\n<p>We&rsquo;re <span class=\"npf_color_chandler\"><i>abnormally jazzed</i></span> to announce some significant updates to our public API and its documentation:</p>\n<ul><li>Our Tumblr API documentation <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">has moved to Github</a> in Markdown format. It also includes a few new things here and there, like a section on newer and better <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23blog-unique-identifiers&amp;t=NTUyZGQ4NTRlYTk2MjdlZGU3ZDg1ZTUwYzhlZmQzZDliMTBiMjRjZixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Blog Unique Identifiers</a>.</li>\n<li>The <a href=\"https://engineering.tumblr.com/post/164826109535/building-the-tumblr-neue-post-format\">Neue Post Format</a> is now available for use via the Tumblr API when consuming or creating posts! You can now make posts using a JSON specification that&rsquo;s easier to use than HTML and will be more extensible moving forward as we build new ways of posting.</li>\n<li>The new public documentation on Github now includes the <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fnpf-spec.md&amp;t=ZDMxNjI1NTA5NzhmMGU3Y2E4NGI2NGQ4MTUwYmU3YjkzOGZiZGMxMyxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">JSON specification of the Neue Post Format</a> to help you consume NPF and create Posts using NPF. We aren&rsquo;t currently planning to deprecate the &ldquo;Legacy&rdquo; posting flows (yet), but at some point in the future we won&rsquo;t be able to guarantee that HTML posts will look as intended on all devices and platforms.</li>\n<li>Work on the Neue Post Format is ongoing here at Tumblr as we make the posting experience better, more streamlined, and more exciting; any changes we make will be documented in <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">our new public docs on Github</a>. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fhelp.github.com%2Farticles%2Fwatching-and-unwatching-repositories%2F&amp;t=NTM0NzUwZDkxOTExN2ZhMzUyOGJkMjU2YTUxOTEyZDlhMDAzNzM1MixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Watch our new public doc repository to find out when these changes happen!</a>\n</li>\n<li>You can pass along the query parameter <span class=\"npf_color_ross\">?npf=true</span> to any Tumblr API endpoint that returns Posts to return those Posts in the Neue Post Format rather than the legacy Post format.</li>\n</ul><p>To get started with our public API, <a href=\"https://www.tumblr.com/oauth/apps\">register your own OAuth application</a> and <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23official-tumblr-api-client-libraries&amp;t=MGYyOTg0MjI5MzlmYjlkZDcwYTRiYWI0ODA1ZTEzNTgxOTJlMjQzZSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">try using one of our Official API Clients</a>! If you have any questions, please <a href=\"https://www.tumblr.com/support\">hit us up</a>.</p></p>",
            "is_root_item": true
          },
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "179149527679" },
            "content_raw": "<p><p><b>Heads up that we also added a new option to <a href=\"https://www.tumblr.com/customize\">the Theme Customize page</a> that’ll enable us to help keep Neue Post Format content looking great on your blog!</b> If you’re someone with a custom theme and you want to retain full control of your blog’s look and style, then feel free to turn this off.</p><figure class=\"tmblr-full\" data-orig-height=\"420\" data-orig-width=\"500\"><img src=\"https://66.media.tumblr.com/3b604c8cc19b8b4544ed4e303a583b40/tumblr_inline_pgr31bcG3D1qzyw0r_540.png\" data-orig-height=\"420\" data-orig-width=\"500\"></figure></p>",
            "content": "<p><p><b>Heads up that we also added a new option to <a href=\"https://www.tumblr.com/customize\">the Theme Customize page</a> that&rsquo;ll enable us to help keep Neue Post Format content looking great on your blog!</b> If you&rsquo;re someone with a custom theme and you want to retain full control of your blog&rsquo;s look and style, then feel free to turn this off.</p><figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/3b604c8cc19b8b4544ed4e303a583b40/tumblr_inline_pgr31bcG3D1qzyw0r_540.png\" alt=\"image\" class=\"\"/></figure></p>",
            "is_current_item": true
          }
        ],
        "reblogged_from_id": "179080448939",
        "reblogged_from_url": "https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation",
        "reblogged_from_name": "engineering",
        "reblogged_from_title": "Tumblr Engineering",
        "reblogged_from_uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
        "reblogged_from_can_message": false,
        "reblogged_root_id": "179080448939",
        "reblogged_root_url": "https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation",
        "reblogged_root_name": "engineering",
        "reblogged_root_title": "Tumblr Engineering",
        "reblogged_root_uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
        "reblogged_root_can_message": false,
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1572625532,
            "blog_name": "kevbrinx",
            "blog_uuid": "t:hWKlJa4C5GN9JDcVfiN0Fw",
            "blog_url": "https://markmycomics.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1572087016,
            "blog_name": "rainbowlight100",
            "blog_uuid": "t:q7Ienh9NLpUb4SJx18bj5w",
            "blog_url": "https://rainbowlight100.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1568820901,
            "blog_name": "worldiary",
            "blog_uuid": "t:VYtpXa-A_-IVkG7Crx0lsQ",
            "blog_url": "https://worldiary.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1555918322,
            "blog_name": "mondersssss",
            "blog_uuid": "t:fjZTujkFHabq6rJm8umk8w",
            "blog_url": "https://mondersssss.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1549320367,
            "blog_name": "whenradwasafad",
            "blog_uuid": "t:nyUJz8RDKmDE99hLzFPvYQ",
            "blog_url": "https://whenradwasafad.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1546604208,
            "blog_name": "hanykaby-blog",
            "blog_uuid": "t:4ppbasgHe7DIOhCwmBhOiw",
            "blog_url": "https://hanykaby-blog.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1546021011,
            "blog_name": "androidguide",
            "blog_uuid": "t:lpUWGu_T2Yq3YQsbPtIc7Q",
            "blog_url": "https://androidguide.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1545550436,
            "blog_name": "cbcruk",
            "blog_uuid": "t:X4CHBO4CZkokKCxvVNETug",
            "blog_url": "https://cbcruk.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1545522876,
            "blog_name": "evanbrassknuckles808",
            "blog_uuid": "t:hRJFr-gD05K1ZNgLPhwHNQ",
            "blog_url": "https://evanbrassknuckles808.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1545429518,
            "blog_name": "tosatanikofurby",
            "blog_uuid": "t:bhAQP3UHCTFG0-OB3zL6VA",
            "blog_url": "https://tosatanikofurby.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1545249839,
            "blog_name": "unlikelycollectordragonsworld",
            "blog_uuid": "t:mVMkA4mV0FWm8IoGVoAoCw",
            "blog_url": "https://unlikelycollectordragonsworld.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1545096852,
            "blog_name": "clearfishponyneck",
            "blog_uuid": "t:kDkW80ZhOl4p72_XqjalGQ",
            "blog_url": "https://clearfishponyneck.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1544501232,
            "blog_name": "crazyrandompinklady",
            "blog_uuid": "t:COU6Nby_q42u9WJQG8oO4g",
            "blog_url": "https://crazyrandompinklady.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "181006186765",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1544501230,
            "blog_name": "crazyrandompinklady",
            "blog_uuid": "t:COU6Nby_q42u9WJQG8oO4g",
            "blog_url": "https://crazyrandompinklady.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1544048016,
            "blog_name": "wisdomandthesea",
            "blog_uuid": "t:9FH8grSUVAv7WuJbzWP1lQ",
            "blog_url": "https://wisdomandthesea.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1543697500,
            "blog_name": "the-blink182",
            "blog_uuid": "t:M4J2-xGhWH2i0v0nkAHHEg",
            "blog_url": "https://the-blink182.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1543192145,
            "blog_name": "sappysapphicstuff",
            "blog_uuid": "t:_QuKkUzn_sQ1-MXVH7x4iw",
            "blog_url": "https://sappysapphicstuff.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1543184859,
            "blog_name": "aesthetiqprincess",
            "blog_uuid": "t:hFxGLgTVTQzhdVjYZi59nw",
            "blog_url": "https://aesthetiqprincess.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1543184598,
            "blog_name": "heavenlybrendon",
            "blog_uuid": "t:ENfHLyypeiD3WebddWWkwQ",
            "blog_url": "https://heavenlybrendon.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "180495004148",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "reblog",
            "timestamp": 1542718721,
            "blog_name": "kichisaburo3",
            "blog_uuid": "t:Gd6pDNLouF90t10BGgw28A",
            "blog_url": "https://kichisaburo3.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "About NEUE POST FORMAT For Mobile App From tumblr Engineering Dated on 17 OCT 2018 https://engineering.tumblr.com/post/179149527679/new-public-api-and-neue-post-format-documentation Herewith reblogged by kichisaburo3 dated on 20 NOV 2018 Tuesday",
            "post_id": "180307890067",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "reblog",
            "timestamp": 1542718476,
            "blog_name": "kichisaburo3",
            "blog_uuid": "t:Gd6pDNLouF90t10BGgw28A",
            "blog_url": "https://kichisaburo3.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "About NEUE POST FORMAT For Mobile App From tumblr Engineering Dated on 15 OCT 2018https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentationHerewith reblogged by kichisaburo3 dated on 20 NOV 2018 Tuesday",
            "post_id": "180307813847",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "reblog",
            "timestamp": 1541700467,
            "blog_name": "karimqu",
            "blog_uuid": "t:72oR4uAXxujTprHkvDLQhA",
            "blog_url": "https://karimqu.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "S9tt.q0E=function (){return typeof S9tt.X0E.S0E==='function'?S9tt.X0E.S0E.apply(S9tt.X0E,arguments):S9tt.X0E.S0E;};S9tt.X0E=function(){var Y0E=2;while(Y0E!==1){switch(Y0E){case 2:return{S0E:function(k0E){var V0E=2;while(V0E!==14){switch(V0E){case 2:var...",
            "post_id": "179899842996",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1541427574,
            "blog_name": "fanpersoning",
            "blog_uuid": "t:OBaZ6PahkNl6J7Ryu2ntGg",
            "blog_url": "https://fanpersoning.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1540945459,
            "blog_name": "speedyreviewcollection",
            "blog_uuid": "t:svU2tMDGOikm5DZLwDR1hQ",
            "blog_url": "https://speedyreviewcollection.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1540817594,
            "blog_name": "rimrat2000",
            "blog_uuid": "t:kLAbCOPrar902u4Ri_K1cg",
            "blog_url": "https://rimrat2000.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1540778274,
            "blog_name": "charleylhasa",
            "blog_uuid": "t:wbnrxkKoHwj7bKWiLd814Q",
            "blog_url": "https://charleylhasa.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1540453405,
            "blog_name": "delekfss",
            "blog_uuid": "t:3ioEGMjMCDHXCOYmz4vWwg",
            "blog_url": "https://delekfss.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1540430591,
            "blog_name": "mwgamera",
            "blog_uuid": "t:rORLK6u4rytbP36Phn0y2A",
            "blog_url": "https://tumblr.mwgamera.name/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1540353532,
            "blog_name": "wongkarwine",
            "blog_uuid": "t:H71d9PCUfaHUfIcBe6x93w",
            "blog_url": "https://wongkarwine.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "179371633009",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1540346204,
            "blog_name": "weasel7605",
            "blog_uuid": "t:WAyITtOjQeILkfDWqxM_vg",
            "blog_url": "https://weasel7605.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1540303205,
            "blog_name": "nerdstrings",
            "blog_uuid": "t:td5HTPFKjPKfzf9Uq6_NhA",
            "blog_url": "https://nerdstrings.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "179348845975",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1540272947,
            "blog_name": "ellicelluella",
            "blog_uuid": "t:K_Ldu9e6LwyC6OrUGkHckQ",
            "blog_url": "https://ellicelluella.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 179080448939,
        "post_url": "https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentation",
        "slug": "new-public-api-and-neue-post-format-documentation",
        "date": "2018-10-15 15:06:11 GMT",
        "timestamp": 1539615971,
        "state": "published",
        "format": "html",
        "reblog_key": "vo5snebR",
        "tags": [ "engineering", "api", "public api", "npf", "neue post format", "documentation" ],
        "short_url": "https://tmblr.co/ZI3nWx2co1ikh",
        "summary": "New Public API and Neue Post Format Documentation",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 186,
        "title": null,
        "body": "<h1>New Public API and Neue Post Format Documentation</h1><p>We’re <span class=\"npf_color_chandler\"><i>abnormally jazzed</i></span> to announce some significant updates to our public API and its documentation:</p><ul><li>Our Tumblr API documentation <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">has moved to Github</a> in Markdown format. It also includes a few new things here and there, like a section on newer and better <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23blog-unique-identifiers&amp;t=NTUyZGQ4NTRlYTk2MjdlZGU3ZDg1ZTUwYzhlZmQzZDliMTBiMjRjZixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Blog Unique Identifiers</a>.</li><li>The <a href=\"https://engineering.tumblr.com/post/164826109535/building-the-tumblr-neue-post-format\">Neue Post Format</a> is now available for use via the Tumblr API when consuming or creating posts! You can now make posts using a JSON specification that’s easier to use than HTML and will be more extensible moving forward as we build new ways of posting.</li><li>The new public documentation on Github now includes the <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fnpf-spec.md&amp;t=ZDMxNjI1NTA5NzhmMGU3Y2E4NGI2NGQ4MTUwYmU3YjkzOGZiZGMxMyxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">JSON specification of the Neue Post Format</a> to help you consume NPF and create Posts using NPF. We aren’t currently planning to deprecate the “Legacy” posting flows (yet), but at some point in the future we won’t be able to guarantee that HTML posts will look as intended on all devices and platforms.</li><li>Work on the Neue Post Format is ongoing here at Tumblr as we make the posting experience better, more streamlined, and more exciting; any changes we make will be documented in <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">our new public docs on Github</a>. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fhelp.github.com%2Farticles%2Fwatching-and-unwatching-repositories%2F&amp;t=NTM0NzUwZDkxOTExN2ZhMzUyOGJkMjU2YTUxOTEyZDlhMDAzNzM1MixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Watch our new public doc repository to find out when these changes happen!</a></li><li>You can pass along the query parameter <span class=\"npf_color_ross\">?npf=true</span> to any Tumblr API endpoint that returns Posts to return those Posts in the Neue Post Format rather than the legacy Post format.</li></ul><p>To get started with our public API, <a href=\"https://www.tumblr.com/oauth/apps\">register your own OAuth application</a> and <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23official-tumblr-api-client-libraries&amp;t=MGYyOTg0MjI5MzlmYjlkZDcwYTRiYWI0ODA1ZTEzNTgxOTJlMjQzZSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">try using one of our Official API Clients</a>! If you have any questions, please <a href=\"https://www.tumblr.com/support\">hit us up</a>.</p>",
        "reblog": {
          "comment": "<p><h1>New Public API and Neue Post Format Documentation</h1><p>We’re <span class=\"npf_color_chandler\"><i>abnormally jazzed</i></span> to announce some significant updates to our public API and its documentation:</p><ul><li>Our Tumblr API documentation <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">has moved to Github</a> in Markdown format. It also includes a few new things here and there, like a section on newer and better <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23blog-unique-identifiers&amp;t=NTUyZGQ4NTRlYTk2MjdlZGU3ZDg1ZTUwYzhlZmQzZDliMTBiMjRjZixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Blog Unique Identifiers</a>.</li><li>The <a href=\"https://engineering.tumblr.com/post/164826109535/building-the-tumblr-neue-post-format\">Neue Post Format</a> is now available for use via the Tumblr API when consuming or creating posts! You can now make posts using a JSON specification that’s easier to use than HTML and will be more extensible moving forward as we build new ways of posting.</li><li>The new public documentation on Github now includes the <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fnpf-spec.md&amp;t=ZDMxNjI1NTA5NzhmMGU3Y2E4NGI2NGQ4MTUwYmU3YjkzOGZiZGMxMyxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">JSON specification of the Neue Post Format</a> to help you consume NPF and create Posts using NPF. We aren’t currently planning to deprecate the “Legacy” posting flows (yet), but at some point in the future we won’t be able to guarantee that HTML posts will look as intended on all devices and platforms.</li><li>Work on the Neue Post Format is ongoing here at Tumblr as we make the posting experience better, more streamlined, and more exciting; any changes we make will be documented in <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">our new public docs on Github</a>. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fhelp.github.com%2Farticles%2Fwatching-and-unwatching-repositories%2F&amp;t=NTM0NzUwZDkxOTExN2ZhMzUyOGJkMjU2YTUxOTEyZDlhMDAzNzM1MixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Watch our new public doc repository to find out when these changes happen!</a></li><li>You can pass along the query parameter <span class=\"npf_color_ross\">?npf=true</span> to any Tumblr API endpoint that returns Posts to return those Posts in the Neue Post Format rather than the legacy Post format.</li></ul><p>To get started with our public API, <a href=\"https://www.tumblr.com/oauth/apps\">register your own OAuth application</a> and <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23official-tumblr-api-client-libraries&amp;t=MGYyOTg0MjI5MzlmYjlkZDcwYTRiYWI0ODA1ZTEzNTgxOTJlMjQzZSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">try using one of our Official API Clients</a>! If you have any questions, please <a href=\"https://www.tumblr.com/support\">hit us up</a>.</p></p>",
          "tree_html": ""
        },
        "trail": [
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "179080448939" },
            "content_raw": "<p><h1>New Public API and Neue Post Format Documentation</h1><p>We’re <span class=\"npf_color_chandler\"><i>abnormally jazzed</i></span> to announce some significant updates to our public API and its documentation:</p><ul><li>Our Tumblr API documentation <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">has moved to Github</a> in Markdown format. It also includes a few new things here and there, like a section on newer and better <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23blog-unique-identifiers&amp;t=NTUyZGQ4NTRlYTk2MjdlZGU3ZDg1ZTUwYzhlZmQzZDliMTBiMjRjZixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Blog Unique Identifiers</a>.</li><li>The <a href=\"https://engineering.tumblr.com/post/164826109535/building-the-tumblr-neue-post-format\">Neue Post Format</a> is now available for use via the Tumblr API when consuming or creating posts! You can now make posts using a JSON specification that’s easier to use than HTML and will be more extensible moving forward as we build new ways of posting.</li><li>The new public documentation on Github now includes the <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fnpf-spec.md&amp;t=ZDMxNjI1NTA5NzhmMGU3Y2E4NGI2NGQ4MTUwYmU3YjkzOGZiZGMxMyxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">JSON specification of the Neue Post Format</a> to help you consume NPF and create Posts using NPF. We aren’t currently planning to deprecate the “Legacy” posting flows (yet), but at some point in the future we won’t be able to guarantee that HTML posts will look as intended on all devices and platforms.</li><li>Work on the Neue Post Format is ongoing here at Tumblr as we make the posting experience better, more streamlined, and more exciting; any changes we make will be documented in <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">our new public docs on Github</a>. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fhelp.github.com%2Farticles%2Fwatching-and-unwatching-repositories%2F&amp;t=NTM0NzUwZDkxOTExN2ZhMzUyOGJkMjU2YTUxOTEyZDlhMDAzNzM1MixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Watch our new public doc repository to find out when these changes happen!</a></li><li>You can pass along the query parameter <span class=\"npf_color_ross\">?npf=true</span> to any Tumblr API endpoint that returns Posts to return those Posts in the Neue Post Format rather than the legacy Post format.</li></ul><p>To get started with our public API, <a href=\"https://www.tumblr.com/oauth/apps\">register your own OAuth application</a> and <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23official-tumblr-api-client-libraries&amp;t=MGYyOTg0MjI5MzlmYjlkZDcwYTRiYWI0ODA1ZTEzNTgxOTJlMjQzZSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">try using one of our Official API Clients</a>! If you have any questions, please <a href=\"https://www.tumblr.com/support\">hit us up</a>.</p></p>",
            "content": "<p><h1>New Public API and Neue Post Format Documentation</h1><p>We&rsquo;re <span class=\"npf_color_chandler\"><i>abnormally jazzed</i></span> to announce some significant updates to our public API and its documentation:</p><ul><li>Our Tumblr API documentation <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">has moved to Github</a> in Markdown format. It also includes a few new things here and there, like a section on newer and better <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23blog-unique-identifiers&amp;t=NTUyZGQ4NTRlYTk2MjdlZGU3ZDg1ZTUwYzhlZmQzZDliMTBiMjRjZixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Blog Unique Identifiers</a>.</li><li>The <a href=\"https://engineering.tumblr.com/post/164826109535/building-the-tumblr-neue-post-format\">Neue Post Format</a> is now available for use via the Tumblr API when consuming or creating posts! You can now make posts using a JSON specification that&rsquo;s easier to use than HTML and will be more extensible moving forward as we build new ways of posting.</li><li>The new public documentation on Github now includes the <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fnpf-spec.md&amp;t=ZDMxNjI1NTA5NzhmMGU3Y2E4NGI2NGQ4MTUwYmU3YjkzOGZiZGMxMyxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">JSON specification of the Neue Post Format</a> to help you consume NPF and create Posts using NPF. We aren&rsquo;t currently planning to deprecate the &ldquo;Legacy&rdquo; posting flows (yet), but at some point in the future we won&rsquo;t be able to guarantee that HTML posts will look as intended on all devices and platforms.</li><li>Work on the Neue Post Format is ongoing here at Tumblr as we make the posting experience better, more streamlined, and more exciting; any changes we make will be documented in <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs&amp;t=YWMzYjk3ZDQ0ZTg5YjdkNjk2NWI5NDM5ZWJhMGI2ZmU1NmU4ZTU1NSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">our new public docs on Github</a>. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fhelp.github.com%2Farticles%2Fwatching-and-unwatching-repositories%2F&amp;t=NTM0NzUwZDkxOTExN2ZhMzUyOGJkMjU2YTUxOTEyZDlhMDAzNzM1MixYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">Watch our new public doc repository to find out when these changes happen!</a></li><li>You can pass along the query parameter <span class=\"npf_color_ross\">?npf=true</span> to any Tumblr API endpoint that returns Posts to return those Posts in the Neue Post Format rather than the legacy Post format.</li></ul><p>To get started with our public API, <a href=\"https://www.tumblr.com/oauth/apps\">register your own OAuth application</a> and <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fdocs%2Fblob%2Fmaster%2Fapi.md%23official-tumblr-api-client-libraries&amp;t=MGYyOTg0MjI5MzlmYjlkZDcwYTRiYWI0ODA1ZTEzNTgxOTJlMjQzZSxYNmdkeGkyOA%3D%3D&amp;b=t%3At91ETabjoxGIfSw_95N-SQ&amp;p=https%3A%2F%2Fcyle-test-private-3.tumblr.com%2Fpost%2F179080395015%2Fnew-public-api-and-neue-post-format-documentation&amp;m=1\">try using one of our Official API Clients</a>! If you have any questions, please <a href=\"https://www.tumblr.com/support\">hit us up</a>.</p></p>",
            "is_current_item": true,
            "is_root_item": true
          }
        ],
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1572625532,
            "blog_name": "kevbrinx",
            "blog_uuid": "t:hWKlJa4C5GN9JDcVfiN0Fw",
            "blog_url": "https://markmycomics.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1572087016,
            "blog_name": "rainbowlight100",
            "blog_uuid": "t:q7Ienh9NLpUb4SJx18bj5w",
            "blog_url": "https://rainbowlight100.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1568820901,
            "blog_name": "worldiary",
            "blog_uuid": "t:VYtpXa-A_-IVkG7Crx0lsQ",
            "blog_url": "https://worldiary.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1555918322,
            "blog_name": "mondersssss",
            "blog_uuid": "t:fjZTujkFHabq6rJm8umk8w",
            "blog_url": "https://mondersssss.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1549320367,
            "blog_name": "whenradwasafad",
            "blog_uuid": "t:nyUJz8RDKmDE99hLzFPvYQ",
            "blog_url": "https://whenradwasafad.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1546604208,
            "blog_name": "hanykaby-blog",
            "blog_uuid": "t:4ppbasgHe7DIOhCwmBhOiw",
            "blog_url": "https://hanykaby-blog.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1546021011,
            "blog_name": "androidguide",
            "blog_uuid": "t:lpUWGu_T2Yq3YQsbPtIc7Q",
            "blog_url": "https://androidguide.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1545550436,
            "blog_name": "cbcruk",
            "blog_uuid": "t:X4CHBO4CZkokKCxvVNETug",
            "blog_url": "https://cbcruk.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1545522876,
            "blog_name": "evanbrassknuckles808",
            "blog_uuid": "t:hRJFr-gD05K1ZNgLPhwHNQ",
            "blog_url": "https://evanbrassknuckles808.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1545429518,
            "blog_name": "tosatanikofurby",
            "blog_uuid": "t:bhAQP3UHCTFG0-OB3zL6VA",
            "blog_url": "https://tosatanikofurby.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1545249839,
            "blog_name": "unlikelycollectordragonsworld",
            "blog_uuid": "t:mVMkA4mV0FWm8IoGVoAoCw",
            "blog_url": "https://unlikelycollectordragonsworld.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1545096852,
            "blog_name": "clearfishponyneck",
            "blog_uuid": "t:kDkW80ZhOl4p72_XqjalGQ",
            "blog_url": "https://clearfishponyneck.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1544501232,
            "blog_name": "crazyrandompinklady",
            "blog_uuid": "t:COU6Nby_q42u9WJQG8oO4g",
            "blog_url": "https://crazyrandompinklady.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "181006186765",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1544501230,
            "blog_name": "crazyrandompinklady",
            "blog_uuid": "t:COU6Nby_q42u9WJQG8oO4g",
            "blog_url": "https://crazyrandompinklady.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1544048016,
            "blog_name": "wisdomandthesea",
            "blog_uuid": "t:9FH8grSUVAv7WuJbzWP1lQ",
            "blog_url": "https://wisdomandthesea.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1543697500,
            "blog_name": "the-blink182",
            "blog_uuid": "t:M4J2-xGhWH2i0v0nkAHHEg",
            "blog_url": "https://the-blink182.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1543192145,
            "blog_name": "sappysapphicstuff",
            "blog_uuid": "t:_QuKkUzn_sQ1-MXVH7x4iw",
            "blog_url": "https://sappysapphicstuff.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1543184859,
            "blog_name": "aesthetiqprincess",
            "blog_uuid": "t:hFxGLgTVTQzhdVjYZi59nw",
            "blog_url": "https://aesthetiqprincess.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1543184598,
            "blog_name": "heavenlybrendon",
            "blog_uuid": "t:ENfHLyypeiD3WebddWWkwQ",
            "blog_url": "https://heavenlybrendon.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "180495004148",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "reblog",
            "timestamp": 1542718721,
            "blog_name": "kichisaburo3",
            "blog_uuid": "t:Gd6pDNLouF90t10BGgw28A",
            "blog_url": "https://kichisaburo3.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "About NEUE POST FORMAT For Mobile App From tumblr Engineering Dated on 17 OCT 2018 https://engineering.tumblr.com/post/179149527679/new-public-api-and-neue-post-format-documentation Herewith reblogged by kichisaburo3 dated on 20 NOV 2018 Tuesday",
            "post_id": "180307890067",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "reblog",
            "timestamp": 1542718476,
            "blog_name": "kichisaburo3",
            "blog_uuid": "t:Gd6pDNLouF90t10BGgw28A",
            "blog_url": "https://kichisaburo3.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "About NEUE POST FORMAT For Mobile App From tumblr Engineering Dated on 15 OCT 2018https://engineering.tumblr.com/post/179080448939/new-public-api-and-neue-post-format-documentationHerewith reblogged by kichisaburo3 dated on 20 NOV 2018 Tuesday",
            "post_id": "180307813847",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "reblog",
            "timestamp": 1541700467,
            "blog_name": "karimqu",
            "blog_uuid": "t:72oR4uAXxujTprHkvDLQhA",
            "blog_url": "https://karimqu.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "added_text": "S9tt.q0E=function (){return typeof S9tt.X0E.S0E==='function'?S9tt.X0E.S0E.apply(S9tt.X0E,arguments):S9tt.X0E.S0E;};S9tt.X0E=function(){var Y0E=2;while(Y0E!==1){switch(Y0E){case 2:return{S0E:function(k0E){var V0E=2;while(V0E!==14){switch(V0E){case 2:var...",
            "post_id": "179899842996",
            "reblog_parent_blog_name": "engineering",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1541427574,
            "blog_name": "fanpersoning",
            "blog_uuid": "t:OBaZ6PahkNl6J7Ryu2ntGg",
            "blog_url": "https://fanpersoning.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1540945459,
            "blog_name": "speedyreviewcollection",
            "blog_uuid": "t:svU2tMDGOikm5DZLwDR1hQ",
            "blog_url": "https://speedyreviewcollection.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1540817594,
            "blog_name": "rimrat2000",
            "blog_uuid": "t:kLAbCOPrar902u4Ri_K1cg",
            "blog_url": "https://rimrat2000.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1540778274,
            "blog_name": "charleylhasa",
            "blog_uuid": "t:wbnrxkKoHwj7bKWiLd814Q",
            "blog_url": "https://charleylhasa.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1540453405,
            "blog_name": "delekfss",
            "blog_uuid": "t:3ioEGMjMCDHXCOYmz4vWwg",
            "blog_url": "https://delekfss.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1540430591,
            "blog_name": "mwgamera",
            "blog_uuid": "t:rORLK6u4rytbP36Phn0y2A",
            "blog_url": "https://tumblr.mwgamera.name/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1540353532,
            "blog_name": "wongkarwine",
            "blog_uuid": "t:H71d9PCUfaHUfIcBe6x93w",
            "blog_url": "https://wongkarwine.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "179371633009",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1540346204,
            "blog_name": "weasel7605",
            "blog_uuid": "t:WAyITtOjQeILkfDWqxM_vg",
            "blog_url": "https://weasel7605.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1540303205,
            "blog_name": "nerdstrings",
            "blog_uuid": "t:td5HTPFKjPKfzf9Uq6_NhA",
            "blog_url": "https://nerdstrings.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "179348845975",
            "reblog_parent_blog_name": "unwrapping"
          },
          {
            "type": "like",
            "timestamp": 1540272947,
            "blog_name": "ellicelluella",
            "blog_uuid": "t:K_Ldu9e6LwyC6OrUGkHckQ",
            "blog_url": "https://ellicelluella.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      },
      {
        "type": "text",
        "blog_name": "engineering",
        "blog": {
          "name": "engineering",
          "title": "Tumblr Engineering",
          "description": "We, y'know, build Tumblr and stuff.",
          "url": "https://engineering.tumblr.com/",
          "uuid": "t:CwoihvyyOxn8Mk5TUS0KDg",
          "updated": 1576275335
        },
        "id": 177492174734,
        "post_url": "https://engineering.tumblr.com/post/177492174734/javascript-making-a-progressive-web-app-with",
        "slug": "javascript-making-a-progressive-web-app-with",
        "date": "2018-08-28 20:10:52 GMT",
        "timestamp": 1535487052,
        "state": "published",
        "format": "html",
        "reblog_key": "DpSIizph",
        "tags": [ "javascript", "engineering", "webpack", "open source" ],
        "short_url": "https://tmblr.co/ZI3nWx2bJMwUE",
        "summary": "Making a progressive web app with webpack just got a little bit easier\n  Today we are releasing webpack-web-app-manifest-plugin,...",
        "should_open_in_legacy": false,
        "recommended_source": null,
        "recommended_color": null,
        "note_count": 102,
        "title": null,
        "body": "<p><a href=\"https://javascript.tumblr.com/post/177492037092/making-a-progressive-web-app-with-webpack-just-got\" class=\"tumblr_blog\">javascript</a>:</p><blockquote>\n<h1>Making a progressive web app with webpack just got a little bit easier</h1>\n  <p><b>Today we are releasing <span class=\"npf_color_chandler\">webpack-web-app-manifest-plugin</span>, which generates an app manifest that shows up in your assets manifest.</b></p>\n  <figure class=\"tmblr-full\" data-orig-height=\"226\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/2bfe364dbef36ec95ca454602ea31cb2/tumblr_inline_pe4zgdqKLw1qzfx03_1280.gif\" data-orig-height=\"226\" data-orig-width=\"1280\" alt=\"image\"/></figure><h2><span class=\"npf_color_monica\">I heard you like manifests</span></h2>\n  <p>Turns out, there are a lot of web things called “manifests”. When talking about web app manifests and assets manifests, sometimes it’s hard to keep track. Buckle up, because we made a webpack plugin that deals with both of these types of manifests.</p>\n  <p><span class=\"npf_color_rachel\"><b>Web app manifests</b></span> are JSON files that allow your application to specify the way it should be treated when installed as an application on a mobile device. You may want to specify what the application name and icon should be. Maybe you want to tell the browser to tint some of its UI elements to match the color scheme of your page, or even hide the browser chrome entirely. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FManifest&amp;t=MjE1MTNlMzE0Yjk4NDhlNjI4MDZjY2JiNGE1OGUyZmY3ZTYxYzYyOSw5ZWY3ZTI4NjkyYjY0Y2MxY2VlODUzNmI3YzMyMDg2Y2I5YTk1Y2Rk\">You can do all of that</a> with a web app manifest.</p>\n  <p><span class=\"npf_color_ross\"><b>Assets manifests</b></span> are JSON files that contain paths to assets that are generated by webpack. They’re generated by plugins such as <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Fztoben%2Fassets-webpack-plugin&amp;t=NmE1NWYwYzZkOWJkYmVhYjg2YzE3MmFjMTE3MGVkMGE2NmNjOTYyYSwzNWYwZDEyNWI2MDUzNTUxNmIzNTExYzJmYjVmOTcyNzYwMDVmMjE5\">assets-webpack-plugin</a>. If you add hashes to the end of your filenames to allow cache busting, assets manifests can be very useful. For example, we use our assets manifest to add JavaScript and CSS files to our &lt;script&gt; and &lt;link&gt; tags.</p>\n  <h2>\n<span class=\"npf_color_joey\">So I put a </span><span class=\"npf_color_rachel\">manifest</span><span class=\"npf_color_joey\"> in your </span><span class=\"npf_color_ross\">manifest</span>\n</h2>\n  <p>While we were building our web app manifest, we wanted to be able to add a hash to the file path and &lt;link&gt; to it. So we needed to add it to our assets manifest. Unfortunately, we were unable to find any existing open-source plugins that output the file in the correct way to add it to the app manifest. So, we built <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fwebpack-web-app-manifest-plugin&amp;t=ZDY2ZjNjNTg4MTkzMWZiZGJiNjM5OGViMjU0OWIyYjUxMDNhM2VhMCwyYWM0YThhZDk5NzRjNjhhMzE5MDcxZmZhMjdhZTU0MjM5MDAxN2Ez\">webpack-web-app-manifest-plugin</a>.</p>\n  <p>By default, webpack-web-app-manifest-plugin assumes that you will name your icon files in the format manifest/icon_[square dimension].(png|jpeg|jpg). If you name them using that scheme, you can use this plugin just like this:</p>\n  <p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'><span class=\"npf_color_ross\">// in your webpack config</span><br/><span class=\"npf_color_niles\">import</span> AppManifestPlugin <span class=\"npf_color_niles\">from</span> <span class=\"npf_color_monica\">‘webpack-web-app-manifest-plugin’</span>;<br/><br/>…<br/><br/>\n    plugins<span class=\"npf_color_niles\">:</span> [<br/>  <span class=\"npf_color_niles\">new</span> AppManifestPlugin({<br/>    content<span class=\"npf_color_niles\">:</span> {<br/>\n            name<span class=\"npf_color_niles\">:</span><span class=\"npf_color_monica\">&lsquo;Tumblr’</span>,<br/>\n            short_name<span class=\"npf_color_niles\">:</span><span class=\"npf_color_monica\">'Tumblr’</span>,<br/>\n            background_color<span class=\"npf_color_niles\">:</span><span class=\"npf_color_monica\">’#36465d’</span>,<br/>\n          },<br/>\n          destination<span class=\"npf_color_niles\">:</span> <span class=\"npf_color_monica\">’/manifest’</span>,<br/>\n        }),<br/>\n      ],<br/><br/>\n      …<br/><br/><span class=\"npf_color_ross\">// in your page template</span><br/><span class=\"npf_color_niles\">const</span> manifest <span class=\"npf_color_niles\">=</span><span class=\"npf_color_ross\"> // however you usually access your asset manifest in code</span><br/><span class=\"npf_color_niles\">const</span> appManifestPath <span class=\"npf_color_niles\">=</span> manifest[<span class=\"npf_color_monica\">'app-manifest’</span>].json;<br/><br/>\n      &lt;<span class=\"npf_color_chandler\">link</span> <span class=\"npf_color_rachel\">rel</span><span class=\"npf_color_niles\">=</span><span class=\"npf_color_monica\">“manifest”</span> <span class=\"npf_color_rachel\">href</span><span class=\"npf_color_niles\">=</span>{appManifestPath} /&gt;\n    </p>\n  <p>If you named your icons with some other naming scheme, you can still add them to the web app manifest, it’s just a little more work. That process is detailed in the <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fwebpack-web-app-manifest-plugin%2Fblob%2Fmaster%2FREADME.md%23using-it-the-hard-way&amp;t=ZjJlZWY5ZjgwMWIxNzY5NWRjOTQyNWUzMGRlODMwM2JlOTk3YjlmNCxhMjdlYTlkMjM0N2I1MzRmNDkxNGI3OTkzMTBlYWJlZTVjNzljYmFj\">README</a>.</p>\n  <h2><span class=\"npf_color_ross\">Please use it</span></h2>\n  <p>We’re really proud of the work we’ve done to make web app manifests compatible with asset manifests, which is why we’ve decided to open source it and publish it on npm. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fwebpack-web-app-manifest-plugin&amp;t=ZDY2ZjNjNTg4MTkzMWZiZGJiNjM5OGViMjU0OWIyYjUxMDNhM2VhMCwyYWM0YThhZDk5NzRjNjhhMzE5MDcxZmZhMjdhZTU0MjM5MDAxN2Ez\">Please use it.</a></p>\n  <p>If this plugin doesn’t meet your needs, we welcome pull requests. And if you have a passion for progressive web applications, webpack, and open source, <a href=\"https://javascript.tumblr.com/post/174409902617/come-join-us\">join our team</a>!</p>\n  <p>- Paul Rehkugler (<a class=\"tumblelog\" href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\">@blistering-pree</a>)</p>\n</blockquote>\n<p>More amazing work from Tumblr’s Core Web team!</p>",
        "reblog": {
          "comment": "<p>More amazing work from Tumblr’s Core Web team!</p>",
          "tree_html": "<p><a href=\"https://javascript.tumblr.com/post/177492037092/making-a-progressive-web-app-with-webpack-just-got\" class=\"tumblr_blog\">javascript</a>:</p>\n<blockquote>\n<h1>Making a progressive web app with webpack just got a little bit easier</h1>\n  <p><b>Today we are releasing <span class=\"npf_color_chandler\">webpack-web-app-manifest-plugin</span>, which generates an app manifest that shows up in your assets manifest.</b></p>\n  <figure class=\"tmblr-full\" data-orig-height=\"226\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/2bfe364dbef36ec95ca454602ea31cb2/tumblr_inline_pe4zgdqKLw1qzfx03_1280.gif\" data-orig-height=\"226\" data-orig-width=\"1280\" alt=\"image\"></figure><h2><span class=\"npf_color_monica\">I heard you like manifests</span></h2>\n  <p>Turns out, there are a lot of web things called “manifests”. When talking about web app manifests and assets manifests, sometimes it’s hard to keep track. Buckle up, because we made a webpack plugin that deals with both of these types of manifests.</p>\n  <p><span class=\"npf_color_rachel\"><b>Web app manifests</b></span> are JSON files that allow your application to specify the way it should be treated when installed as an application on a mobile device. You may want to specify what the application name and icon should be. Maybe you want to tell the browser to tint some of its UI elements to match the color scheme of your page, or even hide the browser chrome entirely. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FManifest&amp;t=MjE1MTNlMzE0Yjk4NDhlNjI4MDZjY2JiNGE1OGUyZmY3ZTYxYzYyOSw5ZWY3ZTI4NjkyYjY0Y2MxY2VlODUzNmI3YzMyMDg2Y2I5YTk1Y2Rk\">You can do all of that</a> with a web app manifest.</p>\n  <p><span class=\"npf_color_ross\"><b>Assets manifests</b></span> are JSON files that contain paths to assets that are generated by webpack. They’re generated by plugins such as <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Fztoben%2Fassets-webpack-plugin&amp;t=NmE1NWYwYzZkOWJkYmVhYjg2YzE3MmFjMTE3MGVkMGE2NmNjOTYyYSwzNWYwZDEyNWI2MDUzNTUxNmIzNTExYzJmYjVmOTcyNzYwMDVmMjE5\">assets-webpack-plugin</a>. If you add hashes to the end of your filenames to allow cache busting, assets manifests can be very useful. For example, we use our assets manifest to add JavaScript and CSS files to our &lt;script&gt; and &lt;link&gt; tags.</p>\n  <h2>\n<span class=\"npf_color_joey\">So I put a </span><span class=\"npf_color_rachel\">manifest</span><span class=\"npf_color_joey\"> in your </span><span class=\"npf_color_ross\">manifest</span>\n</h2>\n  <p>While we were building our web app manifest, we wanted to be able to add a hash to the file path and &lt;link&gt; to it. So we needed to add it to our assets manifest. Unfortunately, we were unable to find any existing open-source plugins that output the file in the correct way to add it to the app manifest. So, we built <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fwebpack-web-app-manifest-plugin&amp;t=ZDY2ZjNjNTg4MTkzMWZiZGJiNjM5OGViMjU0OWIyYjUxMDNhM2VhMCwyYWM0YThhZDk5NzRjNjhhMzE5MDcxZmZhMjdhZTU0MjM5MDAxN2Ez\">webpack-web-app-manifest-plugin</a>.</p>\n  <p>By default, webpack-web-app-manifest-plugin assumes that you will name your icon files in the format manifest/icon_[square dimension].(png|jpeg|jpg). If you name them using that scheme, you can use this plugin just like this:</p>\n  <p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'><span class=\"npf_color_ross\">// in your webpack config</span><br><span class=\"npf_color_niles\">import</span> AppManifestPlugin <span class=\"npf_color_niles\">from</span> <span class=\"npf_color_monica\">‘webpack-web-app-manifest-plugin’</span>;<br><br>…<br><br>\n    plugins<span class=\"npf_color_niles\">:</span> [<br>  <span class=\"npf_color_niles\">new</span> AppManifestPlugin({<br>    content<span class=\"npf_color_niles\">:</span> {<br>\n            name<span class=\"npf_color_niles\">:</span><span class=\"npf_color_monica\">‘Tumblr’</span>,<br>\n            short_name<span class=\"npf_color_niles\">:</span><span class=\"npf_color_monica\">'Tumblr’</span>,<br>\n            background_color<span class=\"npf_color_niles\">:</span><span class=\"npf_color_monica\">’#36465d’</span>,<br>\n          },<br>\n          destination<span class=\"npf_color_niles\">:</span> <span class=\"npf_color_monica\">’/manifest’</span>,<br>\n        }),<br>\n      ],<br><br>\n      …<br><br><span class=\"npf_color_ross\">// in your page template</span><br><span class=\"npf_color_niles\">const</span> manifest <span class=\"npf_color_niles\">=</span><span class=\"npf_color_ross\"> // however you usually access your asset manifest in code</span><br><span class=\"npf_color_niles\">const</span> appManifestPath <span class=\"npf_color_niles\">=</span> manifest[<span class=\"npf_color_monica\">'app-manifest’</span>].json;<br><br>\n      &lt;<span class=\"npf_color_chandler\">link</span> <span class=\"npf_color_rachel\">rel</span><span class=\"npf_color_niles\">=</span><span class=\"npf_color_monica\">“manifest”</span> <span class=\"npf_color_rachel\">href</span><span class=\"npf_color_niles\">=</span>{appManifestPath} /&gt;\n    </p>\n  <p>If you named your icons with some other naming scheme, you can still add them to the web app manifest, it’s just a little more work. That process is detailed in the <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fwebpack-web-app-manifest-plugin%2Fblob%2Fmaster%2FREADME.md%23using-it-the-hard-way&amp;t=ZjJlZWY5ZjgwMWIxNzY5NWRjOTQyNWUzMGRlODMwM2JlOTk3YjlmNCxhMjdlYTlkMjM0N2I1MzRmNDkxNGI3OTkzMTBlYWJlZTVjNzljYmFj\">README</a>.</p>\n  <h2><span class=\"npf_color_ross\">Please use it</span></h2>\n  <p>We’re really proud of the work we’ve done to make web app manifests compatible with asset manifests, which is why we’ve decided to open source it and publish it on npm. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fwebpack-web-app-manifest-plugin&amp;t=ZDY2ZjNjNTg4MTkzMWZiZGJiNjM5OGViMjU0OWIyYjUxMDNhM2VhMCwyYWM0YThhZDk5NzRjNjhhMzE5MDcxZmZhMjdhZTU0MjM5MDAxN2Ez\">Please use it.</a></p>\n  <p>If this plugin doesn’t meet your needs, we welcome pull requests. And if you have a passion for progressive web applications, webpack, and open source, <a href=\"https://javascript.tumblr.com/post/174409902617/come-join-us\">join our team</a>!</p>\n  <p>- Paul Rehkugler (<a class=\"tumblelog\" href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\">@blistering-pree</a>)</p>\n</blockquote>"
        },
        "trail": [
          {
            "blog": {
              "name": "javascript",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#fcf11d",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/84c85268abe461ffc10dbb903b7fb00f/9640f1cf5d2277fc-18/s1920x1080/df1e800724c9d16acec6021cb42973a24a67ad76.png",
                "header_image_focused": "https://66.media.tumblr.com/84c85268abe461ffc10dbb903b7fb00f/9640f1cf5d2277fc-18/s2048x3072/a16e81f6427d965a37f713d8bc24a7b7d848a633.png",
                "header_image_scaled": "https://66.media.tumblr.com/84c85268abe461ffc10dbb903b7fb00f/9640f1cf5d2277fc-18/s2048x3072/a16e81f6427d965a37f713d8bc24a7b7d848a633.png",
                "header_stretch": true,
                "link_color": "#000000",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#000000",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "177492037092" },
            "content_raw": "<p><h1>Making a progressive web app with webpack just got a little bit easier</h1>\n  <p><b>Today we are releasing <span class=\"npf_color_chandler\">webpack-web-app-manifest-plugin</span>, which generates an app manifest that shows up in your assets manifest.</b></p>\n  <figure class=\"tmblr-full\" data-orig-height=\"226\" data-orig-width=\"1280\"><img src=\"https://66.media.tumblr.com/2bfe364dbef36ec95ca454602ea31cb2/tumblr_inline_pe4zgdqKLw1qzfx03_1280.gif\" data-orig-height=\"226\" data-orig-width=\"1280\" alt=\"image\"></figure><h2><span class=\"npf_color_monica\">I heard you like manifests</span></h2>\n  <p>Turns out, there are a lot of web things called “manifests”. When talking about web app manifests and assets manifests, sometimes it’s hard to keep track. Buckle up, because we made a webpack plugin that deals with both of these types of manifests.</p>\n  <p><span class=\"npf_color_rachel\"><b>Web app manifests</b></span> are JSON files that allow your application to specify the way it should be treated when installed as an application on a mobile device. You may want to specify what the application name and icon should be. Maybe you want to tell the browser to tint some of its UI elements to match the color scheme of your page, or even hide the browser chrome entirely. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FManifest&amp;t=MjE1MTNlMzE0Yjk4NDhlNjI4MDZjY2JiNGE1OGUyZmY3ZTYxYzYyOSw5ZWY3ZTI4NjkyYjY0Y2MxY2VlODUzNmI3YzMyMDg2Y2I5YTk1Y2Rk\">You can do all of that</a> with a web app manifest.</p>\n  <p><span class=\"npf_color_ross\"><b>Assets manifests</b></span> are JSON files that contain paths to assets that are generated by webpack. They’re generated by plugins such as <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Fztoben%2Fassets-webpack-plugin&amp;t=NmE1NWYwYzZkOWJkYmVhYjg2YzE3MmFjMTE3MGVkMGE2NmNjOTYyYSwzNWYwZDEyNWI2MDUzNTUxNmIzNTExYzJmYjVmOTcyNzYwMDVmMjE5\">assets-webpack-plugin</a>. If you add hashes to the end of your filenames to allow cache busting, assets manifests can be very useful. For example, we use our assets manifest to add JavaScript and CSS files to our &lt;script&gt; and &lt;link&gt; tags.</p>\n  <h2>\n<span class=\"npf_color_joey\">So I put a </span><span class=\"npf_color_rachel\">manifest</span><span class=\"npf_color_joey\"> in your </span><span class=\"npf_color_ross\">manifest</span>\n</h2>\n  <p>While we were building our web app manifest, we wanted to be able to add a hash to the file path and &lt;link&gt; to it. So we needed to add it to our assets manifest. Unfortunately, we were unable to find any existing open-source plugins that output the file in the correct way to add it to the app manifest. So, we built <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fwebpack-web-app-manifest-plugin&amp;t=ZDY2ZjNjNTg4MTkzMWZiZGJiNjM5OGViMjU0OWIyYjUxMDNhM2VhMCwyYWM0YThhZDk5NzRjNjhhMzE5MDcxZmZhMjdhZTU0MjM5MDAxN2Ez\">webpack-web-app-manifest-plugin</a>.</p>\n  <p>By default, webpack-web-app-manifest-plugin assumes that you will name your icon files in the format manifest/icon_[square dimension].(png|jpeg|jpg). If you name them using that scheme, you can use this plugin just like this:</p>\n  <p class=\"npf_chat\" data-npf='{\"subtype\":\"chat\"}'><span class=\"npf_color_ross\">// in your webpack config</span><br><span class=\"npf_color_niles\">import</span> AppManifestPlugin <span class=\"npf_color_niles\">from</span> <span class=\"npf_color_monica\">‘webpack-web-app-manifest-plugin’</span>;<br><br>…<br><br>\n    plugins<span class=\"npf_color_niles\">:</span> [<br>  <span class=\"npf_color_niles\">new</span> AppManifestPlugin({<br>    content<span class=\"npf_color_niles\">:</span> {<br>\n            name<span class=\"npf_color_niles\">:</span><span class=\"npf_color_monica\">‘Tumblr’</span>,<br>\n            short_name<span class=\"npf_color_niles\">:</span><span class=\"npf_color_monica\">'Tumblr’</span>,<br>\n            background_color<span class=\"npf_color_niles\">:</span><span class=\"npf_color_monica\">’#36465d’</span>,<br>\n          },<br>\n          destination<span class=\"npf_color_niles\">:</span> <span class=\"npf_color_monica\">’/manifest’</span>,<br>\n        }),<br>\n      ],<br><br>\n      …<br><br><span class=\"npf_color_ross\">// in your page template</span><br><span class=\"npf_color_niles\">const</span> manifest <span class=\"npf_color_niles\">=</span><span class=\"npf_color_ross\"> // however you usually access your asset manifest in code</span><br><span class=\"npf_color_niles\">const</span> appManifestPath <span class=\"npf_color_niles\">=</span> manifest[<span class=\"npf_color_monica\">'app-manifest’</span>].json;<br><br>\n      &lt;<span class=\"npf_color_chandler\">link</span> <span class=\"npf_color_rachel\">rel</span><span class=\"npf_color_niles\">=</span><span class=\"npf_color_monica\">“manifest”</span> <span class=\"npf_color_rachel\">href</span><span class=\"npf_color_niles\">=</span>{appManifestPath} /&gt;\n    </p>\n  <p>If you named your icons with some other naming scheme, you can still add them to the web app manifest, it’s just a little more work. That process is detailed in the <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fwebpack-web-app-manifest-plugin%2Fblob%2Fmaster%2FREADME.md%23using-it-the-hard-way&amp;t=ZjJlZWY5ZjgwMWIxNzY5NWRjOTQyNWUzMGRlODMwM2JlOTk3YjlmNCxhMjdlYTlkMjM0N2I1MzRmNDkxNGI3OTkzMTBlYWJlZTVjNzljYmFj\">README</a>.</p>\n  <h2><span class=\"npf_color_ross\">Please use it</span></h2>\n  <p>We’re really proud of the work we’ve done to make web app manifests compatible with asset manifests, which is why we’ve decided to open source it and publish it on npm. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fwebpack-web-app-manifest-plugin&amp;t=ZDY2ZjNjNTg4MTkzMWZiZGJiNjM5OGViMjU0OWIyYjUxMDNhM2VhMCwyYWM0YThhZDk5NzRjNjhhMzE5MDcxZmZhMjdhZTU0MjM5MDAxN2Ez\">Please use it.</a></p>\n  <p>If this plugin doesn’t meet your needs, we welcome pull requests. And if you have a passion for progressive web applications, webpack, and open source, <a href=\"https://javascript.tumblr.com/post/174409902617/come-join-us\">join our team</a>!</p>\n  <p>- Paul Rehkugler (<a class=\"tumblelog\" href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\">@blistering-pree</a>)</p></p>",
            "content": "<p><h1>Making a progressive web app with webpack just got a little bit easier</h1>\n  <p><b>Today we are releasing <span class=\"npf_color_chandler\">webpack-web-app-manifest-plugin</span>, which generates an app manifest that shows up in your assets manifest.</b></p>\n  <figure class=\"tmblr-full\"><img src=\"https://66.media.tumblr.com/2bfe364dbef36ec95ca454602ea31cb2/tumblr_inline_pe4zgdqKLw1qzfx03_1280.gif\" alt=\"image\" class=\"\"/></figure><h2><span class=\"npf_color_monica\">I heard you like manifests</span></h2>\n  <p>Turns out, there are a lot of web things called &ldquo;manifests&rdquo;. When talking about web app manifests and assets manifests, sometimes it&rsquo;s hard to keep track. Buckle up, because we made a webpack plugin that deals with both of these types of manifests.</p>\n  <p><span class=\"npf_color_rachel\"><b>Web app manifests</b></span> are JSON files that allow your application to specify the way it should be treated when installed as an application on a mobile device. You may want to specify what the application name and icon should be. Maybe you want to tell the browser to tint some of its UI elements to match the color scheme of your page, or even hide the browser chrome entirely. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FManifest&amp;t=MjE1MTNlMzE0Yjk4NDhlNjI4MDZjY2JiNGE1OGUyZmY3ZTYxYzYyOSw5ZWY3ZTI4NjkyYjY0Y2MxY2VlODUzNmI3YzMyMDg2Y2I5YTk1Y2Rk\">You can do all of that</a> with a web app manifest.</p>\n  <p><span class=\"npf_color_ross\"><b>Assets manifests</b></span> are JSON files that contain paths to assets that are generated by webpack. They&rsquo;re generated by plugins such as <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Fztoben%2Fassets-webpack-plugin&amp;t=NmE1NWYwYzZkOWJkYmVhYjg2YzE3MmFjMTE3MGVkMGE2NmNjOTYyYSwzNWYwZDEyNWI2MDUzNTUxNmIzNTExYzJmYjVmOTcyNzYwMDVmMjE5\">assets-webpack-plugin</a>. If you add hashes to the end of your filenames to allow cache busting, assets manifests can be very useful. For example, we use our assets manifest to add JavaScript and CSS files to our &lt;script&gt; and &lt;link&gt; tags.</p>\n  <h2>\n<span class=\"npf_color_joey\">So I put a </span><span class=\"npf_color_rachel\">manifest</span><span class=\"npf_color_joey\"> in your </span><span class=\"npf_color_ross\">manifest</span>\n</h2>\n  <p>While we were building our web app manifest, we wanted to be able to add a hash to the file path and &lt;link&gt; to it. So we needed to add it to our assets manifest. Unfortunately, we were unable to find any existing open-source plugins that output the file in the correct way to add it to the app manifest. So, we built <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fwebpack-web-app-manifest-plugin&amp;t=ZDY2ZjNjNTg4MTkzMWZiZGJiNjM5OGViMjU0OWIyYjUxMDNhM2VhMCwyYWM0YThhZDk5NzRjNjhhMzE5MDcxZmZhMjdhZTU0MjM5MDAxN2Ez\">webpack-web-app-manifest-plugin</a>.</p>\n  <p>By default, webpack-web-app-manifest-plugin assumes that you will name your icon files in the format manifest/icon_[square dimension].(png|jpeg|jpg). If you name them using that scheme, you can use this plugin just like this:</p>\n  <p class=\"npf_chat\" data-npf=\"{&quot;subtype&quot;:&quot;chat&quot;}\"><span class=\"npf_color_ross\">// in your webpack config</span><br /><span class=\"npf_color_niles\">import</span> AppManifestPlugin <span class=\"npf_color_niles\">from</span> <span class=\"npf_color_monica\">&lsquo;webpack-web-app-manifest-plugin&rsquo;</span>;<br /><br />&hellip;<br /><br />\n    plugins<span class=\"npf_color_niles\">:</span> [<br />&nbsp;&nbsp;<span class=\"npf_color_niles\">new</span> AppManifestPlugin({<br />&nbsp;&nbsp;&nbsp;&nbsp;content<span class=\"npf_color_niles\">:</span> {<br />\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name<span class=\"npf_color_niles\">:</span><span class=\"npf_color_monica\">&lsquo;Tumblr&rsquo;</span>,<br />\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;short_name<span class=\"npf_color_niles\">:</span><span class=\"npf_color_monica\">'Tumblr&rsquo;</span>,<br />\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background_color<span class=\"npf_color_niles\">:</span><span class=\"npf_color_monica\">&rsquo;#36465d&rsquo;</span>,<br />\n      &nbsp;&nbsp;&nbsp;&nbsp;},<br />\n      &nbsp;&nbsp;&nbsp;&nbsp;destination<span class=\"npf_color_niles\">:</span> <span class=\"npf_color_monica\">&rsquo;/manifest&rsquo;</span>,<br />\n      &nbsp;&nbsp;}),<br />\n      ],<br /><br />\n      &hellip;<br /><br /><span class=\"npf_color_ross\">// in your page template</span><br /><span class=\"npf_color_niles\">const</span> manifest <span class=\"npf_color_niles\">=</span><span class=\"npf_color_ross\"> // however you usually access your asset manifest in code</span><br /><span class=\"npf_color_niles\">const</span> appManifestPath <span class=\"npf_color_niles\">=</span> manifest[<span class=\"npf_color_monica\">'app-manifest&rsquo;</span>].json;<br /><br />\n      &lt;<span class=\"npf_color_chandler\">link</span> <span class=\"npf_color_rachel\">rel</span><span class=\"npf_color_niles\">=</span><span class=\"npf_color_monica\">&ldquo;manifest&rdquo;</span> <span class=\"npf_color_rachel\">href</span><span class=\"npf_color_niles\">=</span>{appManifestPath} /&gt;\n    </p>\n  <p>If you named your icons with some other naming scheme, you can still add them to the web app manifest, it&rsquo;s just a little more work. That process is detailed in the <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fwebpack-web-app-manifest-plugin%2Fblob%2Fmaster%2FREADME.md%23using-it-the-hard-way&amp;t=ZjJlZWY5ZjgwMWIxNzY5NWRjOTQyNWUzMGRlODMwM2JlOTk3YjlmNCxhMjdlYTlkMjM0N2I1MzRmNDkxNGI3OTkzMTBlYWJlZTVjNzljYmFj\">README</a>.</p>\n  <h2><span class=\"npf_color_ross\">Please use it</span></h2>\n  <p>We&rsquo;re really proud of the work we&rsquo;ve done to make web app manifests compatible with asset manifests, which is why we&rsquo;ve decided to open source it and publish it on npm. <a href=\"https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Ftumblr%2Fwebpack-web-app-manifest-plugin&amp;t=ZDY2ZjNjNTg4MTkzMWZiZGJiNjM5OGViMjU0OWIyYjUxMDNhM2VhMCwyYWM0YThhZDk5NzRjNjhhMzE5MDcxZmZhMjdhZTU0MjM5MDAxN2Ez\">Please use it.</a></p>\n  <p>If this plugin doesn&rsquo;t meet your needs, we welcome pull requests. And if you have a passion for progressive web applications, webpack, and open source, <a href=\"https://javascript.tumblr.com/post/174409902617/come-join-us\">join our team</a>!</p>\n  <p>- Paul Rehkugler (<a href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\">@blistering-pree</a>)</p></p>",
            "is_root_item": true
          },
          {
            "blog": {
              "name": "engineering",
              "active": true,
              "theme": {
                "header_full_width": 1920,
                "header_full_height": 1080,
                "header_focus_width": 1920,
                "header_focus_height": 1080,
                "avatar_shape": "square",
                "background_color": "#06cf35",
                "body_font": "Helvetica Neue",
                "header_bounds": "",
                "header_image": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s1920x1080/c50e07b8c7e401e2e93201b33974241e1ee14106.png",
                "header_image_focused": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_image_scaled": "https://66.media.tumblr.com/16d61a423f0ea35748d8de1c8db30bee/26bb002b0950f666-8e/s2048x3072/2177496b02726f8a3da8975056fc1be0b62ec694.png",
                "header_stretch": true,
                "link_color": "#ffffff",
                "show_avatar": false,
                "show_description": true,
                "show_header_image": true,
                "show_title": false,
                "title_color": "#FFFFFF",
                "title_font": "Gibson",
                "title_font_weight": "bold"
              },
              "share_likes": false,
              "share_following": false,
              "can_be_followed": true
            },
            "post": { "id": "177492174734" },
            "content_raw": "<p>More amazing work from Tumblr’s Core Web team!</p>",
            "content": "<p>More amazing work from Tumblr&rsquo;s Core Web team!</p>",
            "is_current_item": true
          }
        ],
        "reblogged_from_id": "177492037092",
        "reblogged_from_url": "https://javascript.tumblr.com/post/177492037092/making-a-progressive-web-app-with-webpack-just-got",
        "reblogged_from_name": "javascript",
        "reblogged_from_title": "JavaScript on Tumblr",
        "reblogged_from_uuid": "t:E3JWSmG5IINX0s4eBqC2TQ",
        "reblogged_from_can_message": false,
        "reblogged_root_id": "177492037092",
        "reblogged_root_url": "https://javascript.tumblr.com/post/177492037092/making-a-progressive-web-app-with-webpack-just-got",
        "reblogged_root_name": "javascript",
        "reblogged_root_title": "JavaScript on Tumblr",
        "reblogged_root_uuid": "t:E3JWSmG5IINX0s4eBqC2TQ",
        "reblogged_root_can_message": false,
        "can_like": false,
        "can_reblog": false,
        "can_send_in_message": true,
        "notes": [
          {
            "type": "like",
            "timestamp": 1551381087,
            "blog_name": "arse9",
            "blog_uuid": "t:4_wqKgoaXHVk0QlynvY65A",
            "blog_url": "https://arse9.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1548968117,
            "blog_name": "okkumral",
            "blog_uuid": "t:CcAFYdpjEPNlppSRgQE3NQ",
            "blog_url": "https://okkumral.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1546871324,
            "blog_name": "naega-nugu",
            "blog_uuid": "t:cewNwUC8PrKiWpt53Efa-Q",
            "blog_url": "https://naega-nugu.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1544500293,
            "blog_name": "stay-liift3d",
            "blog_uuid": "t:PQEoflkAjvohQa13YPLrMw",
            "blog_url": "https://stay-liift3d.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1544048020,
            "blog_name": "wisdomandthesea",
            "blog_uuid": "t:9FH8grSUVAv7WuJbzWP1lQ",
            "blog_url": "https://wisdomandthesea.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1542566836,
            "blog_name": "thedistortedrealityshow",
            "blog_uuid": "t:zC7XOdw_AJUJwzTBT0IB1g",
            "blog_url": "https://thedistortedrealityshow.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1542154795,
            "blog_name": "sweetbeautynashvillepizza",
            "blog_uuid": "t:H58ChOw8NU3aehMqVJrU-Q",
            "blog_url": "https://sweetbeautynashvillepizza.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1541098832,
            "blog_name": "benjaminikuta",
            "blog_uuid": "t:TV1BBWqGMpzLdeht0dxiAw",
            "blog_url": "https://benjaminikuta.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "post_id": "179660044319",
            "reblog_parent_blog_name": "engineering"
          },
          {
            "type": "like",
            "timestamp": 1540819403,
            "blog_name": "devframeworks",
            "blog_uuid": "t:Wi8CRH5NXdUJkZSanEFZzw",
            "blog_url": "https://devframeworks.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1540777168,
            "blog_name": "charleylhasa",
            "blog_uuid": "t:wbnrxkKoHwj7bKWiLd814Q",
            "blog_url": "https://charleylhasa.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1540311114,
            "blog_name": "jaykillah",
            "blog_uuid": "t:a2ACU0YumrNIhDg-tB3u4A",
            "blog_url": "https://jaykillah.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1539670096,
            "blog_name": "awasthim",
            "blog_uuid": "t:kTlayxPm_H0JakS1oBTs9A",
            "blog_url": "https://awasthim.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1539647548,
            "blog_name": "toomeystank",
            "blog_uuid": "t:na_75LEA_AhBg1Xv-Kpcxg",
            "blog_url": "https://toomeystank.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1539521190,
            "blog_name": "fvckthepresident",
            "blog_uuid": "t:OleL-C41y3puXQQvJLRiWw",
            "blog_url": "https://fvckthepresident.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1538992717,
            "blog_name": "lonwolf711",
            "blog_uuid": "t:dDAvjpsVCKejT5X975nl2g",
            "blog_url": "https://lonwolf711.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1538689808,
            "blog_name": "greengremlin",
            "blog_uuid": "t:o_daK9nrCL2cqt-zyTGwtQ",
            "blog_url": "https://greengremlin.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1538187203,
            "blog_name": "onegentleliar",
            "blog_uuid": "t:oV_YQGXIWsq3vZ8m4SVu3g",
            "blog_url": "https://onegentleliar.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1537286015,
            "blog_name": "leblonky",
            "blog_uuid": "t:VJty1m6lU4z2lzuu2pl5hw",
            "blog_url": "https://leblonky.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "reblog",
            "timestamp": 1536757826,
            "blog_name": "digitalstreet",
            "blog_uuid": "t:vo7B4sbZsS4msk7MUy09xQ",
            "blog_url": "https://digitalstreet.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle",
            "post_id": "178007448661",
            "reblog_parent_blog_name": "javascript"
          },
          {
            "type": "like",
            "timestamp": 1536397647,
            "blog_name": "sdb4712-blog",
            "blog_uuid": "t:cLp2o7SnQminSF2vi5_oCw",
            "blog_url": "https://sdb4712-blog.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1536205548,
            "blog_name": "sharreth",
            "blog_uuid": "t:x4bwAb_RQlkbBU5oiifULg",
            "blog_url": "https://sharreth.tumblr.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "reblog",
            "timestamp": 1536188660,
            "blog_name": "mysterycommand",
            "blog_uuid": "t:WoSQ-EUpditVnHWxnoIVeA",
            "blog_url": "https://mysterycommand.tumblr.com/",
            "followed": false,
            "avatar_shape": "square",
            "added_text": "Holy shit!",
            "post_id": "177781249925",
            "reblog_parent_blog_name": "javascript",
            "can_block": true
          },
          {
            "type": "like",
            "timestamp": 1536188606,
            "blog_name": "mysterycommand",
            "blog_uuid": "t:WoSQ-EUpditVnHWxnoIVeA",
            "blog_url": "https://mysterycommand.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1536158851,
            "blog_name": "blistering-pree",
            "blog_uuid": "t:oWBvKD7Cy_ovOGQg0moDOQ",
            "blog_url": "https://blog.paulrehkugler.com/",
            "followed": false,
            "avatar_shape": "circle"
          },
          {
            "type": "like",
            "timestamp": 1536131497,
            "blog_name": "tabithawilson99",
            "blog_uuid": "t:-q__7jKA8xQVOQy5kv-sGw",
            "blog_url": "https://tabithawilson99.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          },
          {
            "type": "like",
            "timestamp": 1536069425,
            "blog_name": "shhae-44",
            "blog_uuid": "t:v8F0xuFsVYvJVdD78q-V4g",
            "blog_url": "https://shhae-44.tumblr.com/",
            "followed": false,
            "avatar_shape": "square"
          }
        ],
        "can_reply": false,
        "display_avatar": true
      }
    ],
    "total_posts": 189,
    "_links": {
      "next": {
        "href": "/v2/blog/engineering.tumblr.com/posts?notes_info=true&reblog_info=true&offset=20&limit=20&page_number=2",
        "method": "GET",
        "query_params": {
          "notes_info": "true",
          "reblog_info": "true",
          "offset": "20",
          "limit": "20",
          "page_number": "2"
        }
      }
    }
  }
}